// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name NoorSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import Accelerate
import AudioToolbox
import Combine
import CommonCrypto
import CoreAudio
import CoreData
import CoreGraphics
import CoreImage
import CoreLocation
import Dispatch
import Foundation
import ImageIO
import MapKit
import MediaPlayer
import MobileCoreServices
@_exported import NoorSDK
import ObjectiveC
import PDFKit
import QuartzCore
import SafariServices
import StoreKit
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import UniformTypeIdentifiers
import WebKit
import _Concurrency
import _StringProcessing
import os.log
import os
import ObjectiveC.runtime
extension Swift.Double {
  public func roundToDecimal(_ fractionDigits: Swift.Int) -> Swift.Double
}
public typealias ProductID = Swift.String
public typealias ProductsRequestCompletionHandler = (_ success: Swift.Bool, _ products: [StoreKit.SKProduct]?) -> Swift.Void
public typealias ProductPurchaseCompletionHandler = (_ success: Swift.Bool, _ productId: NoorSDK.ProductID?) -> Swift.Void
public typealias ProductRestoreCompletionHandler = (_ success: Swift.Bool) -> Swift.Void
@objc public class IAPManager : ObjectiveC.NSObject {
  public init(productIDs: Swift.Set<NoorSDK.ProductID>)
  @objc deinit
}
extension NoorSDK.IAPManager {
  public func requestProducts(_ completionHandler: @escaping NoorSDK.ProductsRequestCompletionHandler)
  public func buyProduct(_ product: StoreKit.SKProduct, _ completionHandler: @escaping NoorSDK.ProductPurchaseCompletionHandler)
  public func isProductPurchased(_ productID: NoorSDK.ProductID) -> Swift.Bool
  public class func canMakePayments() -> Swift.Bool
  public func restorePurchases()
  public func restorePurchasesCompleted(completion: @escaping NoorSDK.ProductRestoreCompletionHandler)
}
extension NoorSDK.IAPManager : StoreKit.SKProductsRequestDelegate {
  @objc dynamic public func productsRequest(_ request: StoreKit.SKProductsRequest, didReceive response: StoreKit.SKProductsResponse)
  @objc dynamic public func request(_ request: StoreKit.SKRequest, didFailWithError error: Swift.Error)
}
extension NoorSDK.IAPManager : StoreKit.SKPaymentTransactionObserver {
  @objc dynamic public func paymentQueue(_ queue: StoreKit.SKPaymentQueue, updatedTransactions transactions: [StoreKit.SKPaymentTransaction])
  @objc dynamic public func paymentQueue(_ queue: StoreKit.SKPaymentQueue, restoreCompletedTransactionsFailedWithError error: Swift.Error)
}
@_inheritsConvenienceInitializers @available(iOSApplicationExtension, unavailable)
@objc @_Concurrency.MainActor(unsafe) open class IQBarButtonItem : UIKit.UIBarButtonItem {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var tintColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open func setTarget(_ target: Swift.AnyObject?, action: ObjectiveC.Selector?)
  @objc @_Concurrency.MainActor(unsafe) open var invocation: NoorSDK.IQInvocation?
  @objc deinit
}
@available(iOSApplicationExtension, unavailable)
@objc final public class IQInvocation : ObjectiveC.NSObject {
  @objc weak final public var target: Swift.AnyObject?
  @objc final public var action: ObjectiveC.Selector
  @objc public init(_ target: Swift.AnyObject, _ action: ObjectiveC.Selector)
  @objc final public func invoke(from: Any)
  @objc deinit
}
prefix operator ^
public protocol VGPlayerResourceLoaderManagerDelegate : AnyObject {
  func resourceLoaderManager(_ loadURL: Foundation.URL, didFailWithError error: Swift.Error?)
}
@objc @_inheritsConvenienceInitializers open class VGPlayerResourceLoaderManager : ObjectiveC.NSObject {
  weak open var delegate: NoorSDK.VGPlayerResourceLoaderManagerDelegate?
  @objc override dynamic public init()
  open func cleanCache()
  open func cancelLoaders()
  open func assetURL(_ url: Foundation.URL?) -> Foundation.URL?
  open func playerItem(_ url: Foundation.URL) -> AVFoundation.AVPlayerItem
  @objc deinit
}
extension NoorSDK.VGPlayerResourceLoaderManager : AVFoundation.AVAssetResourceLoaderDelegate {
  @objc dynamic public func resourceLoader(_ resourceLoader: AVFoundation.AVAssetResourceLoader, shouldWaitForLoadingOfRequestedResource loadingRequest: AVFoundation.AVAssetResourceLoadingRequest) -> Swift.Bool
  @objc dynamic public func resourceLoader(_ resourceLoader: AVFoundation.AVAssetResourceLoader, didCancel loadingRequest: AVFoundation.AVAssetResourceLoadingRequest)
}
extension NoorSDK.VGPlayerResourceLoaderManager : NoorSDK.VGPlayerResourceLoaderDelegate {
  public func resourceLoader(_ resourceLoader: NoorSDK.VGPlayerResourceLoader, didFailWithError error: Swift.Error?)
}
public struct Region : Swift.Decodable, Swift.Encodable, Swift.Equatable, Swift.Hashable, Swift.CustomStringConvertible {
  public let calendar: Foundation.Calendar
  public var locale: Foundation.Locale {
    get
  }
  public var timeZone: Foundation.TimeZone {
    get
  }
  public var description: Swift.String {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public init(calendar: NoorSDK.CalendarConvertible = SwiftDate.defaultRegion.calendar, zone: NoorSDK.ZoneConvertible = SwiftDate.defaultRegion.timeZone, locale: NoorSDK.LocaleConvertible = SwiftDate.defaultRegion.locale)
  public init(fromDateComponents components: Foundation.DateComponents)
  public static var UTC: NoorSDK.Region {
    get
  }
  public static var local: NoorSDK.Region {
    get
  }
  public static var ISO: NoorSDK.Region {
    get
  }
  public static var current: NoorSDK.Region {
    get
  }
  public static func currentIn(locale: NoorSDK.LocaleConvertible? = nil, calendar: NoorSDK.CalendarConvertible? = nil) -> NoorSDK.Region
  public func nowInThisRegion() -> NoorSDK.DateInRegion
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
  public static func == (lhs: NoorSDK.Region, rhs: NoorSDK.Region) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public protocol VGPlayerViewDelegate : AnyObject {
  func vgPlayerView(_ playerView: NoorSDK.VGPlayerView, willFullscreen isFullscreen: Swift.Bool)
  func vgPlayerView(didTappedClose playerView: NoorSDK.VGPlayerView)
  func vgPlayerView(didDisplayControl playerView: NoorSDK.VGPlayerView)
}
extension NoorSDK.VGPlayerViewDelegate {
  public func vgPlayerView(_ playerView: NoorSDK.VGPlayerView, willFullscreen fullscreen: Swift.Bool)
  public func vgPlayerView(didTappedClose playerView: NoorSDK.VGPlayerView)
  public func vgPlayerView(didDisplayControl playerView: NoorSDK.VGPlayerView)
}
public enum VGPlayerViewPanGestureDirection : Swift.Int {
  case vertical
  case horizontal
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class VGPlayerView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) weak open var vgPlayer: NoorSDK.VGPlayer?
  @_Concurrency.MainActor(unsafe) open var controlViewDuration: Swift.Double
  @_Concurrency.MainActor(unsafe) open var playerLayer: AVFoundation.AVPlayerLayer? {
    get
  }
  @_Concurrency.MainActor(unsafe) open var isFullScreen: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) open var isTimeSliding: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) open var isDisplayControl: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) weak open var delegate: NoorSDK.VGPlayerViewDelegate?
  @_Concurrency.MainActor(unsafe) open var topView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) open var titleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) open var closeButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) open var bottomView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) open var timeSlider: NoorSDK.VGPlayerSlider
  @_Concurrency.MainActor(unsafe) open var loadingIndicator: NoorSDK.VGPlayerLoadingIndicator
  @_Concurrency.MainActor(unsafe) open var fullscreenButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) open var timeLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) open var playButtion: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) open var volumeSlider: UIKit.UISlider!
  @_Concurrency.MainActor(unsafe) open var replayButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) open var panGestureDirection: NoorSDK.VGPlayerViewPanGestureDirection {
    get
  }
  @_Concurrency.MainActor(unsafe) open var singleTapGesture: UIKit.UITapGestureRecognizer
  @_Concurrency.MainActor(unsafe) open var doubleTapGesture: UIKit.UITapGestureRecognizer
  @_Concurrency.MainActor(unsafe) open var panGesture: UIKit.UIPanGestureRecognizer
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) open func setvgPlayer(vgPlayer: NoorSDK.VGPlayer)
  @_Concurrency.MainActor(unsafe) open func reloadPlayerLayer()
  @_Concurrency.MainActor(unsafe) open func playStateDidChange(_ state: NoorSDK.VGPlayerState)
  @_Concurrency.MainActor(unsafe) open func bufferStateDidChange(_ state: NoorSDK.VGPlayerBufferstate)
  @_Concurrency.MainActor(unsafe) open func bufferedDidChange(_ bufferedDuration: Foundation.TimeInterval, totalDuration: Foundation.TimeInterval)
  @_Concurrency.MainActor(unsafe) open func playerDurationDidChange(_ currentDuration: Foundation.TimeInterval, totalDuration: Foundation.TimeInterval)
  @_Concurrency.MainActor(unsafe) open func configurationUI()
  @_Concurrency.MainActor(unsafe) open func reloadPlayerView()
  @_Concurrency.MainActor(unsafe) open func displayControlView(_ isDisplay: Swift.Bool)
}
extension NoorSDK.VGPlayerView {
  @_Concurrency.MainActor(unsafe) open func updateDisplayerView(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) open func reloadGravity()
  @_Concurrency.MainActor(unsafe) open func enterFullscreen()
  @_Concurrency.MainActor(unsafe) open func exitFullscreen()
  @_Concurrency.MainActor(unsafe) open func playFailed(_ error: NoorSDK.VGPlayerError)
  @_Concurrency.MainActor(unsafe) public func formatSecondsToString(_ seconds: Foundation.TimeInterval) -> Swift.String
}
extension NoorSDK.VGPlayerView : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
}
extension NoorSDK.VGPlayerView {
  @objc @_Concurrency.MainActor(unsafe) dynamic open func onSingleTapGesture(_ gesture: UIKit.UITapGestureRecognizer)
  @objc @_Concurrency.MainActor(unsafe) dynamic open func onDoubleTapGesture(_ gesture: UIKit.UITapGestureRecognizer)
  @objc @_Concurrency.MainActor(unsafe) dynamic open func onPanGesture(_ gesture: UIKit.UIPanGestureRecognizer)
}
@_hasMissingDesignatedInitializers public class ConstraintMaker {
  public var left: NoorSDK.ConstraintMakerExtendable {
    get
  }
  public var top: NoorSDK.ConstraintMakerExtendable {
    get
  }
  public var bottom: NoorSDK.ConstraintMakerExtendable {
    get
  }
  public var right: NoorSDK.ConstraintMakerExtendable {
    get
  }
  public var leading: NoorSDK.ConstraintMakerExtendable {
    get
  }
  public var trailing: NoorSDK.ConstraintMakerExtendable {
    get
  }
  public var width: NoorSDK.ConstraintMakerExtendable {
    get
  }
  public var height: NoorSDK.ConstraintMakerExtendable {
    get
  }
  public var centerX: NoorSDK.ConstraintMakerExtendable {
    get
  }
  public var centerY: NoorSDK.ConstraintMakerExtendable {
    get
  }
  @available(*, deprecated, renamed: "lastBaseline")
  public var baseline: NoorSDK.ConstraintMakerExtendable {
    get
  }
  public var lastBaseline: NoorSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, macOS 10.11, *)
  public var firstBaseline: NoorSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var leftMargin: NoorSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var rightMargin: NoorSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var topMargin: NoorSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var bottomMargin: NoorSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var leadingMargin: NoorSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var trailingMargin: NoorSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var centerXWithinMargins: NoorSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var centerYWithinMargins: NoorSDK.ConstraintMakerExtendable {
    get
  }
  public var edges: NoorSDK.ConstraintMakerExtendable {
    get
  }
  public var horizontalEdges: NoorSDK.ConstraintMakerExtendable {
    get
  }
  public var verticalEdges: NoorSDK.ConstraintMakerExtendable {
    get
  }
  public var directionalEdges: NoorSDK.ConstraintMakerExtendable {
    get
  }
  public var directionalHorizontalEdges: NoorSDK.ConstraintMakerExtendable {
    get
  }
  public var directionalVerticalEdges: NoorSDK.ConstraintMakerExtendable {
    get
  }
  public var size: NoorSDK.ConstraintMakerExtendable {
    get
  }
  public var center: NoorSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var margins: NoorSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var directionalMargins: NoorSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var centerWithinMargins: NoorSDK.ConstraintMakerExtendable {
    get
  }
  final public let item: NoorSDK.LayoutConstraintItem
  @objc deinit
}
public protocol VGPlayerDownloadeURLSessionManagerDelegate : ObjectiveC.NSObjectProtocol {
  func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive response: Foundation.URLResponse, completionHandler: @escaping (Foundation.URLSession.ResponseDisposition) -> Swift.Void)
  func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
}
@objc open class VGPlayerDownloadURLSessionManager : ObjectiveC.NSObject, Foundation.URLSessionDataDelegate {
  weak open var delegate: NoorSDK.VGPlayerDownloadeURLSessionManagerDelegate?
  public init(delegate: NoorSDK.VGPlayerDownloadeURLSessionManagerDelegate?)
  @objc public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive response: Foundation.URLResponse, completionHandler: @escaping (Foundation.URLSession.ResponseDisposition) -> Swift.Void)
  @objc public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  @objc public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  @objc deinit
}
public enum Theme {
  case info
  case success
  case warning
  case error
  public static func == (a: NoorSDK.Theme, b: NoorSDK.Theme) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum Icon : Swift.String {
  case error
  case warning
  case success
  case info
  case errorLight
  case warningLight
  case successLight
  case infoLight
  case errorSubtle
  case warningSubtle
  case successSubtle
  case infoSubtle
  public var image: UIKit.UIImage {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum IconStyle {
  case `default`
  case light
  case subtle
  case none
  public func image(theme: NoorSDK.Theme) -> UIKit.UIImage?
  public static func == (a: NoorSDK.IconStyle, b: NoorSDK.IconStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol DateToStringTrasformable {
  static func format(_ date: NoorSDK.DateRepresentable, options: Any?) -> Swift.String
}
public protocol StringToDateTransformable {
  static func parse(_ string: Swift.String, region: NoorSDK.Region?, options: Any?) -> NoorSDK.DateInRegion?
}
public enum DateToStringStyles {
  case iso(NoorSDK.ISOFormatter.Options)
  case extended
  case rss
  case altRSS
  case dotNet
  case httpHeader
  case sql
  case date(Foundation.DateFormatter.Style)
  case time(Foundation.DateFormatter.Style)
  case dateTime(Foundation.DateFormatter.Style)
  case dateTimeMixed(dateStyle: Foundation.DateFormatter.Style, timeStyle: Foundation.DateFormatter.Style)
  case custom(Swift.String)
  case standard
  public func toString(_ date: NoorSDK.DateRepresentable) -> Swift.String
}
public enum StringToDateStyles {
  case iso(NoorSDK.ISOParser.Options)
  case extended
  case rss
  case altRSS
  case dotNet
  case sql
  case httpHeader
  case strict(Swift.String)
  case custom(Swift.String)
  case standard
  public func toDate(_ string: Swift.String, region: NoorSDK.Region) -> NoorSDK.DateInRegion?
}
public protocol ConstraintPriorityTarget {
  var constraintPriorityTargetValue: Swift.Float { get }
}
extension Swift.Int : NoorSDK.ConstraintPriorityTarget {
  public var constraintPriorityTargetValue: Swift.Float {
    get
  }
}
extension Swift.UInt : NoorSDK.ConstraintPriorityTarget {
  public var constraintPriorityTargetValue: Swift.Float {
    get
  }
}
extension Swift.Float : NoorSDK.ConstraintPriorityTarget {
  public var constraintPriorityTargetValue: Swift.Float {
    get
  }
}
extension Swift.Double : NoorSDK.ConstraintPriorityTarget {
  public var constraintPriorityTargetValue: Swift.Float {
    get
  }
}
extension CoreFoundation.CGFloat : NoorSDK.ConstraintPriorityTarget {
  public var constraintPriorityTargetValue: Swift.Float {
    get
  }
}
extension UIKit.UILayoutPriority : NoorSDK.ConstraintPriorityTarget {
  public var constraintPriorityTargetValue: Swift.Float {
    get
  }
}
extension Foundation.Calendar.Component {
  public var timeInterval: Swift.Double? {
    get
  }
}
extension Foundation.DateComponents {
  public static var allComponentsSet: Swift.Set<Foundation.Calendar.Component> {
    get
  }
  public var timeInterval: Foundation.TimeInterval {
    get
  }
  public static func create(_ builder: ((inout Foundation.DateComponents) -> Swift.Void)) -> Foundation.DateComponents
  public var fromNow: Foundation.Date {
    get
  }
  public var ago: Foundation.Date {
    get
  }
  public func from(_ date: NoorSDK.DateRepresentable) -> Foundation.Date?
  public var isZero: Swift.Bool {
    get
  }
  public static func + (lhs: Foundation.DateComponents, rhs: Foundation.DateComponents) -> Foundation.DateComponents
  public static func - (lhs: Foundation.DateComponents, rhs: Foundation.DateComponents) -> Foundation.DateComponents
  prefix public static func - (rhs: Foundation.DateComponents) -> Foundation.DateComponents
  public subscript(component: Foundation.Calendar.Component) -> Swift.Int? {
    get
  }
  public func `in`(_ component: Foundation.Calendar.Component, of calendar: NoorSDK.CalendarConvertible? = nil) -> Swift.Int?
  public func `in`(_ components: Swift.Set<Foundation.Calendar.Component>, of calendar: NoorSDK.CalendarConvertible? = nil) -> [Foundation.Calendar.Component : Swift.Int]
}
@available(iOSApplicationExtension, unavailable)
public let kIQUseDefaultKeyboardDistance: CoreFoundation.CGFloat
@available(iOSApplicationExtension, unavailable)
@objc extension UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var keyboardDistanceFromTextField: CoreFoundation.CGFloat {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var ignoreSwitchingByNextPrevious: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var enableMode: NoorSDK.IQEnableMode {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var shouldResignOnTouchOutsideMode: NoorSDK.IQEnableMode {
    @objc get
    @objc set(newValue)
  }
}
public class Weak<T> where T : AnyObject {
  weak public var value: T?
  public init(value: T?)
  @objc deinit
}
public protocol LocaleConvertible {
  func toLocale() -> Foundation.Locale
}
extension Foundation.Locale : NoorSDK.LocaleConvertible {
  public func toLocale() -> Foundation.Locale
}
public enum Locales : Swift.String, NoorSDK.LocaleConvertible {
  case current
  case autoUpdating
  case afrikaans
  case afrikaansNamibia
  case afrikaansSouthAfrica
  case aghem
  case aghemCameroon
  case akan
  case akanGhana
  case albanian
  case albanianAlbania
  case albanianKosovo
  case albanianMacedonia
  case amharic
  case amharicEthiopia
  case arabic
  case arabicAlgeria
  case arabicBahrain
  case arabicChad
  case arabicComoros
  case arabicDjibouti
  case arabicEgypt
  case arabicEritrea
  case arabicIraq
  case arabicIsrael
  case arabicJordan
  case arabicKuwait
  case arabicLebanon
  case arabicLibya
  case arabicMauritania
  case arabicMorocco
  case arabicOman
  case arabicPalestinianTerritories
  case arabicQatar
  case arabicSaudiArabia
  case arabicSomalia
  case arabicSouthSudan
  case arabicSudan
  case arabicSyria
  case arabicTunisia
  case arabicUnitedArabEmirates
  case arabicWesternSahara
  case arabicWorld
  case arabicYemen
  case armenian
  case armenianArmenia
  case assamese
  case assameseIndia
  case asu
  case asuTanzania
  case azerbaijani
  case azerbaijaniAzerbaijan
  case azerbaijaniCyrillic
  case azerbaijaniCyrillicAzerbaijan
  case bafia
  case bafiaCameroon
  case bambara
  case bambaraMali
  case basaa
  case basaaCameroon
  case basque
  case basqueSpain
  case belarusian
  case belarusianBelarus
  case bemba
  case bembaZambia
  case bena
  case benaTanzania
  case bengali
  case bengaliBangladesh
  case engaliIndia
  case bodo
  case bodoIndia
  case bosnian
  case bosnianBosniaHerzegovina
  case bosnianCyrillic
  case bosnianCyrillicBosniaHerzegovina
  case breton
  case bretonFrance
  case bulgarian
  case bulgarianBulgaria
  case burmese
  case burmeseMyanmarBurma
  case catalan
  case catalanAndorra
  case catalanFrance
  case catalanItaly
  case catalanSpain
  case centralAtlasTamazight
  case centralAtlasTamazightMorocco
  case centralKurdish
  case centralKurdishIran
  case centralKurdishIraq
  case cherokee
  case cherokeeUnitedStates
  case chiga
  case chigaUganda
  case chinese
  case chineseChina
  case chineseHongKongSarChina
  case chineseMacauSarChina
  case chineseSimplified
  case chineseSimplifiedHongKongSarChina
  case chineseSimplifiedMacauSarChina
  case chineseSingapore
  case chineseTaiwan
  case chineseTraditional
  case colognian
  case colognianGermany
  case cornish
  case cornishUnitedKingdom
  case croatian
  case croatianBosniaHerzegovina
  case croatianCroatia
  case czech
  case czechCzechRepublic
  case danish
  case danishDenmark
  case danishGreenland
  case duala
  case dualaCameroon
  case dutch
  case dutchAruba
  case dutchBelgium
  case dutchCaribbeanNetherlands
  case dutchCuraao
  case dutchNetherlands
  case dutchSintMaarten
  case dutchSuriname
  case dzongkha
  case dzongkhaBhutan
  case embu
  case embuKenya
  case english
  case englishAlbania
  case englishAmericanSamoa
  case englishAndorra
  case englishAnguilla
  case englishAntiguaBarbuda
  case englishAustralia
  case englishAustria
  case englishBahamas
  case englishBarbados
  case englishBelgium
  case englishBelize
  case englishBermuda
  case englishBosniaHerzegovina
  case englishBotswana
  case englishBritishIndianOceanTerritory
  case englishBritishVirginIslands
  case englishCameroon
  case englishCanada
  case englishCaymanIslands
  case englishChristmasIsland
  case englishCocosKeelingIslands
  case englishCookIslands
  case englishCroatia
  case englishCyprus
  case englishCzechRepublic
  case englishDenmark
  case englishDiegoGarcia
  case englishDominica
  case englishEritrea
  case englishEstonia
  case englishEurope
  case englishFalklandIslands
  case englishFiji
  case englishFinland
  case englishFrance
  case englishGambia
  case englishGermany
  case englishGhana
  case englishGibraltar
  case englishGreece
  case englishGrenada
  case englishGuam
  case englishGuernsey
  case englishGuyana
  case englishHongKongSarChina
  case englishHungary
  case englishIceland
  case englishIndia
  case englishIreland
  case englishIsleOfMan
  case englishIsrael
  case englishItaly
  case englishJamaica
  case englishJersey
  case englishKenya
  case englishKiribati
  case englishLatvia
  case englishLesotho
  case englishLiberia
  case englishLithuania
  case englishLuxembourg
  case englishMacauSarChina
  case englishMadagascar
  case englishMalawi
  case englishMalaysia
  case englishMalta
  case englishMarshallIslands
  case englishMauritius
  case englishMicronesia
  case englishMontenegro
  case englishMontserrat
  case englishNamibia
  case englishNauru
  case englishNetherlands
  case englishNewZealand
  case englishNigeria
  case englishNiue
  case englishNorfolkIsland
  case englishNorthernMarianaIslands
  case englishNorway
  case englishPakistan
  case englishPalau
  case englishPapuaNewGuinea
  case englishPhilippines
  case englishPitcairnIslands
  case englishPoland
  case englishPortugal
  case englishPuertoRico
  case englishRomania
  case englishRussia
  case englishRwanda
  case englishSamoa
  case englishSeychelles
  case englishSierraLeone
  case englishSingapore
  case englishSintMaarten
  case englishSlovakia
  case englishSlovenia
  case englishSolomonIslands
  case englishSouthAfrica
  case englishSouthSudan
  case englishSpain
  case englishStHelena
  case englishStKittsNevis
  case englishStLucia
  case englishStVincentGrenadines
  case englishSudan
  case englishSwaziland
  case englishSweden
  case englishSwitzerland
  case englishTanzania
  case englishTokelau
  case englishTonga
  case englishTrinidadTobago
  case englishTurkey
  case englishTurksCaicosIslands
  case englishTuvalu
  case englishUSOutlyingIslands
  case englishUSVirginIslands
  case englishUganda
  case englishUnitedKingdom
  case englishUnitedStates
  case englishUnitedStatesComputer
  case englishVanuatu
  case englishWorld
  case englishZambia
  case englishZimbabwe
  case esperanto
  case estonian
  case estonianEstonia
  case ewe
  case eweGhana
  case eweTogo
  case ewondo
  case ewondoCameroon
  case faroese
  case faroeseFaroeIslands
  case filipino
  case filipinoPhilippines
  case finnish
  case finnishFinland
  case french
  case frenchAlgeria
  case frenchBelgium
  case frenchBenin
  case frenchBurkinaFaso
  case frenchBurundi
  case frenchCameroon
  case frenchCanada
  case frenchCentralAfricanRepublic
  case frenchChad
  case frenchComoros
  case frenchCongoBrazzaville
  case frenchCongoKinshasa
  case frenchCteDivoire
  case frenchDjibouti
  case frenchEquatorialGuinea
  case frenchFrance
  case frenchFrenchGuiana
  case frenchFrenchPolynesia
  case frenchGabon
  case frenchGuadeloupe
  case frenchGuinea
  case frenchHaiti
  case frenchLuxembourg
  case frenchMadagascar
  case frenchMali
  case frenchMartinique
  case frenchMauritania
  case frenchMauritius
  case frenchMayotte
  case frenchMonaco
  case frenchMorocco
  case frenchNewCaledonia
  case frenchNiger
  case frenchRunion
  case frenchRwanda
  case frenchSenegal
  case frenchSeychelles
  case frenchStBarthlemy
  case frenchStMartin
  case frenchStPierreMiquelon
  case frenchSwitzerland
  case frenchSyria
  case frenchTogo
  case frenchTunisia
  case frenchVanuatu
  case frenchWallisFutuna
  case friulian
  case friulianItaly
  case fulah
  case fulahCameroon
  case fulahGuinea
  case fulahMauritania
  case fulahSenegal
  case galician
  case galicianSpain
  case ganda
  case gandaUganda
  case georgian
  case georgianGeorgia
  case german
  case germanAustria
  case germanBelgium
  case germanGermany
  case germanLiechtenstein
  case germanLuxembourg
  case germanSwitzerland
  case greek
  case greekCyprus
  case greekGreece
  case gujarati
  case gujaratiIndia
  case gusii
  case gusiiKenya
  case hausa
  case hausaGhana
  case hausaNiger
  case hausaNigeria
  case hawaiian
  case hawaiianUnitedStates
  case hebrew
  case hebrewIsrael
  case hindi
  case hindiIndia
  case hungarian
  case hungarianHungary
  case icelandic
  case icelandicIceland
  case igbo
  case igboNigeria
  case inariSami
  case inariSamiFinland
  case indonesian
  case indonesianIndonesia
  case inuktitut
  case inuktitutUnifiedCanadianAboriginalSyllabics
  case inuktitutUnifiedCanadianAboriginalSyllabicsCanada
  case irish
  case irishIreland
  case italian
  case italianItaly
  case italianSanMarino
  case italianSwitzerland
  case japanese
  case japaneseJapan
  case jolaFonyi
  case jolaFonyiSenegal
  case kabuverdianu
  case kabuverdianuCapeVerde
  case kabyle
  case kabyleAlgeria
  case kako
  case kakoCameroon
  case kalaallisut
  case kalaallisutGreenland
  case kalenjin
  case kalenjinKenya
  case kamba
  case kambaKenya
  case kannada
  case kannadaIndia
  case kashmiri
  case kashmiriArabic
  case kashmiriArabicIndia
  case kazakh
  case kazakhKazakhstan
  case khmer
  case khmerCambodia
  case kikuyu
  case kikuyuKenya
  case kinyarwanda
  case kinyarwandaRwanda
  case konkani
  case konkaniIndia
  case korean
  case koreanNorthKorea
  case koreanSouthKorea
  case koyraChiini
  case koyraChiiniMali
  case koyraboroSenni
  case koyraboroSenniMali
  case kwasio
  case kwasioCameroon
  case kyrgyz
  case kyrgyzKyrgyzstan
  case lakota
  case lakotaUnitedStates
  case langi
  case langiTanzania
  case lao
  case laoLaos
  case latvian
  case latvianLatvia
  case lingala
  case lingalaAngola
  case lingalaCentralAfricanRepublic
  case lingalaCongoBrazzaville
  case lingalaCongoKinshasa
  case lithuanian
  case lithuanianLithuania
  case lowerSorbian
  case lowerSorbianGermany
  case lubaKatanga
  case lubaKatangaCongoKinshasa
  case luo
  case luoKenya
  case luxembourgish
  case luxembourgishLuxembourg
  case luyia
  case luyiaKenya
  case macedonian
  case macedonianMacedonia
  case machame
  case machameTanzania
  case makhuwaMeetto
  case makhuwaMeettoMozambique
  case makonde
  case makondeTanzania
  case malagasy
  case malagasyMadagascar
  case malay
  case malayArabic
  case malayArabicBrunei
  case malayArabicMalaysia
  case malayBrunei
  case malayMalaysia
  case malaySingapore
  case malayalam
  case malayalamIndia
  case maltese
  case malteseMalta
  case manx
  case manxIsleOfMan
  case marathi
  case marathiIndia
  case masai
  case masaiKenya
  case masaiTanzania
  case meru
  case meruKenya
  case meta
  case metaCameroon
  case mongolian
  case mongolianMongolia
  case morisyen
  case morisyenMauritius
  case mundang
  case mundangCameroon
  case nama
  case namaNamibia
  case nepali
  case nepaliIndia
  case nepaliNepal
  case ngiemboon
  case ngiemboonCameroon
  case ngomba
  case ngombaCameroon
  case northNdebele
  case northNdebeleZimbabwe
  case northernSami
  case northernSamiFinland
  case northernSamiNorway
  case northernSamiSweden
  case norwegianBokml
  case norwegianBokmlNorway
  case norwegianBokmlSvalbardJanMayen
  case norwegianNynorsk
  case norwegianNynorskNorway
  case nuer
  case nuerSudan
  case nyankole
  case nyankoleUganda
  case oriya
  case oriyaIndia
  case oromo
  case oromoEthiopia
  case oromoKenya
  case ossetic
  case osseticGeorgia
  case osseticRussia
  case pashto
  case pashtoAfghanistan
  case persian
  case persianAfghanistan
  case persianIran
  case polish
  case polishPoland
  case portuguese
  case portugueseAngola
  case portugueseBrazil
  case portugueseCapeVerde
  case portugueseGuineaBissau
  case portugueseMacauSarChina
  case portugueseMozambique
  case portuguesePortugal
  case portugueseSoTomPrncipe
  case portugueseTimorLeste
  case punjabi
  case punjabiArabic
  case punjabiArabicPakistan
  case punjabiIndia
  case quechua
  case quechuaBolivia
  case quechuaEcuador
  case quechuaPeru
  case romanian
  case romanianMoldova
  case romanianRomania
  case romansh
  case romanshSwitzerland
  case rombo
  case romboTanzania
  case rundi
  case rundiBurundi
  case russian
  case russianBelarus
  case russianKazakhstan
  case russianKyrgyzstan
  case russianMoldova
  case russianRussia
  case russianUkraine
  case rwa
  case rwaTanzania
  case sakha
  case sakhaRussia
  case samburu
  case samburuKenya
  case sango
  case sangoCentralAfricanRepublic
  case sangu
  case sanguTanzania
  case scottishGaelic
  case scottishGaelicUnitedKingdom
  case sena
  case senaMozambique
  case serbian
  case serbianBosniaHerzegovina
  case serbianKosovo
  case serbianLatin
  case serbianLatinBosniaHerzegovina
  case serbianLatinKosovo
  case serbianLatinMontenegro
  case serbianLatinSerbia
  case serbianMontenegro
  case serbianSerbia
  case shambala
  case shambalaTanzania
  case shona
  case shonaZimbabwe
  case sichuanYi
  case sichuanYiChina
  case sinhala
  case sinhalaSriLanka
  case slovak
  case slovakSlovakia
  case slovenian
  case slovenianSlovenia
  case soga
  case sogaUganda
  case somali
  case somaliDjibouti
  case somaliEthiopia
  case somaliKenya
  case somaliSomalia
  case spanish
  case spanishArgentina
  case spanishBolivia
  case spanishCanaryIslands
  case spanishCeutaMelilla
  case spanishChile
  case spanishColombia
  case spanishCostaRica
  case spanishCuba
  case spanishDominicanRepublic
  case spanishEcuador
  case spanishElSalvador
  case spanishEquatorialGuinea
  case spanishGuatemala
  case spanishHonduras
  case spanishLatinAmerica
  case spanishMexico
  case spanishNicaragua
  case spanishPanama
  case spanishParaguay
  case spanishPeru
  case spanishPhilippines
  case spanishPuertoRico
  case spanishSpain
  case spanishUnitedStates
  case spanishUruguay
  case spanishVenezuela
  case standardMoroccanTamazight
  case standardMoroccanTamazightMorocco
  case swahili
  case swahiliCongoKinshasa
  case swahiliKenya
  case swahiliTanzania
  case swahiliUganda
  case swedish
  case swedishlandIslands
  case swedishFinland
  case swedishSweden
  case swissGerman
  case swissGermanFrance
  case swissGermanLiechtenstein
  case swissGermanSwitzerland
  case tachelhit
  case tachelhitMorocco
  case tachelhitTifinagh
  case tachelhitTifinaghMorocco
  case taita
  case taitaKenya
  case tajik
  case tajikTajikistan
  case tamil
  case tamilIndia
  case tamilMalaysia
  case tamilSingapore
  case tamilSriLanka
  case tasawaq
  case tasawaqNiger
  case telugu
  case teluguIndia
  case teso
  case tesoKenya
  case tesoUganda
  case thai
  case thaiThailand
  case tibetan
  case tibetanChina
  case tibetanIndia
  case tigrinya
  case tigrinyaEritrea
  case tigrinyaEthiopia
  case tongan
  case tonganTonga
  case turkish
  case turkishCyprus
  case turkishTurkey
  case turkmen
  case turkmenTurkmenistan
  case ukrainian
  case ukrainianUkraine
  case upperSorbian
  case upperSorbianGermany
  case urdu
  case urduIndia
  case urduPakistan
  case uyghur
  case uyghurArabic
  case uyghurArabicChina
  case uzbek
  case uzbekArabic
  case uzbekArabicAfghanistan
  case uzbekLatin
  case uzbekLatinUzbekistan
  case uzbekUzbekistan
  case vai
  case vaiLatin
  case vaiLatinLiberia
  case vaiLiberia
  case vietnamese
  case vietnameseVietnam
  case vunjo
  case vunjoTanzania
  case walser
  case walserSwitzerland
  case welsh
  case welshUnitedKingdom
  case westernFrisian
  case westernFrisianNetherlands
  case yangben
  case yangbenCameroon
  case yiddish
  case yiddishWorld
  case yoruba
  case yorubaBenin
  case yorubaNigeria
  case zarma
  case zarmaNiger
  case zulu
  case zuluSouthAfrica
  public func toLocale() -> Foundation.Locale
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension NoorSDK.ConstraintMakerRelatable {
  @discardableResult
  public func equalToSuperview<T>(_ closure: (NoorSDK.ConstraintView) -> T, _ file: Swift.String = #file, line: Swift.UInt = #line) -> NoorSDK.ConstraintMakerEditable where T : NoorSDK.ConstraintRelatableTarget
  @discardableResult
  public func lessThanOrEqualToSuperview<T>(_ closure: (NoorSDK.ConstraintView) -> T, _ file: Swift.String = #file, line: Swift.UInt = #line) -> NoorSDK.ConstraintMakerEditable where T : NoorSDK.ConstraintRelatableTarget
  @discardableResult
  public func greaterThanOrEqualToSuperview<T>(_ closure: (NoorSDK.ConstraintView) -> T, _ file: Swift.String = #file, line: Swift.UInt = #line) -> NoorSDK.ConstraintMakerEditable where T : NoorSDK.ConstraintRelatableTarget
}
extension Foundation.Date {
  public var isLeapMonth: Swift.Bool {
    get
  }
  public var isLeapYear: Swift.Bool {
    get
  }
  public var julianDay: Swift.Double {
    get
  }
  public var modifiedJulianDay: Swift.Double {
    get
  }
  public func getInterval(toDate: Foundation.Date?, component: Foundation.Calendar.Component) -> Swift.Int64
}
@objc public protocol FloatingPanelLayout {
  @objc var position: NoorSDK.FloatingPanelPosition { get }
  @objc var initialState: NoorSDK.FloatingPanelState { get }
  @objc var anchors: [NoorSDK.FloatingPanelState : NoorSDK.FloatingPanelLayoutAnchoring] { get }
  @objc optional func prepareLayout(surfaceView: UIKit.UIView, in view: UIKit.UIView) -> [UIKit.NSLayoutConstraint]
  @objc optional func backdropAlpha(for state: NoorSDK.FloatingPanelState) -> CoreFoundation.CGFloat
}
@objc @_inheritsConvenienceInitializers @objcMembers open class FloatingPanelBottomLayout : ObjectiveC.NSObject, NoorSDK.FloatingPanelLayout {
  @objc override dynamic public init()
  @objc open var initialState: NoorSDK.FloatingPanelState {
    @objc get
  }
  @objc open var anchors: [NoorSDK.FloatingPanelState : NoorSDK.FloatingPanelLayoutAnchoring] {
    @objc get
  }
  @objc open var position: NoorSDK.FloatingPanelPosition {
    @objc get
  }
  @objc open func prepareLayout(surfaceView: UIKit.UIView, in view: UIKit.UIView) -> [UIKit.NSLayoutConstraint]
  @objc open func backdropAlpha(for state: NoorSDK.FloatingPanelState) -> CoreFoundation.CGFloat
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ConstraintMakerExtendable : NoorSDK.ConstraintMakerRelatable {
  public var left: NoorSDK.ConstraintMakerExtendable {
    get
  }
  public var top: NoorSDK.ConstraintMakerExtendable {
    get
  }
  public var bottom: NoorSDK.ConstraintMakerExtendable {
    get
  }
  public var right: NoorSDK.ConstraintMakerExtendable {
    get
  }
  public var leading: NoorSDK.ConstraintMakerExtendable {
    get
  }
  public var trailing: NoorSDK.ConstraintMakerExtendable {
    get
  }
  public var width: NoorSDK.ConstraintMakerExtendable {
    get
  }
  public var height: NoorSDK.ConstraintMakerExtendable {
    get
  }
  public var centerX: NoorSDK.ConstraintMakerExtendable {
    get
  }
  public var centerY: NoorSDK.ConstraintMakerExtendable {
    get
  }
  @available(*, deprecated, renamed: "lastBaseline")
  public var baseline: NoorSDK.ConstraintMakerExtendable {
    get
  }
  public var lastBaseline: NoorSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, macOS 10.11, *)
  public var firstBaseline: NoorSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var leftMargin: NoorSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var rightMargin: NoorSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var topMargin: NoorSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var bottomMargin: NoorSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var leadingMargin: NoorSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var trailingMargin: NoorSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var centerXWithinMargins: NoorSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var centerYWithinMargins: NoorSDK.ConstraintMakerExtendable {
    get
  }
  public var edges: NoorSDK.ConstraintMakerExtendable {
    get
  }
  public var horizontalEdges: NoorSDK.ConstraintMakerExtendable {
    get
  }
  public var verticalEdges: NoorSDK.ConstraintMakerExtendable {
    get
  }
  public var directionalEdges: NoorSDK.ConstraintMakerExtendable {
    get
  }
  public var directionalHorizontalEdges: NoorSDK.ConstraintMakerExtendable {
    get
  }
  public var directionalVerticalEdges: NoorSDK.ConstraintMakerExtendable {
    get
  }
  public var size: NoorSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var margins: NoorSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var directionalMargins: NoorSDK.ConstraintMakerExtendable {
    get
  }
  @available(iOS 8.0, *)
  public var centerWithinMargins: NoorSDK.ConstraintMakerExtendable {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DatePickerHelper {
  public static let shared: NoorSDK.DatePickerHelper
  public func months() -> [Swift.String]
  public func days() -> [Swift.String]
  public func month(number: Swift.Int) -> Swift.String
  public func month(name: Swift.String) -> Swift.Int
  public func daysIn(month: Swift.Int, year: Swift.Int) -> Swift.Int
  public func firstDayOf(month: Swift.Int, year: Swift.Int) -> Swift.String
  public func lastDayOf(month: Swift.Int, year: Swift.Int) -> Swift.String
  public func dateFrom(month: Swift.Int, year: Swift.Int) -> Foundation.Date?
  public func dateFrom(day: Swift.Int, month: Swift.Int, year: Swift.Int) -> Foundation.Date?
  @objc deinit
}
extension Swift.Double {
  public var milliseconds: Swift.Int {
    get
  }
  public var seconds: Swift.Int {
    get
  }
  public var minutes: Swift.Int {
    get
  }
  public var hours: Swift.Int {
    get
  }
  public var stringTime: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class DropDown : UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) public var selectedIndex: Swift.Int?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var rowHeight: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var rowBackgroundColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var itemsColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var itemsTintColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var selectedRowColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var hideOptionsWhenSelect: Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var isSearchEnable: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var borderColorr: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var listHeight: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @IBInspectable @_Concurrency.MainActor(unsafe) @objc dynamic public var borderWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @IBInspectable @_Concurrency.MainActor(unsafe) @objc dynamic public var cornerRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var optionArray: [Swift.String] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var optionImageArray: [Swift.String] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var optionIds: [Swift.Int]?
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var arrowSize: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var arrowColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var checkMarkEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var handleKeyboard: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) public func showList()
  @_Concurrency.MainActor(unsafe) public func hideList()
  @objc @_Concurrency.MainActor(unsafe) public func touchAction()
  @_Concurrency.MainActor(unsafe) open func searchFilter(text: Swift.String, searchText: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func didSelect(completion: @escaping (_ selectedText: Swift.String, _ index: Swift.Int, _ id: Swift.Int) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func listWillAppear(completion: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func listDidAppear(completion: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func listWillDisappear(completion: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func listDidDisappear(completion: @escaping () -> Swift.Void)
}
extension NoorSDK.DropDown : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textFieldShouldBeginEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
}
extension NoorSDK.DropDown : UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
extension NoorSDK.DropDown : UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
@_inheritsConvenienceInitializers @available(iOSApplicationExtension, unavailable)
@objc @_Concurrency.MainActor(unsafe) open class IQPreviousNextView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public let SteppedProgressBarAutomaticDimension: CoreFoundation.CGFloat
public enum StepDrawingMode : Swift.Int {
  case fill
  case drawIndex
  case image
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class SteppedProgressBar : UIKit.UIView {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var activeColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var inactiveColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var inactiveTextColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var circleRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var titleOffset: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var circleSpacing: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var lineWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var currentTab: Swift.Int {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var tintActiveImage: Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var justCheckCompleted: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var stepDrawingMode: NoorSDK.StepDrawingMode {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var insets: UIKit.UIEdgeInsets {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var titles: [Swift.String] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var activeStepColors: [UIKit.UIColor]? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var images: [UIKit.UIImage]? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var activeImages: [UIKit.UIImage]? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(FloatingPanelBackdropView) @_Concurrency.MainActor(unsafe) public class BackdropView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public var dismissalTapGestureRecognizer: UIKit.UITapGestureRecognizer
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class VGPlayerCacheConfiguration : ObjectiveC.NSObject {
  open var maxCacheAge: Swift.Double
  open var maxCacheSize: Swift.UInt
  @objc override dynamic public init()
  @objc deinit
}
public enum DisplayMode {
  case PopOver
  case Center
  case Bottom
  public static func == (a: NoorSDK.DisplayMode, b: NoorSDK.DisplayMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class PickerViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didReceiveMemoryWarning()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension NoorSDK.PickerViewController : UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
public protocol ConstraintMultiplierTarget {
  var constraintMultiplierTargetValue: CoreFoundation.CGFloat { get }
}
extension Swift.Int : NoorSDK.ConstraintMultiplierTarget {
  public var constraintMultiplierTargetValue: CoreFoundation.CGFloat {
    get
  }
}
extension Swift.UInt : NoorSDK.ConstraintMultiplierTarget {
  public var constraintMultiplierTargetValue: CoreFoundation.CGFloat {
    get
  }
}
extension Swift.Float : NoorSDK.ConstraintMultiplierTarget {
  public var constraintMultiplierTargetValue: CoreFoundation.CGFloat {
    get
  }
}
extension Swift.Double : NoorSDK.ConstraintMultiplierTarget {
  public var constraintMultiplierTargetValue: CoreFoundation.CGFloat {
    get
  }
}
extension CoreFoundation.CGFloat : NoorSDK.ConstraintMultiplierTarget {
  public var constraintMultiplierTargetValue: CoreFoundation.CGFloat {
    get
  }
}
@objc public protocol FloatingPanelLayoutAnchoring {
  @objc var referenceGuide: NoorSDK.FloatingPanelLayoutReferenceGuide { get }
  @objc func layoutConstraints(_ fpc: NoorSDK.FloatingPanelController, for position: NoorSDK.FloatingPanelPosition) -> [UIKit.NSLayoutConstraint]
}
@objc final public class FloatingPanelLayoutAnchor : ObjectiveC.NSObject, NoorSDK.FloatingPanelLayoutAnchoring {
  @objc public init(absoluteInset: CoreFoundation.CGFloat, edge: NoorSDK.FloatingPanelReferenceEdge, referenceGuide: NoorSDK.FloatingPanelLayoutReferenceGuide)
  @objc public init(fractionalInset: CoreFoundation.CGFloat, edge: NoorSDK.FloatingPanelReferenceEdge, referenceGuide: NoorSDK.FloatingPanelLayoutReferenceGuide)
  @objc final public let referenceGuide: NoorSDK.FloatingPanelLayoutReferenceGuide
  @objc deinit
}
extension NoorSDK.FloatingPanelLayoutAnchor {
  @objc final public func layoutConstraints(_ vc: NoorSDK.FloatingPanelController, for position: NoorSDK.FloatingPanelPosition) -> [UIKit.NSLayoutConstraint]
}
@objc final public class FloatingPanelIntrinsicLayoutAnchor : ObjectiveC.NSObject, NoorSDK.FloatingPanelLayoutAnchoring {
  @objc public init(absoluteOffset offset: CoreFoundation.CGFloat, referenceGuide: NoorSDK.FloatingPanelLayoutReferenceGuide = .safeArea)
  @objc public init(fractionalOffset offset: CoreFoundation.CGFloat, referenceGuide: NoorSDK.FloatingPanelLayoutReferenceGuide = .safeArea)
  @objc final public let referenceGuide: NoorSDK.FloatingPanelLayoutReferenceGuide
  @objc deinit
}
extension NoorSDK.FloatingPanelIntrinsicLayoutAnchor {
  @objc final public func layoutConstraints(_ vc: NoorSDK.FloatingPanelController, for position: NoorSDK.FloatingPanelPosition) -> [UIKit.NSLayoutConstraint]
}
@objc final public class FloatingPanelAdaptiveLayoutAnchor : ObjectiveC.NSObject, NoorSDK.FloatingPanelLayoutAnchoring {
  @objc public init(absoluteOffset offset: CoreFoundation.CGFloat, contentLayout: UIKit.UILayoutGuide, referenceGuide: NoorSDK.FloatingPanelLayoutReferenceGuide, contentBoundingGuide: NoorSDK.FloatingPanelLayoutContentBoundingGuide = .none)
  @objc public init(fractionalOffset offset: CoreFoundation.CGFloat, contentLayout: UIKit.UILayoutGuide, referenceGuide: NoorSDK.FloatingPanelLayoutReferenceGuide, contentBoundingGuide: NoorSDK.FloatingPanelLayoutContentBoundingGuide = .none)
  @objc final public let referenceGuide: NoorSDK.FloatingPanelLayoutReferenceGuide
  @objc final public let contentBoundingGuide: NoorSDK.FloatingPanelLayoutContentBoundingGuide
  @objc deinit
}
extension NoorSDK.FloatingPanelAdaptiveLayoutAnchor {
  @objc final public func layoutConstraints(_ vc: NoorSDK.FloatingPanelController, for position: NoorSDK.FloatingPanelPosition) -> [UIKit.NSLayoutConstraint]
}
public typealias Calendars = Foundation.Calendar.Identifier
public protocol CalendarConvertible {
  func toCalendar() -> Foundation.Calendar
}
extension Foundation.Calendar : NoorSDK.CalendarConvertible {
  public func toCalendar() -> Foundation.Calendar
}
extension Foundation.Calendar.Identifier : NoorSDK.CalendarConvertible {
  public func toCalendar() -> Foundation.Calendar
}
extension Foundation.Calendar.Identifier : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
  public init(_ rawValue: Swift.String)
}
@available(iOSApplicationExtension, unavailable)
@objc extension UIKit.UIScrollView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var shouldIgnoreScrollingAdjustment: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var shouldIgnoreContentInsetAdjustment: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var shouldRestoreScrollViewContentOffset: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOSApplicationExtension, unavailable)
@objc @_Concurrency.MainActor(unsafe) open class IQTitleBarButtonItem : NoorSDK.IQBarButtonItem {
  @objc @_Concurrency.MainActor(unsafe) open var titleFont: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var titleColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var selectableTitleColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override open var invocation: NoorSDK.IQInvocation? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) convenience public init(title: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public struct ConstraintViewDSL : NoorSDK.ConstraintAttributesDSL {
  @discardableResult
  public func prepareConstraints(_ closure: (_ make: NoorSDK.ConstraintMaker) -> Swift.Void) -> [NoorSDK.Constraint]
  public func makeConstraints(_ closure: (_ make: NoorSDK.ConstraintMaker) -> Swift.Void)
  public func remakeConstraints(_ closure: (_ make: NoorSDK.ConstraintMaker) -> Swift.Void)
  public func updateConstraints(_ closure: (_ make: NoorSDK.ConstraintMaker) -> Swift.Void)
  public func removeConstraints()
  public var contentHuggingHorizontalPriority: Swift.Float {
    get
    nonmutating set
  }
  public var contentHuggingVerticalPriority: Swift.Float {
    get
    nonmutating set
  }
  public var contentCompressionResistanceHorizontalPriority: Swift.Float {
    get
    nonmutating set
  }
  public var contentCompressionResistanceVerticalPriority: Swift.Float {
    get
    nonmutating set
  }
  public var target: Swift.AnyObject? {
    get
  }
}
public protocol LayoutConstraintItem : AnyObject {
}
@available(iOS 9.0, macOS 10.11, *)
extension UIKit.UILayoutGuide : NoorSDK.LayoutConstraintItem {
}
extension UIKit.UIView : NoorSDK.LayoutConstraintItem {
}
public protocol MarginAdjustable {
  var layoutMarginAdditions: UIKit.UIEdgeInsets { get }
  var collapseLayoutMarginAdditions: Swift.Bool { get set }
  var respectSafeArea: Swift.Bool { get set }
  var bounceAnimationOffset: CoreFoundation.CGFloat { get set }
}
extension Swift.Array {
  public func middleElement(roundedUp: Swift.Bool) -> Element?
  public func sample(_ numSamples: Swift.Int) -> Swift.Array<Element>
}
extension NoorSDK.DateInRegion {
  public var isLeapMonth: Swift.Bool {
    get
  }
  public var isLeapYear: Swift.Bool {
    get
  }
  public var julianDay: Swift.Double {
    get
  }
  public var modifiedJulianDay: Swift.Double {
    get
  }
  public func getInterval(toDate: NoorSDK.DateInRegion?, component: Foundation.Calendar.Component) -> Swift.Int64
  public func timeIntervalSince(_ date: NoorSDK.DateInRegion) -> Foundation.TimeInterval
  public func componentsTo(_ rhs: NoorSDK.DateInRegion) -> Foundation.DateComponents
  public func componentsSince(_ date: NoorSDK.DateInRegion, components: [Foundation.Calendar.Component]? = nil) -> Foundation.DateComponents
}
public enum NVActivityIndicatorType : Swift.CaseIterable {
  case blank
  case ballPulse
  case ballGridPulse
  case ballClipRotate
  case squareSpin
  case ballClipRotatePulse
  case ballClipRotateMultiple
  case ballPulseRise
  case ballRotate
  case cubeTransition
  case ballZigZag
  case ballZigZagDeflect
  case ballTrianglePath
  case ballScale
  case lineScale
  case lineScaleParty
  case ballScaleMultiple
  case ballPulseSync
  case ballBeat
  case ballDoubleBounce
  case lineScalePulseOut
  case lineScalePulseOutRapid
  case ballScaleRipple
  case ballScaleRippleMultiple
  case ballSpinFadeLoader
  case lineSpinFadeLoader
  case triangleSkewSpin
  case pacman
  case ballGridBeat
  case semiCircleSpin
  case ballRotateChase
  case orbit
  case audioEqualizer
  case circleStrokeSpin
  public static func == (a: NoorSDK.NVActivityIndicatorType, b: NoorSDK.NVActivityIndicatorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [NoorSDK.NVActivityIndicatorType]
  public static var allCases: [NoorSDK.NVActivityIndicatorType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public typealias FadeInAnimation = (UIKit.UIView) -> Swift.Void
public typealias FadeOutAnimation = (UIKit.UIView, @escaping () -> Swift.Void) -> Swift.Void
@objc @_Concurrency.MainActor(unsafe) final public class NVActivityIndicatorView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_TYPE: NoorSDK.NVActivityIndicatorType
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_COLOR: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_TEXT_COLOR: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_PADDING: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_BLOCKER_SIZE: CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_BLOCKER_DISPLAY_TIME_THRESHOLD: Swift.Int
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_BLOCKER_MINIMUM_DISPLAY_TIME: Swift.Int
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_BLOCKER_MESSAGE: Swift.String?
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_BLOCKER_MESSAGE_SPACING: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_BLOCKER_MESSAGE_FONT: UIKit.UIFont
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_BLOCKER_BACKGROUND_COLOR: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_FADE_IN_ANIMATION: (_ view: UIKit.UIView) -> Swift.Void
  @_Concurrency.MainActor(unsafe) public static var DEFAULT_FADE_OUT_ANIMATION: (_ view: UIKit.UIView, _ complete: @escaping () -> Swift.Void) -> Swift.Void
  @_Concurrency.MainActor(unsafe) final public var type: NoorSDK.NVActivityIndicatorType
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) final public var color: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) final public var padding: CoreFoundation.CGFloat
  @available(*, deprecated)
  @_Concurrency.MainActor(unsafe) final public var animating: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var isAnimating: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, type: NoorSDK.NVActivityIndicatorType? = nil, color: UIKit.UIColor? = nil, padding: CoreFoundation.CGFloat? = nil)
  @_Concurrency.MainActor(unsafe) @objc override final public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var bounds: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) final public func startAnimating()
  @_Concurrency.MainActor(unsafe) final public func stopAnimating()
  @objc deinit
}
public class DatePicker {
  public static var leftTransitionAnimation: UIKit.UIView.AnimationOptions
  public static var rightTransitionAnimation: UIKit.UIView.AnimationOptions
  public var vc: NoorSDK.PickerViewController {
    get
    set
  }
  public init()
  public func setup(beginWith: Foundation.Date? = nil, selected: @escaping (_ selected: Swift.Bool, _ date: Foundation.Date?) -> Swift.Void)
  public func setup(beginWith: Foundation.Date? = nil, min: Foundation.Date, max: Foundation.Date, selected: @escaping (_ selected: Swift.Bool, _ date: Foundation.Date?) -> Swift.Void)
  public func setupYearless(minMonth: Swift.Int? = nil, minDay: Swift.Int? = nil, maxMonth: Swift.Int? = nil, maxDay: Swift.Int? = nil, selected: @escaping (_ selected: Swift.Bool, _ month: Swift.Int?, _ day: Swift.Int?) -> Swift.Void)
  @available(*, deprecated, message: "Use show() instead")
  public func display(in parent: UIKit.UIViewController)
  @available(*, deprecated, message: "Use show() instead")
  public func displayPopOver(on: UIKit.UIView, in parent: UIKit.UIViewController, width: CoreFoundation.CGFloat? = nil, completion: @escaping () -> Swift.Void)
  public func colors(mainLight: UIKit.UIColor, backgroundLight: UIKit.UIColor, inactiveLight: UIKit.UIColor, mainDark: UIKit.UIColor, backgroundDark: UIKit.UIColor, inactiveDark: UIKit.UIColor)
  public func setColors(main: UIKit.UIColor, background: UIKit.UIColor, inactive: UIKit.UIColor)
  @objc deinit
}
extension NoorSDK.DatePicker {
  public func show(in parent: UIKit.UIViewController, on popOverItem: UIKit.UIView? = nil)
}
@_hasMissingDesignatedInitializers public class ISOFormatter : NoorSDK.DateToStringTrasformable {
  public struct Options : Swift.OptionSet {
    public let rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    public static let withYear: NoorSDK.ISOFormatter.Options
    public static let withMonth: NoorSDK.ISOFormatter.Options
    public static let withWeekOfYear: NoorSDK.ISOFormatter.Options
    public static let withDay: NoorSDK.ISOFormatter.Options
    public static let withTime: NoorSDK.ISOFormatter.Options
    public static let withTimeZone: NoorSDK.ISOFormatter.Options
    public static let withSpaceBetweenDateAndTime: NoorSDK.ISOFormatter.Options
    public static let withDashSeparatorInDate: NoorSDK.ISOFormatter.Options
    public static let withFullDate: NoorSDK.ISOFormatter.Options
    public static let withFullTime: NoorSDK.ISOFormatter.Options
    public static let withInternetDateTime: NoorSDK.ISOFormatter.Options
    public static let withInternetDateTimeExtended: NoorSDK.ISOFormatter.Options
    public static let withoutTZSeparators: NoorSDK.ISOFormatter.Options
    public var dateFormat: Swift.String {
      get
    }
    public typealias ArrayLiteralElement = NoorSDK.ISOFormatter.Options
    public typealias Element = NoorSDK.ISOFormatter.Options
    public typealias RawValue = Swift.Int
  }
  public static func format(_ date: NoorSDK.DateRepresentable, options: Any?) -> Swift.String
  @objc deinit
}
extension Foundation.Date {
  public static func oldestIn(list: [Foundation.Date]) -> Foundation.Date?
  public static func newestIn(list: [Foundation.Date]) -> Foundation.Date?
  public static func enumerateDates(from startDate: Foundation.Date, to endDate: Foundation.Date, increment: ((Foundation.Date) -> (Foundation.DateComponents))) -> [Foundation.Date]
  public static func enumerateDates(from startDate: Foundation.Date, to endDate: Foundation.Date, increment: Foundation.DateComponents) -> [Foundation.Date]
  public func dateRoundedAt(at style: NoorSDK.RoundDateMode) -> Foundation.Date
  public func dateAtStartOf(_ unit: Foundation.Calendar.Component) -> Foundation.Date
  public func dateAtStartOf(_ units: [Foundation.Calendar.Component]) -> Foundation.Date
  public func dateAtEndOf(_ unit: Foundation.Calendar.Component) -> Foundation.Date
  public func dateAtEndOf(_ units: [Foundation.Calendar.Component]) -> Foundation.Date
  public func dateBySet(_ components: [Foundation.Calendar.Component : Swift.Int]) -> Foundation.Date?
  public func dateBySet(hour: Swift.Int?, min: Swift.Int?, secs: Swift.Int?, ms: Swift.Int? = nil, options: NoorSDK.TimeCalculationOptions = TimeCalculationOptions()) -> Foundation.Date?
  public func dateTruncated(_ components: [Foundation.Calendar.Component]) -> Foundation.Date?
  public func dateTruncated(from component: Foundation.Calendar.Component) -> Foundation.Date?
  public func dateByAdding(_ count: Swift.Int, _ component: Foundation.Calendar.Component) -> NoorSDK.DateInRegion
  public func dateAt(_ type: NoorSDK.DateRelatedType) -> Foundation.Date
  public static func nowAt(_ type: NoorSDK.DateRelatedType) -> Foundation.Date
  public static func datesForWeekday(_ weekday: NoorSDK.WeekDay, inMonth month: Swift.Int, ofYear year: Swift.Int, region: NoorSDK.Region = SwiftDate.defaultRegion) -> [Foundation.Date]
  public static func datesForWeekday(_ weekday: NoorSDK.WeekDay, from startDate: Foundation.Date, to endDate: Foundation.Date, region: NoorSDK.Region = SwiftDate.defaultRegion) -> [Foundation.Date]
  public func dateAt(weekdayOrdinal: Swift.Int, weekday: NoorSDK.WeekDay, monthNumber: Swift.Int? = nil, yearNumber: Swift.Int? = nil) -> Foundation.Date
  public func nextWeekday(_ weekday: NoorSDK.WeekDay, region: NoorSDK.Region = SwiftDate.defaultRegion) -> Foundation.Date
}
public enum WeekDay : Swift.Int {
  case sunday, monday, tuesday, wednesday, thursday, friday, saturday
  public func name(style: NoorSDK.SymbolFormatStyle = .`default`, locale: NoorSDK.LocaleConvertible = SwiftDate.defaultRegion.locale) -> Swift.String
  public func add(days: Swift.Int) -> NoorSDK.WeekDay
  public func subtract(days: Swift.Int) -> NoorSDK.WeekDay
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct Year : Swift.CustomStringConvertible, Swift.Equatable {
  public var description: Swift.String {
    get
  }
  public init(_ year: Swift.Int)
  public func isLeap() -> Swift.Bool
  public func numberOfDays() -> Swift.Int
  public static func == (a: NoorSDK.Year, b: NoorSDK.Year) -> Swift.Bool
}
public enum Month : Swift.Int, Swift.CustomStringConvertible, Swift.Equatable {
  case january, february, march, april, may, june, july, august, september, october, november, december
  public var description: Swift.String {
    get
  }
  public func name(style: NoorSDK.SymbolFormatStyle = .`default`, locale: NoorSDK.LocaleConvertible = SwiftDate.defaultRegion.locale) -> Swift.String
  public func add(months: Swift.Int) -> NoorSDK.Month
  public func subtract(months: Swift.Int) -> NoorSDK.Month
  public func numberOfDays(year: Swift.Int) -> Swift.Int
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol VGPlayerResourceLoadingRequestDelegate : AnyObject {
  func resourceLoadingRequest(_ resourceLoadingRequest: NoorSDK.VGPlayerResourceLoadingRequest, didCompleteWithError error: Swift.Error?)
}
@objc open class VGPlayerResourceLoadingRequest : ObjectiveC.NSObject {
  open var request: AVFoundation.AVAssetResourceLoadingRequest {
    get
  }
  weak open var delegate: NoorSDK.VGPlayerResourceLoadingRequestDelegate?
  public init(_ downloader: NoorSDK.VGPlayerDownloader, _ resourceLoadingRequest: AVFoundation.AVAssetResourceLoadingRequest)
  open func finish()
  open func startWork()
  open func cancel()
  @objc deinit
}
extension NoorSDK.VGPlayerResourceLoadingRequest : NoorSDK.VGPlayerDownloaderDelegate {
  public func downloader(_ downloader: NoorSDK.VGPlayerDownloader, didReceiveData data: Foundation.Data)
  public func downloader(_ downloader: NoorSDK.VGPlayerDownloader, didFinishedWithError error: Swift.Error?)
  public func downloader(_ downloader: NoorSDK.VGPlayerDownloader, didReceiveResponse response: Foundation.URLResponse)
}
public enum YouTubePlayerState : Swift.String {
  case Unstarted
  case Ended
  case Playing
  case Paused
  case Buffering
  case Queued
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum YouTubePlayerEvents : Swift.String {
  case YouTubeIframeAPIReady
  case Ready
  case StateChange
  case PlaybackQualityChange
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum YouTubePlaybackQuality : Swift.String {
  case Small
  case Medium
  case Large
  case HD720
  case HD1080
  case HighResolution
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol YouTubePlayerDelegate : AnyObject {
  func playerReady(_ videoPlayer: NoorSDK.YouTubePlayerView)
  func playerStateChanged(_ videoPlayer: NoorSDK.YouTubePlayerView, playerState: NoorSDK.YouTubePlayerState)
  func playerQualityChanged(_ videoPlayer: NoorSDK.YouTubePlayerView, playbackQuality: NoorSDK.YouTubePlaybackQuality)
}
extension NoorSDK.YouTubePlayerDelegate {
  public func playerReady(_ videoPlayer: NoorSDK.YouTubePlayerView)
  public func playerStateChanged(_ videoPlayer: NoorSDK.YouTubePlayerView, playerState: NoorSDK.YouTubePlayerState)
  public func playerQualityChanged(_ videoPlayer: NoorSDK.YouTubePlayerView, playbackQuality: NoorSDK.YouTubePlaybackQuality)
}
public func videoIDFromYouTubeURL(_ videoURL: Foundation.URL) -> Swift.String?
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class YouTubePlayerView : UIKit.UIView, WebKit.WKNavigationDelegate {
  public typealias YouTubePlayerParameters = [Swift.String : Swift.AnyObject]
  @_Concurrency.MainActor(unsafe) public var baseURL: Swift.String
  @_Concurrency.MainActor(unsafe) open var ready: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) open var playerState: NoorSDK.YouTubePlayerState {
    get
  }
  @_Concurrency.MainActor(unsafe) open var playbackQuality: NoorSDK.YouTubePlaybackQuality {
    get
  }
  @_Concurrency.MainActor(unsafe) open var playerVars: NoorSDK.YouTubePlayerView.YouTubePlayerParameters
  @_Concurrency.MainActor(unsafe) weak open var delegate: NoorSDK.YouTubePlayerDelegate?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) open func loadVideoURL(_ videoURL: Foundation.URL)
  @_Concurrency.MainActor(unsafe) open func loadVideoID(_ videoID: Swift.String)
  @_Concurrency.MainActor(unsafe) open func loadPlaylistID(_ playlistID: Swift.String)
  @_Concurrency.MainActor(unsafe) open func mute()
  @_Concurrency.MainActor(unsafe) open func unMute()
  @_Concurrency.MainActor(unsafe) open func play()
  @_Concurrency.MainActor(unsafe) open func pause()
  @_Concurrency.MainActor(unsafe) open func stop()
  @_Concurrency.MainActor(unsafe) open func clear()
  @_Concurrency.MainActor(unsafe) open func seekTo(_ seconds: Swift.Float, seekAhead: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func getDuration(completion: ((Swift.Double?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) open func getCurrentTime(completion: ((Swift.Double?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) open func previousVideo()
  @_Concurrency.MainActor(unsafe) open func nextVideo()
  @_Concurrency.MainActor(unsafe) @objc open func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @objc deinit
}
public struct PrayerTimes {
  public let fajr: Foundation.Date
  public let sunrise: Foundation.Date
  public let dhuhr: Foundation.Date
  public let asr: Foundation.Date
  public let maghrib: Foundation.Date
  public let isha: Foundation.Date
  public let coordinates: NoorSDK.Coordinates
  public let date: Foundation.DateComponents
  public let calculationParameters: NoorSDK.CalculationParameters
  public init?(coordinates: NoorSDK.Coordinates, date: Foundation.DateComponents, calculationParameters: NoorSDK.CalculationParameters)
  public func currentPrayer(at time: Foundation.Date = Date()) -> NoorSDK.Prayer?
  public func nextPrayer(at time: Foundation.Date = Date()) -> NoorSDK.Prayer?
  public func time(for prayer: NoorSDK.Prayer) -> Foundation.Date
}
public struct Qibla {
  public let direction: Swift.Double
  public init(coordinates: NoorSDK.Coordinates)
}
@_inheritsConvenienceInitializers @available(iOSApplicationExtension, unavailable)
@objc @_Concurrency.MainActor(unsafe) open class IQTextView : UIKit.UITextView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect, textContainer: UIKit.NSTextContainer?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @objc deinit
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var placeholderTextColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var placeholder: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var attributedPlaceholder: Foundation.NSAttributedString? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var text: Swift.String! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var attributedText: Foundation.NSAttributedString! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var font: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var textAlignment: UIKit.NSTextAlignment {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override weak dynamic open var delegate: UIKit.UITextViewDelegate? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
}
extension UIKit.UICollectionView {
  @_Concurrency.MainActor(unsafe) public var centerPoint: CoreFoundation.CGPoint {
    get
  }
  @_Concurrency.MainActor(unsafe) public var centerCellIndexPath: Foundation.IndexPath? {
    get
  }
}
public enum subtitlesFormat : Swift.String {
  case unknown
  case srt
  case ass
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct subtitles : Swift.CustomStringConvertible {
  public var index: Swift.Int
  public var start: Foundation.TimeInterval
  public var end: Foundation.TimeInterval
  public var content: Swift.String
  public var description: Swift.String {
    get
  }
}
open class VGSubtitles {
  open var subtitlesFormat: NoorSDK.subtitlesFormat {
    get
  }
  open var subtitlesGroups: [NoorSDK.subtitles] {
    get
  }
  public init(filePath: Foundation.URL, encoding: Swift.String.Encoding = String.Encoding.utf8)
  public func search(for time: Foundation.TimeInterval) -> NoorSDK.subtitles?
  @objc deinit
}
extension Foundation.Bundle {
  public static func localizedBundle() -> Foundation.Bundle!
  public static func setLanguage(lang: Swift.String)
}
extension UIKit.UIDeviceOrientation {
  public func getUIImageOrientationFromDevice() -> UIKit.UIImage.Orientation
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var parentViewController: UIKit.UIViewController? {
    get
  }
  @_Concurrency.MainActor(unsafe) public class func fromNib<T>(bundle: Foundation.Bundle? = Bundle.main) -> T where T : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func roundCorners(corners: UIKit.UIRectCorner, radius: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func toImage() -> UIKit.UIImage
}
@objc @_inheritsConvenienceInitializers open class VGPlayerCacheMediaConfiguration : ObjectiveC.NSObject, Foundation.NSCoding, Foundation.NSCopying {
  public var filePath: Swift.String? {
    get
  }
  public var cacheSegments: [Foundation.NSValue] {
    get
  }
  public var cacheMedia: NoorSDK.VGPlayerCacheMedia?
  public var url: Foundation.URL?
  public var progress: Swift.Double {
    get
  }
  public var downloadedBytes: Swift.Int64? {
    get
  }
  public var downloadSpeed: Swift.Double? {
    get
  }
  @objc required convenience public init?(coder aDecoder: Foundation.NSCoder)
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic open var debugDescription: Swift.String {
    @objc get
  }
  public static func filePath(for filePath: Swift.String) -> Swift.String
  public static func configuration(filePath: Swift.String) -> NoorSDK.VGPlayerCacheMediaConfiguration
  @objc override dynamic public init()
  @objc deinit
}
extension NoorSDK.VGPlayerCacheMediaConfiguration {
  open func save()
  open func addCache(_ segment: Foundation.NSRange)
  open func add(_ downloadedBytes: Swift.UInt64, time: Foundation.TimeInterval)
}
@objc @_inheritsConvenienceInitializers open class VGPlayerCacheSession : ObjectiveC.NSObject {
  public var downloadQueue: Foundation.OperationQueue {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @available(iOSApplicationExtension, unavailable)
@objc final public class IQKeyboardReturnKeyHandler : ObjectiveC.NSObject {
  @objc weak final public var delegate: (UIKit.UITextFieldDelegate & UIKit.UITextViewDelegate)?
  @objc final public var lastTextFieldReturnKeyType: UIKit.UIReturnKeyType {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(controller: UIKit.UIViewController)
  @objc deinit
  @objc final public func addTextFieldView(_ view: UIKit.UIView)
  @objc final public func removeTextFieldView(_ view: UIKit.UIView)
  @objc final public func addResponderFromView(_ view: UIKit.UIView)
  @objc final public func removeResponderFromView(_ view: UIKit.UIView)
}
@available(iOSApplicationExtension, unavailable)
extension NoorSDK.IQKeyboardReturnKeyHandler : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldShouldBeginEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldShouldEndEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @available(iOS 10.0, *)
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldDidEndEditing(_ textField: UIKit.UITextField, reason: UIKit.UITextField.DidEndEditingReason)
  @_Concurrency.MainActor(unsafe) @objc final public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldShouldClear(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
}
@available(iOSApplicationExtension, unavailable)
extension NoorSDK.IQKeyboardReturnKeyHandler : UIKit.UITextViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func textViewShouldBeginEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textViewShouldEndEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textViewDidBeginEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc final public func textViewDidEndEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc final public func textView(_ textView: UIKit.UITextView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textViewDidChange(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc final public func textViewDidChangeSelection(_ textView: UIKit.UITextView)
  @available(iOS 10.0, *)
  @_Concurrency.MainActor(unsafe) @objc final public func textView(_ aTextView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
  @available(iOS 10.0, *)
  @_Concurrency.MainActor(unsafe) @objc final public func textView(_ aTextView: UIKit.UITextView, shouldInteractWith textAttachment: UIKit.NSTextAttachment, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
  @available(iOS, deprecated: 10.0)
  @_Concurrency.MainActor(unsafe) @objc final public func textView(_ aTextView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange) -> Swift.Bool
  @available(iOS, deprecated: 10.0)
  @_Concurrency.MainActor(unsafe) @objc final public func textView(_ aTextView: UIKit.UITextView, shouldInteractWith textAttachment: UIKit.NSTextAttachment, in characterRange: Foundation.NSRange) -> Swift.Bool
  @available(iOS 16.0, *)
  @_Concurrency.MainActor(unsafe) @objc final public func textView(_ aTextView: UIKit.UITextView, editMenuForTextIn range: Foundation.NSRange, suggestedActions: [UIKit.UIMenuElement]) -> UIKit.UIMenu?
  @available(iOS 16.0, *)
  @_Concurrency.MainActor(unsafe) @objc final public func textView(_ aTextView: UIKit.UITextView, willPresentEditMenuWith animator: UIKit.UIEditMenuInteractionAnimating)
  @available(iOS 16.0, *)
  @_Concurrency.MainActor(unsafe) @objc final public func textView(_ aTextView: UIKit.UITextView, willDismissEditMenuWith animator: UIKit.UIEditMenuInteractionAnimating)
}
public enum ISO8601ParserError : Swift.Error {
  case eof
  case notDigit
  case notDouble
  case invalid
  public static func == (a: NoorSDK.ISO8601ParserError, b: NoorSDK.ISO8601ParserError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class ISOParser : NoorSDK.StringToDateTransformable {
  public struct Options {
    public init(strict: Swift.Bool = false)
  }
  public typealias ISOString = Swift.String.UnicodeScalarView
  public typealias ISOIndex = Swift.String.UnicodeScalarView.Index
  public typealias ISOChar = Swift.UnicodeScalar
  public typealias ISOParsedDate = (date: Foundation.Date?, timezone: Foundation.TimeZone?)
  public struct ParsedDate {
    public enum DateStyle {
      case monthAndDate
      case week
      case dateOnly
      public static func == (a: NoorSDK.ISOParser.ParsedDate.DateStyle, b: NoorSDK.ISOParser.ParsedDate.DateStyle) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
  }
  public init?(_ src: Swift.String, options: NoorSDK.ISOParser.Options? = nil)
  @discardableResult
  public func seek(_ offset: Swift.Int = 1) -> NoorSDK.ISOParser.ISOChar?
  @discardableResult
  public func current(_ next: Swift.Bool = false) -> NoorSDK.ISOParser.ISOChar?
  public static func date(from string: Swift.String) -> NoorSDK.ISOParser.ISOParsedDate?
  public static func parse(_ string: Swift.String, region: NoorSDK.Region?, options: Any?) -> NoorSDK.DateInRegion?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FSPagerViewCell : UIKit.UICollectionViewCell {
  @objc @_Concurrency.MainActor(unsafe) open var textLabel: UIKit.UILabel? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var imageView: UIKit.UIImageView? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
}
extension Foundation.Date {
  public func compareCloseTo(_ refDate: Foundation.Date, precision: Foundation.TimeInterval = 300) -> Swift.Bool
  public func compare(_ compareType: NoorSDK.DateComparisonType) -> Swift.Bool
  public func compare(toDate refDate: Foundation.Date, granularity: Foundation.Calendar.Component) -> Foundation.ComparisonResult
  public func isBeforeDate(_ refDate: Foundation.Date, orEqual: Swift.Bool = false, granularity: Foundation.Calendar.Component) -> Swift.Bool
  public func isAfterDate(_ refDate: Foundation.Date, orEqual: Swift.Bool = false, granularity: Foundation.Calendar.Component) -> Swift.Bool
  public func positionInRange(date startDate: Foundation.Date, and endDate: Foundation.Date) -> Swift.Double?
  public func isInRange(date startDate: Foundation.Date, and endDate: Foundation.Date, orEqual: Swift.Bool = false, granularity: Foundation.Calendar.Component = .nanosecond) -> Swift.Bool
  public func isInside(date: Foundation.Date, granularity: Foundation.Calendar.Component) -> Swift.Bool
  public func earlierDate(_ date: Foundation.Date) -> Foundation.Date
  public func laterDate(_ date: Foundation.Date) -> Foundation.Date
}
extension Foundation.Date {
  public func difference(in component: Foundation.Calendar.Component, from other: Foundation.Date) -> Swift.Int?
  public func differences(in components: Swift.Set<Foundation.Calendar.Component>, from other: Foundation.Date) -> [Foundation.Calendar.Component : Swift.Int]
}
extension Swift.String {
  public var isInt: Swift.Bool {
    get
  }
  public var isDouble: Swift.Bool {
    get
  }
  public func replacingLastOccurrenceOfString(_ searchString: Swift.String, with replacementString: Swift.String, caseInsensitive: Swift.Bool = true) -> Swift.String
  public func convertFromCamelCase() -> Swift.String
  public func removeWhitespaces() -> Swift.String
  public func height(withConstrainedWidth width: CoreFoundation.CGFloat, font: UIKit.UIFont) -> CoreFoundation.CGFloat
  public func width(withConstrainedHeight height: CoreFoundation.CGFloat, font: UIKit.UIFont) -> CoreFoundation.CGFloat
  public func charactersUpTo(index: Swift.Int) -> Swift.String
  public var fromHTML: Swift.String {
    get
  }
  public func attributable() -> Foundation.NSMutableAttributedString
}
public protocol DateRepresentable {
  var year: Swift.Int { get }
  var month: Swift.Int { get }
  func monthName(_ style: NoorSDK.SymbolFormatStyle) -> Swift.String
  var monthDays: Swift.Int { get }
  var day: Swift.Int { get }
  var dayOfYear: Swift.Int { get }
  @available(iOS 9.0, macOS 10.11, *)
  var ordinalDay: Swift.String { get }
  var hour: Swift.Int { get }
  var nearestHour: Swift.Int { get }
  var minute: Swift.Int { get }
  var second: Swift.Int { get }
  var nanosecond: Swift.Int { get }
  var msInDay: Swift.Int { get }
  var weekday: Swift.Int { get }
  func weekdayName(_ style: NoorSDK.SymbolFormatStyle, locale: NoorSDK.LocaleConvertible?) -> Swift.String
  var weekOfYear: Swift.Int { get }
  var weekOfMonth: Swift.Int { get }
  var weekdayOrdinal: Swift.Int { get }
  var firstDayOfWeek: Swift.Int { get }
  var lastDayOfWeek: Swift.Int { get }
  var yearForWeekOfYear: Swift.Int { get }
  var quarter: Swift.Int { get }
  func quarterName(_ style: NoorSDK.SymbolFormatStyle, locale: NoorSDK.LocaleConvertible?) -> Swift.String
  var era: Swift.Int { get }
  func eraName(_ style: NoorSDK.SymbolFormatStyle, locale: NoorSDK.LocaleConvertible?) -> Swift.String
  var DSTOffset: Foundation.TimeInterval { get }
  var date: Foundation.Date { get }
  var region: NoorSDK.Region { get }
  var calendar: Foundation.Calendar { get }
  var dateComponents: Foundation.DateComponents { get }
  var isToday: Swift.Bool { get }
  var isYesterday: Swift.Bool { get }
  var isTomorrow: Swift.Bool { get }
  var isInWeekend: Swift.Bool { get }
  var isInPast: Swift.Bool { get }
  var isInFuture: Swift.Bool { get }
  func formatter(format: Swift.String?, configuration: ((Foundation.DateFormatter) -> Swift.Void)?) -> Foundation.DateFormatter
  func formatterForRegion(format: Swift.String?, configuration: ((inout Foundation.DateFormatter) -> Swift.Void)?) -> Foundation.DateFormatter
  var customFormatter: Foundation.DateFormatter? { get set }
  var sharedFormatter: Foundation.DateFormatter { get }
  init?(_ string: Swift.String, format: Swift.String?, region: NoorSDK.Region)
  init(seconds interval: Foundation.TimeInterval, region: NoorSDK.Region)
  init(milliseconds interval: Swift.Int, region: NoorSDK.Region)
  init?(components configuration: ((inout Foundation.DateComponents) -> Swift.Void), region: NoorSDK.Region?)
  init?(components: Foundation.DateComponents, region: NoorSDK.Region?)
  init(year: Swift.Int, month: Swift.Int, day: Swift.Int, hour: Swift.Int, minute: Swift.Int, second: Swift.Int, nanosecond: Swift.Int, region: NoorSDK.Region)
  func convertTo(region: NoorSDK.Region) -> NoorSDK.DateInRegion
  func toString(_ style: NoorSDK.DateToStringStyles?) -> Swift.String
  func toFormat(_ format: Swift.String, locale: NoorSDK.LocaleConvertible?) -> Swift.String
  func toISO(_ options: NoorSDK.ISOFormatter.Options?) -> Swift.String
  func toDotNET() -> Swift.String
  func toSQL() -> Swift.String
  func toRSS(alt: Swift.Bool) -> Swift.String
  func toUnits(_ units: Swift.Set<Foundation.Calendar.Component>, to refDate: NoorSDK.DateRepresentable) -> [Foundation.Calendar.Component : Swift.Int]
  func toUnit(_ unit: Foundation.Calendar.Component, to refDate: NoorSDK.DateRepresentable) -> Swift.Int
}
extension NoorSDK.DateRepresentable {
  public var calendar: Foundation.Calendar {
    get
  }
  public var year: Swift.Int {
    get
  }
  public var month: Swift.Int {
    get
  }
  public var monthDays: Swift.Int {
    get
  }
  public func monthName(_ style: NoorSDK.SymbolFormatStyle) -> Swift.String
  public var day: Swift.Int {
    get
  }
  public var dayOfYear: Swift.Int {
    get
  }
  @available(iOS 9.0, macOS 10.11, *)
  public var ordinalDay: Swift.String {
    get
  }
  public var hour: Swift.Int {
    get
  }
  public var nearestHour: Swift.Int {
    get
  }
  public var minute: Swift.Int {
    get
  }
  public var second: Swift.Int {
    get
  }
  public var nanosecond: Swift.Int {
    get
  }
  public var msInDay: Swift.Int {
    get
  }
  public var weekday: Swift.Int {
    get
  }
  public func weekdayName(_ style: NoorSDK.SymbolFormatStyle, locale: NoorSDK.LocaleConvertible? = nil) -> Swift.String
  public var weekOfYear: Swift.Int {
    get
  }
  public var weekOfMonth: Swift.Int {
    get
  }
  public var weekdayOrdinal: Swift.Int {
    get
  }
  public var yearForWeekOfYear: Swift.Int {
    get
  }
  public var firstDayOfWeek: Swift.Int {
    get
  }
  public var lastDayOfWeek: Swift.Int {
    get
  }
  public var quarter: Swift.Int {
    get
  }
  public var isToday: Swift.Bool {
    get
  }
  public var isYesterday: Swift.Bool {
    get
  }
  public var isTomorrow: Swift.Bool {
    get
  }
  public var isInWeekend: Swift.Bool {
    get
  }
  public var isInPast: Swift.Bool {
    get
  }
  public var isInFuture: Swift.Bool {
    get
  }
  public func quarterName(_ style: NoorSDK.SymbolFormatStyle, locale: NoorSDK.LocaleConvertible? = nil) -> Swift.String
  public var era: Swift.Int {
    get
  }
  public func eraName(_ style: NoorSDK.SymbolFormatStyle, locale: NoorSDK.LocaleConvertible? = nil) -> Swift.String
  public var DSTOffset: Foundation.TimeInterval {
    get
  }
  public func formatter(format: Swift.String? = nil, configuration: ((Foundation.DateFormatter) -> Swift.Void)? = nil) -> Foundation.DateFormatter
  public func formatterForRegion(format: Swift.String? = nil, configuration: ((inout Foundation.DateFormatter) -> Swift.Void)? = nil) -> Foundation.DateFormatter
  public var sharedFormatter: Foundation.DateFormatter {
    get
  }
  public func toString(_ style: NoorSDK.DateToStringStyles? = nil) -> Swift.String
  public func toFormat(_ format: Swift.String, locale: NoorSDK.LocaleConvertible? = nil) -> Swift.String
  public func toISO(_ options: NoorSDK.ISOFormatter.Options? = nil) -> Swift.String
  public func toDotNET() -> Swift.String
  public func toRSS(alt: Swift.Bool) -> Swift.String
  public func toSQL() -> Swift.String
  public func convertTo(region: NoorSDK.Region) -> NoorSDK.DateInRegion
  public func toUnits(_ units: Swift.Set<Foundation.Calendar.Component>, to refDate: NoorSDK.DateRepresentable) -> [Foundation.Calendar.Component : Swift.Int]
  public func toUnit(_ unit: Foundation.Calendar.Component, to refDate: NoorSDK.DateRepresentable) -> Swift.Int
}
public struct SwiftDate {
  public static var defaultRegion: NoorSDK.Region
  public static var autoFormats: [Swift.String] {
    get
    set
  }
  public static func resetAutoFormats()
}
@available(iOS 9.0, macOS 10.11, *)
public struct ConstraintLayoutGuideDSL : NoorSDK.ConstraintAttributesDSL {
  @discardableResult
  public func prepareConstraints(_ closure: (_ make: NoorSDK.ConstraintMaker) -> Swift.Void) -> [NoorSDK.Constraint]
  public func makeConstraints(_ closure: (_ make: NoorSDK.ConstraintMaker) -> Swift.Void)
  public func remakeConstraints(_ closure: (_ make: NoorSDK.ConstraintMaker) -> Swift.Void)
  public func updateConstraints(_ closure: (_ make: NoorSDK.ConstraintMaker) -> Swift.Void)
  public func removeConstraints()
  public var target: Swift.AnyObject? {
    get
  }
}
public typealias AnimationCompletion = (_ completed: Swift.Bool) -> Swift.Void
public protocol AnimationDelegate : AnyObject {
  func hide(animator: NoorSDK.Animator)
  func panStarted(animator: NoorSDK.Animator)
  func panEnded(animator: NoorSDK.Animator)
}
public struct SafeZoneConflicts : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let statusBar: NoorSDK.SafeZoneConflicts
  public static let sensorNotch: NoorSDK.SafeZoneConflicts
  public static let homeIndicator: NoorSDK.SafeZoneConflicts
  public static let overStatusBar: NoorSDK.SafeZoneConflicts
  public typealias ArrayLiteralElement = NoorSDK.SafeZoneConflicts
  public typealias Element = NoorSDK.SafeZoneConflicts
  public typealias RawValue = Swift.Int
}
@_hasMissingDesignatedInitializers public class AnimationContext {
  final public let messageView: UIKit.UIView
  final public let containerView: UIKit.UIView
  final public let safeZoneConflicts: NoorSDK.SafeZoneConflicts
  final public let interactiveHide: Swift.Bool
  @objc deinit
}
public protocol Animator : AnyObject {
  var delegate: NoorSDK.AnimationDelegate? { get set }
  func show(context: NoorSDK.AnimationContext, completion: @escaping NoorSDK.AnimationCompletion)
  func hide(context: NoorSDK.AnimationContext, completion: @escaping NoorSDK.AnimationCompletion)
  var showDuration: Foundation.TimeInterval { get }
  var hideDuration: Foundation.TimeInterval { get }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class FloatingPanelPanGestureRecognizer : UIKit.UIPanGestureRecognizer {
  @_Concurrency.MainActor(unsafe) @objc override final public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent)
  @_Concurrency.MainActor(unsafe) @objc override weak final public var delegate: UIKit.UIGestureRecognizerDelegate? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) weak final public var delegateProxy: UIKit.UIGestureRecognizerDelegate? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(target: Any?, action: ObjectiveC.Selector?)
  @objc deinit
}
extension Swift.Int {
  public static var random: Swift.Int {
    get
  }
  public static func random(n: Swift.Int) -> Swift.Int
  public static func random(min: Swift.Int, max: Swift.Int) -> Swift.Int
}
@objc open class VGPlayerCacheMediaWorker : ObjectiveC.NSObject {
  open var cacheConfiguration: NoorSDK.VGPlayerCacheMediaConfiguration? {
    get
  }
  open var setupError: Swift.Error? {
    get
  }
  @objc deinit
  public init(url: Foundation.URL)
  open func cache(_ data: Foundation.Data, forRange range: Foundation.NSRange, closure: (Swift.Bool) -> Swift.Void)
  open func cache(forRange range: Foundation.NSRange) -> Foundation.Data?
  open func cachedDataActions(forRange range: Foundation.NSRange) -> Swift.Array<NoorSDK.VGPlayerCacheAction>
  open func set(cacheMedia: NoorSDK.VGPlayerCacheMedia) -> Swift.Bool
  open func save()
  open func startWritting()
  open func finishWritting()
}
@objc public enum FloatingPanelPosition : Swift.Int {
  case top
  case left
  case bottom
  case right
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOSApplicationExtension, unavailable)
@objc public enum IQAutoToolbarManageBehaviour : Swift.Int {
  case bySubviews
  case byTag
  case byPosition
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOSApplicationExtension, unavailable)
@objc public enum IQPreviousNextDisplayMode : Swift.Int {
  case `default`
  case alwaysHide
  case alwaysShow
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOSApplicationExtension, unavailable)
@objc public enum IQEnableMode : Swift.Int {
  case `default`
  case enabled
  case disabled
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Foundation.Date {
  public func day(shortHand: Swift.Bool? = false) -> Swift.String
  public func day() -> Swift.Int
  public func month(shortHand: Swift.Bool? = false) -> Swift.String
  public func month() -> Swift.Int
  public func year() -> Swift.Int
  public func fromUTC(string: Swift.String) -> Foundation.Date
  public func toUTC() -> Swift.String
  public func string() -> Swift.String
  public func stringWithTime() -> Swift.String
  public func stringShort() -> Swift.String
  public func startOf() -> Foundation.Date?
  public func setTime(hour: Swift.Int, min: Swift.Int, sec: Swift.Int, timeZoneAbbrev: Swift.String = "UTC") -> Foundation.Date?
}
@available(iOS 8.0, *)
extension UIKit.UILayoutSupport {
  @_Concurrency.MainActor(unsafe) public var snp: NoorSDK.ConstraintLayoutSupportDSL {
    get
  }
}
@objc public protocol FloatingPanelBehavior {
  @objc optional var springDecelerationRate: CoreFoundation.CGFloat { get }
  @objc optional var springResponseTime: CoreFoundation.CGFloat { get }
  @objc optional var momentumProjectionRate: CoreFoundation.CGFloat { get }
  @objc optional func shouldProjectMomentum(_ fpc: NoorSDK.FloatingPanelController, to proposedTargetPosition: NoorSDK.FloatingPanelState) -> Swift.Bool
  @objc optional func redirectionalProgress(_ fpc: NoorSDK.FloatingPanelController, from: NoorSDK.FloatingPanelState, to: NoorSDK.FloatingPanelState) -> CoreFoundation.CGFloat
  @objc optional func allowsRubberBanding(for edge: UIKit.UIRectEdge) -> Swift.Bool
  @objc optional var removalInteractionVelocityThreshold: CoreFoundation.CGFloat { get }
}
open class FloatingPanelDefaultBehavior : NoorSDK.FloatingPanelBehavior {
  public init()
  @objc open var springDecelerationRate: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var springResponseTime: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open var momentumProjectionRate: CoreFoundation.CGFloat {
    @objc get
  }
  @objc open func redirectionalProgress(_ fpc: NoorSDK.FloatingPanelController, from: NoorSDK.FloatingPanelState, to: NoorSDK.FloatingPanelState) -> CoreFoundation.CGFloat
  @objc open func allowsRubberBanding(for edge: UIKit.UIRectEdge) -> Swift.Bool
  @objc open var removalInteractionVelocityThreshold: CoreFoundation.CGFloat
  @objc deinit
}
public func - (lhs: NoorSDK.DateInRegion, rhs: NoorSDK.DateInRegion) -> Foundation.TimeInterval
public func + (lhs: NoorSDK.DateInRegion, rhs: Foundation.DateComponents) -> NoorSDK.DateInRegion
public func - (lhs: NoorSDK.DateInRegion, rhs: Foundation.DateComponents) -> NoorSDK.DateInRegion
public func + (lhs: NoorSDK.DateInRegion, rhs: [Foundation.Calendar.Component : Swift.Int]) -> NoorSDK.DateInRegion
public func - (lhs: NoorSDK.DateInRegion, rhs: [Foundation.Calendar.Component : Swift.Int]) -> NoorSDK.DateInRegion
extension NoorSDK.DateInRegion {
  public mutating func addTimeInterval(_ timeInterval: Foundation.TimeInterval)
}
extension UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) public func increaseFontSize(by: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func change(kernValue: Swift.Double)
}
public struct ConstraintPriority : Swift.ExpressibleByFloatLiteral, Swift.Equatable, Swift.Strideable {
  public typealias FloatLiteralType = Swift.Float
  public let value: Swift.Float
  public init(floatLiteral value: Swift.Float)
  public init(_ value: Swift.Float)
  public static var required: NoorSDK.ConstraintPriority {
    get
  }
  public static var high: NoorSDK.ConstraintPriority {
    get
  }
  public static var medium: NoorSDK.ConstraintPriority {
    get
  }
  public static var low: NoorSDK.ConstraintPriority {
    get
  }
  public static func == (lhs: NoorSDK.ConstraintPriority, rhs: NoorSDK.ConstraintPriority) -> Swift.Bool
  public func advanced(by n: NoorSDK.ConstraintPriority.FloatLiteralType) -> NoorSDK.ConstraintPriority
  public func distance(to other: NoorSDK.ConstraintPriority) -> NoorSDK.ConstraintPriority.FloatLiteralType
  public typealias Stride = NoorSDK.ConstraintPriority.FloatLiteralType
}
extension Foundation.NSMutableAttributedString {
  public func add(kerning: CoreFoundation.CGFloat) -> Foundation.NSMutableAttributedString
  public func add(lineSpacing: CoreFoundation.CGFloat) -> Foundation.NSMutableAttributedString
  public func aligned(_ alignment: UIKit.NSTextAlignment) -> Foundation.NSMutableAttributedString
  public func colored(_ color: UIKit.UIColor) -> Foundation.NSMutableAttributedString
  public func backgroundColored(_ color: UIKit.UIColor) -> Foundation.NSMutableAttributedString
  public func underlined(color: UIKit.UIColor? = nil, style: UIKit.NSUnderlineStyle = .single) -> Foundation.NSMutableAttributedString
}
public enum VGPlayerState : Swift.Int {
  case none
  case playing
  case paused
  case playFinished
  case error
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum VGPlayerBufferstate : Swift.Int {
  case none
  case readyToPlay
  case buffering
  case stop
  case bufferFinished
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum VGVideoGravityMode : Swift.Int {
  case resize
  case resizeAspect
  case resizeAspectFill
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum VGPlayerBackgroundMode : Swift.Int {
  case suspend
  case autoPlayAndPaused
  case proceed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol VGPlayerDelegate : AnyObject {
  func vgPlayer(_ player: NoorSDK.VGPlayer, stateDidChange state: NoorSDK.VGPlayerState)
  func vgPlayer(_ player: NoorSDK.VGPlayer, playerDurationDidChange currentDuration: Foundation.TimeInterval, totalDuration: Foundation.TimeInterval)
  func vgPlayer(_ player: NoorSDK.VGPlayer, bufferStateDidChange state: NoorSDK.VGPlayerBufferstate)
  func vgPlayer(_ player: NoorSDK.VGPlayer, bufferedDidChange bufferedDuration: Foundation.TimeInterval, totalDuration: Foundation.TimeInterval)
  func vgPlayer(_ player: NoorSDK.VGPlayer, playerFailed error: NoorSDK.VGPlayerError)
}
extension NoorSDK.VGPlayerDelegate {
  public func vgPlayer(_ player: NoorSDK.VGPlayer, stateDidChange state: NoorSDK.VGPlayerState)
  public func vgPlayer(_ player: NoorSDK.VGPlayer, playerDurationDidChange currentDuration: Foundation.TimeInterval, totalDuration: Foundation.TimeInterval)
  public func vgPlayer(_ player: NoorSDK.VGPlayer, bufferStateDidChange state: NoorSDK.VGPlayerBufferstate)
  public func vgPlayer(_ player: NoorSDK.VGPlayer, bufferedDidChange bufferedDuration: Foundation.TimeInterval, totalDuration: Foundation.TimeInterval)
  public func vgPlayer(_ player: NoorSDK.VGPlayer, playerFailed error: NoorSDK.VGPlayerError)
}
@objc @_inheritsConvenienceInitializers open class VGPlayer : ObjectiveC.NSObject {
  open var state: NoorSDK.VGPlayerState {
    get
    set
  }
  open var bufferState: NoorSDK.VGPlayerBufferstate {
    get
    set
  }
  open var displayView: NoorSDK.VGPlayerView
  open var gravityMode: NoorSDK.VGVideoGravityMode
  open var backgroundMode: NoorSDK.VGPlayerBackgroundMode
  open var bufferInterval: Swift.Double
  weak open var delegate: NoorSDK.VGPlayerDelegate?
  open var mediaFormat: NoorSDK.VGPlayerMediaFormat {
    get
  }
  open var totalDuration: Swift.Double {
    get
  }
  open var currentDuration: Swift.Double {
    get
  }
  open var buffering: Swift.Bool {
    get
  }
  open var player: AVFoundation.AVPlayer? {
    get
  }
  open var playerItem: AVFoundation.AVPlayerItem? {
    get
  }
  open var playerAsset: AVFoundation.AVURLAsset? {
    get
  }
  open var contentURL: Foundation.URL? {
    get
  }
  open var error: NoorSDK.VGPlayerError {
    get
  }
  public init(URL: Foundation.URL?, playerView: NoorSDK.VGPlayerView?)
  convenience public init(URL: Foundation.URL)
  convenience public init(playerView: NoorSDK.VGPlayerView)
  @objc override convenience dynamic public init()
  @objc deinit
}
extension NoorSDK.VGPlayer {
  open func replaceVideo(_ URL: Foundation.URL)
  open func reloadPlayer()
  open func cleanPlayer()
  open func play()
  open func pause()
  open func seekTime(_ time: Foundation.TimeInterval)
  open func seekTime(_ time: Foundation.TimeInterval, completion: ((Swift.Bool) -> Swift.Void)?)
}
extension NoorSDK.VGPlayer {
  @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
}
@available(iOS 9.0, *)
public typealias ConstraintLayoutGuide = UIKit.UILayoutGuide
@objc public enum BAPrayer : Swift.Int {
  case fajr = 0
  case sunrise = 1
  case dhuhr = 2
  case asr = 3
  case maghrib = 4
  case isha = 5
  case none = 6
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers open class BAPrayerTimes : ObjectiveC.NSObject {
  @objc open var fajr: Foundation.Date?
  @objc open var sunrise: Foundation.Date?
  @objc open var dhuhr: Foundation.Date?
  @objc open var asr: Foundation.Date?
  @objc open var maghrib: Foundation.Date?
  @objc open var isha: Foundation.Date?
  @objc public init(coordinates: NoorSDK.BACoordinates, date: Foundation.DateComponents, calculationParameters: NoorSDK.BACalculationParameters)
  @objc open func currentPrayer(_ time: Foundation.Date?) -> NoorSDK.BAPrayer
  @objc open func nextPrayer(_ time: Foundation.Date?) -> NoorSDK.BAPrayer
  @objc open func timeForPrayer(_ prayer: NoorSDK.BAPrayer) -> Foundation.Date?
  @objc deinit
}
@objc @objcMembers open class BACalculationParameters : ObjectiveC.NSObject {
  @objc open var method: NoorSDK.BACalculationMethod
  @objc open var fajrAngle: Swift.Double
  @objc open var maghribAngle: Swift.Double
  @objc open var ishaAngle: Swift.Double
  @objc open var ishaInterval: Swift.Int
  @objc open var madhab: NoorSDK.BAMadhab
  @objc open var highLatitudeRule: NoorSDK.BAHighLatitudeRule
  @objc open var adjustments: NoorSDK.BAPrayerAdjustments
  @objc open var shafaq: NoorSDK.BAShafaq
  @objc open var rounding: NoorSDK.BARounding
  @objc public init(fajrAngle: Swift.Double, maghribAngle: Swift.Double, ishaAngle: Swift.Double, ishaInterval: Swift.Int)
  @objc convenience public init(method: NoorSDK.BACalculationMethod)
  @objc deinit
}
@objc public enum BACalculationMethod : Swift.Int {
  case muslimWorldLeague
  case egyptian
  case karachi
  case ummAlQura
  case dubai
  case moonsightingCommittee
  case northAmerica
  case kuwait
  case qatar
  case other
  case singapore
  case tehran
  case turkey
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum BAMadhab : Swift.Int {
  case shafi
  case hanafi
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum BAShafaq : Swift.Int {
  case general
  case ahmer
  case abyad
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum BARounding : Swift.Int {
  case nearest
  case up
  case none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum BAHighLatitudeRule : Swift.Int {
  case middleOfTheNight
  case seventhOfTheNight
  case twilightAngle
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers open class BAPrayerAdjustments : ObjectiveC.NSObject {
  @objc open var fajr: Swift.Int
  @objc open var sunrise: Swift.Int
  @objc open var dhuhr: Swift.Int
  @objc open var asr: Swift.Int
  @objc open var maghrib: Swift.Int
  @objc open var isha: Swift.Int
  @objc public init(fajr: Swift.Int = 0, sunrise: Swift.Int = 0, dhuhr: Swift.Int = 0, asr: Swift.Int = 0, maghrib: Swift.Int = 0, isha: Swift.Int = 0)
  @objc deinit
}
@objc @objcMembers open class BACoordinates : ObjectiveC.NSObject {
  @objc open var latitude: Swift.Double
  @objc open var longitude: Swift.Double
  @objc public init(latitude: Swift.Double, longitude: Swift.Double)
  @objc deinit
}
@objc @objcMembers open class BAQibla : ObjectiveC.NSObject {
  @objc open var direction: Swift.Double
  @objc public init(coordinates: NoorSDK.BACoordinates)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ConstraintDescription {
  @objc deinit
}
public func == (lhs: NoorSDK.DateInRegion, rhs: NoorSDK.DateInRegion) -> Swift.Bool
public func <= (lhs: NoorSDK.DateInRegion, rhs: NoorSDK.DateInRegion) -> Swift.Bool
public func >= (lhs: NoorSDK.DateInRegion, rhs: NoorSDK.DateInRegion) -> Swift.Bool
public func < (lhs: NoorSDK.DateInRegion, rhs: NoorSDK.DateInRegion) -> Swift.Bool
public func > (lhs: NoorSDK.DateInRegion, rhs: NoorSDK.DateInRegion) -> Swift.Bool
public enum DateComparisonType {
  case isToday
  case isTomorrow
  case isYesterday
  case isSameDay(NoorSDK.DateRepresentable)
  case isThisWeek
  case isNextWeek
  case isLastWeek
  case isSameWeek(NoorSDK.DateRepresentable)
  case isThisMonth
  case isNextMonth
  case isLastMonth
  case isSameMonth(NoorSDK.DateRepresentable)
  case isThisYear
  case isNextYear
  case isLastYear
  case isSameYear(NoorSDK.DateRepresentable)
  case isInTheFuture
  case isInThePast
  case isEarlier(than: NoorSDK.DateRepresentable)
  case isLater(than: NoorSDK.DateRepresentable)
  case isWeekday
  case isWeekend
  case isMorning
  case isAfternoon
  case isEvening
  case isNight
  case isInDST
}
extension NoorSDK.DateInRegion {
  public func compareCloseTo(_ refDate: NoorSDK.DateInRegion, precision: Foundation.TimeInterval = 300) -> Swift.Bool
  public func compare(_ compareType: NoorSDK.DateComparisonType) -> Swift.Bool
  public func compare(toDate refDate: NoorSDK.DateInRegion, granularity: Foundation.Calendar.Component) -> Foundation.ComparisonResult
  public func isBeforeDate(_ date: NoorSDK.DateInRegion, orEqual: Swift.Bool = false, granularity: Foundation.Calendar.Component) -> Swift.Bool
  public func isAfterDate(_ refDate: NoorSDK.DateInRegion, orEqual: Swift.Bool = false, granularity: Foundation.Calendar.Component) -> Swift.Bool
  public func isInside(date: NoorSDK.DateInRegion, granularity: Foundation.Calendar.Component) -> Swift.Bool
  public func positionInRange(date startDate: NoorSDK.DateInRegion, and endDate: NoorSDK.DateInRegion) -> Swift.Double?
  public func isInRange(date startDate: NoorSDK.DateInRegion, and endDate: NoorSDK.DateInRegion, orEqual: Swift.Bool = true, granularity: Foundation.Calendar.Component = .nanosecond) -> Swift.Bool
  public func earlierDate(_ date: NoorSDK.DateInRegion) -> NoorSDK.DateInRegion
  public func laterDate(_ date: NoorSDK.DateInRegion) -> NoorSDK.DateInRegion
  public func difference(in component: Foundation.Calendar.Component, from other: NoorSDK.DateInRegion) -> Swift.Int?
  public func differences(in components: Swift.Set<Foundation.Calendar.Component>, from other: NoorSDK.DateInRegion) -> [Foundation.Calendar.Component : Swift.Int]
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ConstraintMakerEditable : NoorSDK.ConstraintMakerPrioritizable {
  @discardableResult
  public func multipliedBy(_ amount: NoorSDK.ConstraintMultiplierTarget) -> NoorSDK.ConstraintMakerEditable
  @discardableResult
  public func dividedBy(_ amount: NoorSDK.ConstraintMultiplierTarget) -> NoorSDK.ConstraintMakerEditable
  @discardableResult
  public func offset(_ amount: NoorSDK.ConstraintOffsetTarget) -> NoorSDK.ConstraintMakerEditable
  @discardableResult
  public func inset(_ amount: NoorSDK.ConstraintInsetTarget) -> NoorSDK.ConstraintMakerEditable
  @available(iOS 11.0, tvOS 11.0, *)
  @discardableResult
  public func inset(_ amount: NoorSDK.ConstraintDirectionalInsetTarget) -> NoorSDK.ConstraintMakerEditable
  @objc deinit
}
extension UIKit.UIEdgeInsets {
  public static func + (left: UIKit.UIEdgeInsets, right: UIKit.UIEdgeInsets) -> UIKit.UIEdgeInsets
  public static func - (left: UIKit.UIEdgeInsets, right: UIKit.UIEdgeInsets) -> UIKit.UIEdgeInsets
}
public struct NoorSubscriptionProducts {
  public static var monthlySub: Swift.String {
    get
  }
  public static let store: NoorSDK.IAPManager
}
public func resourceNameForProductIdentifier(_ productIdentifier: Swift.String) -> Swift.String?
public typealias ConstraintView = UIKit.UIView
open class TimePeriod : NoorSDK.TimePeriodProtocol {
  public var start: NoorSDK.DateInRegion?
  public var end: NoorSDK.DateInRegion?
  public init()
  public init(start: NoorSDK.DateInRegion?, end: NoorSDK.DateInRegion?)
  public init(start: NoorSDK.DateInRegion, duration: Foundation.TimeInterval)
  public init(end: NoorSDK.DateInRegion, duration: Foundation.TimeInterval)
  public init(start: NoorSDK.DateInRegion, duration: Foundation.DateComponents)
  public init(end: NoorSDK.DateInRegion, duration: Foundation.DateComponents)
  public static func infinity() -> NoorSDK.TimePeriod
  public func shifted(by timeInterval: Foundation.TimeInterval) -> NoorSDK.TimePeriod
  public func shifted(by components: Foundation.DateComponents) -> NoorSDK.TimePeriod
  public func lengthened(by timeInterval: Foundation.TimeInterval, at anchor: NoorSDK.TimePeriodAnchor) -> NoorSDK.TimePeriod
  public func shortened(by timeInterval: Foundation.TimeInterval, at anchor: NoorSDK.TimePeriodAnchor) -> NoorSDK.TimePeriod
  public static func + (leftAddend: NoorSDK.TimePeriod, rightAddend: Foundation.TimeInterval) -> NoorSDK.TimePeriod
  public static func - (minuend: NoorSDK.TimePeriod, subtrahend: Foundation.TimeInterval) -> NoorSDK.TimePeriod
  public static func == (left: NoorSDK.TimePeriod, right: NoorSDK.TimePeriodProtocol) -> Swift.Bool
  @objc deinit
}
extension NoorSDK.TimePeriod {
  public var startDate: Foundation.Date? {
    get
  }
  public var endDate: Foundation.Date? {
    get
  }
  convenience public init(startDate: Foundation.Date, endDate: Foundation.Date, region: NoorSDK.Region = Region.UTC)
}
@_hasMissingDesignatedInitializers public class DOTNETParser : NoorSDK.StringToDateTransformable {
  public static func parse(_ string: Swift.String) -> (seconds: Foundation.TimeInterval, tz: Foundation.TimeZone)?
  public static func parse(_ string: Swift.String, region: NoorSDK.Region?, options: Any?) -> NoorSDK.DateInRegion?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DOTNETFormatter : NoorSDK.DateToStringTrasformable {
  public static func format(_ date: NoorSDK.DateRepresentable, options: Any?) -> Swift.String
  @objc deinit
}
public enum HighLatitudeRule : Swift.String, Swift.Codable, Swift.CaseIterable {
  case middleOfTheNight
  case seventhOfTheNight
  case twilightAngle
  public static func recommended(for coordinates: NoorSDK.Coordinates) -> NoorSDK.HighLatitudeRule
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NoorSDK.HighLatitudeRule]
  public typealias RawValue = Swift.String
  public static var allCases: [NoorSDK.HighLatitudeRule] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
open class PhysicsPanHandler {
  public var hideDelay: Swift.Double
  public struct MotionSnapshot {
  }
  final public class State {
    public init(messageView: UIKit.UIView, containerView: UIKit.UIView)
    final public func stop()
    final public var angularVelocity: CoreFoundation.CGFloat {
      get
    }
    @objc deinit
  }
  public var state: NoorSDK.PhysicsPanHandler.State? {
    get
  }
  public var isOffScreen: Swift.Bool {
    get
  }
  public init()
  public var pan: UIKit.UIPanGestureRecognizer {
    get
  }
  @objc deinit
}
public enum Madhab : Swift.Int, Swift.Codable, Swift.CaseIterable {
  case shafi
  case hanafi
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [NoorSDK.Madhab]
  public typealias RawValue = Swift.Int
  public static var allCases: [NoorSDK.Madhab] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public protocol AccessibleMessage {
  var accessibilityMessage: Swift.String? { get }
  var accessibilityElement: ObjectiveC.NSObject? { get }
  var additionalAccessibilityElements: [ObjectiveC.NSObject]? { get }
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class FSPageControl : UIKit.UIControl {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var numberOfPages: Swift.Int {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var currentPage: Swift.Int {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var itemSpacing: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var interitemSpacing: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var contentInsets: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var contentHorizontalAlignment: UIKit.UIControl.ContentHorizontalAlignment {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var hidesForSinglePage: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSublayers(of layer: QuartzCore.CALayer)
  @objc(setStrokeColor:forState:) @_Concurrency.MainActor(unsafe) open func setStrokeColor(_ strokeColor: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc(setFillColor:forState:) @_Concurrency.MainActor(unsafe) open func setFillColor(_ fillColor: UIKit.UIColor?, for state: UIKit.UIControl.State)
  @objc(setImage:forState:) @_Concurrency.MainActor(unsafe) open func setImage(_ image: UIKit.UIImage?, for state: UIKit.UIControl.State)
  @objc(setAlpha:forState:) @_Concurrency.MainActor(unsafe) open func setAlpha(_ alpha: CoreFoundation.CGFloat, for state: UIKit.UIControl.State)
  @objc(setPath:forState:) @_Concurrency.MainActor(unsafe) open func setPath(_ path: UIKit.UIBezierPath?, for state: UIKit.UIControl.State)
  @objc deinit
}
extension UIKit.UIControl.State : Swift.Hashable {
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class VGPlayerCacheMedia : ObjectiveC.NSObject, Foundation.NSCoding {
  open var contentType: Swift.String?
  open var isByteRangeAccessSupported: Swift.Bool
  open var contentLength: Swift.Int64
  open var downloadedLength: Swift.UInt64
  @objc override dynamic public init()
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc public func encode(with aCoder: Foundation.NSCoder)
  @objc required public init(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class VGPlayerSlider : UIKit.UISlider {
  @_Concurrency.MainActor(unsafe) open var progressView: UIKit.UIProgressView
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func thumbRect(forBounds bounds: CoreFoundation.CGRect, trackRect rect: CoreFoundation.CGRect, value: Swift.Float) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func trackRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) open func setProgress(_ progress: Swift.Float, animated: Swift.Bool)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ConstraintMakerRelatable {
  @discardableResult
  public func equalTo(_ other: NoorSDK.ConstraintRelatableTarget, _ file: Swift.String = #file, _ line: Swift.UInt = #line) -> NoorSDK.ConstraintMakerEditable
  @discardableResult
  public func equalToSuperview(_ file: Swift.String = #file, _ line: Swift.UInt = #line) -> NoorSDK.ConstraintMakerEditable
  @discardableResult
  public func lessThanOrEqualTo(_ other: NoorSDK.ConstraintRelatableTarget, _ file: Swift.String = #file, _ line: Swift.UInt = #line) -> NoorSDK.ConstraintMakerEditable
  @discardableResult
  public func lessThanOrEqualToSuperview(_ file: Swift.String = #file, _ line: Swift.UInt = #line) -> NoorSDK.ConstraintMakerEditable
  @discardableResult
  public func greaterThanOrEqualTo(_ other: NoorSDK.ConstraintRelatableTarget, _ file: Swift.String = #file, line: Swift.UInt = #line) -> NoorSDK.ConstraintMakerEditable
  @discardableResult
  public func greaterThanOrEqualToSuperview(_ file: Swift.String = #file, line: Swift.UInt = #line) -> NoorSDK.ConstraintMakerEditable
  @objc deinit
}
@available(iOSApplicationExtension, unavailable)
@objc final public class IQBarButtonItemConfiguration : ObjectiveC.NSObject {
  @objc public init(barButtonSystemItem: UIKit.UIBarButtonItem.SystemItem, action: ObjectiveC.Selector)
  @objc public init(image: UIKit.UIImage, action: ObjectiveC.Selector)
  @objc public init(title: Swift.String, action: ObjectiveC.Selector)
  final public let barButtonSystemItem: UIKit.UIBarButtonItem.SystemItem?
  @objc final public let image: UIKit.UIImage?
  @objc final public let title: Swift.String?
  @objc final public let action: ObjectiveC.Selector?
  @objc deinit
}
@available(iOSApplicationExtension, unavailable)
@objc extension UIKit.UIImage {
  @objc public static func keyboardLeftImage() -> UIKit.UIImage?
  @objc public static func keyboardRightImage() -> UIKit.UIImage?
  @objc public static func keyboardUpImage() -> UIKit.UIImage?
  @objc public static func keyboardDownImage() -> UIKit.UIImage?
  @objc public static func keyboardPreviousImage() -> UIKit.UIImage?
  @objc public static func keyboardNextImage() -> UIKit.UIImage?
}
@available(iOSApplicationExtension, unavailable)
@objc extension UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public var keyboardToolbar: NoorSDK.IQToolbar {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var shouldHideToolbarPlaceholder: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var toolbarPlaceholder: Swift.String? {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public var drawingToolbarPlaceholder: Swift.String? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addKeyboardToolbarWithTarget(target: Swift.AnyObject?, titleText: Swift.String?, rightBarButtonConfiguration: NoorSDK.IQBarButtonItemConfiguration?, previousBarButtonConfiguration: NoorSDK.IQBarButtonItemConfiguration? = nil, nextBarButtonConfiguration: NoorSDK.IQBarButtonItemConfiguration? = nil)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, action: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, action: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightButtonOnKeyboardWithImage(_ image: UIKit.UIImage, target: Swift.AnyObject?, action: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightButtonOnKeyboardWithImage(_ image: UIKit.UIImage, target: Swift.AnyObject?, action: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightButtonOnKeyboardWithText(_ text: Swift.String, target: Swift.AnyObject?, action: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightButtonOnKeyboardWithText(_ text: Swift.String, target: Swift.AnyObject?, action: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addCancelDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, cancelAction: ObjectiveC.Selector, doneAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightLeftOnKeyboardWithTarget(_ target: Swift.AnyObject?, leftButtonTitle: Swift.String, rightButtonTitle: Swift.String, leftButtonAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightLeftOnKeyboardWithTarget(_ target: Swift.AnyObject?, leftButtonImage: UIKit.UIImage, rightButtonImage: UIKit.UIImage, leftButtonAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addCancelDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, cancelAction: ObjectiveC.Selector, doneAction: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightLeftOnKeyboardWithTarget(_ target: Swift.AnyObject?, leftButtonTitle: Swift.String, rightButtonTitle: Swift.String, leftButtonAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addRightLeftOnKeyboardWithTarget(_ target: Swift.AnyObject?, leftButtonImage: UIKit.UIImage, rightButtonImage: UIKit.UIImage, leftButtonAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addPreviousNextDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, doneAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addPreviousNextRightOnKeyboardWithTarget(_ target: Swift.AnyObject?, rightButtonImage: UIKit.UIImage, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addPreviousNextRightOnKeyboardWithTarget(_ target: Swift.AnyObject?, rightButtonTitle: Swift.String, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addPreviousNextDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, doneAction: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addPreviousNextRightOnKeyboardWithTarget(_ target: Swift.AnyObject?, rightButtonImage: UIKit.UIImage, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, titleText: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func addPreviousNextRightOnKeyboardWithTarget(_ target: Swift.AnyObject?, rightButtonTitle: Swift.String, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, titleText: Swift.String?)
}
public protocol ConstraintDirectionalInsetTarget : NoorSDK.ConstraintConstantTarget {
}
@available(iOS 11.0, tvOS 11.0, *)
extension UIKit.NSDirectionalEdgeInsets : NoorSDK.ConstraintDirectionalInsetTarget {
}
public protocol KeyboardTrackingViewDelegate : AnyObject {
  func keyboardTrackingViewWillChange(change: NoorSDK.KeyboardTrackingView.Change, userInfo: [Swift.AnyHashable : Any])
  func keyboardTrackingViewDidChange(change: NoorSDK.KeyboardTrackingView.Change, userInfo: [Swift.AnyHashable : Any])
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class KeyboardTrackingView : UIKit.UIView {
  public enum Change {
    case show
    case hide
    case frame
    public static func == (a: NoorSDK.KeyboardTrackingView.Change, b: NoorSDK.KeyboardTrackingView.Change) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) weak public var delegate: NoorSDK.KeyboardTrackingViewDelegate?
  @_Concurrency.MainActor(unsafe) open var isPaused: Swift.Bool {
    get
    set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var topMargin: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) open func willChange(change: NoorSDK.KeyboardTrackingView.Change, userInfo: [Swift.AnyHashable : Any])
  @_Concurrency.MainActor(unsafe) open func didChange(change: NoorSDK.KeyboardTrackingView.Change, userInfo: [Swift.AnyHashable : Any])
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func awakeFromNib()
  @objc deinit
}
@available(iOSApplicationExtension, unavailable)
extension NoorSDK.IQKeyboardManager {
  @objc final public var movedDistance: CoreFoundation.CGFloat {
    @objc get
  }
  @objc final public var movedDistanceChanged: ((CoreFoundation.CGFloat) -> Swift.Void)? {
    @objc get
    @objc set(newValue)
  }
}
public enum Shafaq : Swift.String, Swift.Codable, Swift.CaseIterable {
  case general
  case ahmer
  case abyad
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NoorSDK.Shafaq]
  public typealias RawValue = Swift.String
  public static var allCases: [NoorSDK.Shafaq] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@objc public enum FloatingPanelReferenceEdge : Swift.Int {
  case top
  case left
  case bottom
  case right
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum FloatingPanelLayoutReferenceGuide : Swift.Int {
  case superview = 0
  case safeArea = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum FloatingPanelLayoutContentBoundingGuide : Swift.Int {
  case none = 0
  case superview = 1
  case safeArea = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public typealias Minute = Swift.Int
extension NoorSDK.LayoutConstraint {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var description: Swift.String {
    @objc get
  }
}
@objc open class FloatingPanelState : ObjectiveC.NSObject, Foundation.NSCopying, Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  required public init?(rawValue: NoorSDK.FloatingPanelState.RawValue)
  @objc public init(rawValue: NoorSDK.FloatingPanelState.RawValue, order: Swift.Int)
  final public let rawValue: NoorSDK.FloatingPanelState.RawValue
  final public let order: Swift.Int
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  @objc(Full) public static let full: NoorSDK.FloatingPanelState
  @objc(Half) public static let half: NoorSDK.FloatingPanelState
  @objc(Tip) public static let tip: NoorSDK.FloatingPanelState
  @objc(Hidden) public static let hidden: NoorSDK.FloatingPanelState
  @objc deinit
}
public protocol ConstraintConstantTarget {
}
extension CoreFoundation.CGPoint : NoorSDK.ConstraintConstantTarget {
}
extension CoreFoundation.CGSize : NoorSDK.ConstraintConstantTarget {
}
extension UIKit.UIEdgeInsets : NoorSDK.ConstraintConstantTarget {
}
@available(iOS 11.0, tvOS 11.0, *)
extension UIKit.NSDirectionalEdgeInsets : NoorSDK.ConstraintConstantTarget {
}
public struct SunnahTimes {
  public let middleOfTheNight: Foundation.Date
  public let lastThirdOfTheNight: Foundation.Date
  public init?(from prayerTimes: NoorSDK.PrayerTimes)
}
@available(iOS 11.0, tvOS 11.0, *)
public typealias ConstraintDirectionalInsets = UIKit.NSDirectionalEdgeInsets
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class SwiftMessagesSegue : UIKit.UIStoryboardSegue {
  public enum Layout {
    case topMessage
    case bottomMessage
    case topCard
    case topTab
    case bottomCard
    case bottomTab
    case centered
    public static func == (a: NoorSDK.SwiftMessagesSegue.Layout, b: NoorSDK.SwiftMessagesSegue.Layout) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Containment {
    case content
    case background
    case backgroundVertical
    public static func == (a: NoorSDK.SwiftMessagesSegue.Containment, b: NoorSDK.SwiftMessagesSegue.Containment) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public var presentationStyle: NoorSDK.SwiftMessages.PresentationStyle {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var dimMode: NoorSDK.SwiftMessages.DimMode {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var duration: NoorSDK.SwiftMessages.Duration {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var interactiveHide: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var eventListeners: [NoorSDK.SwiftMessages.EventListener] {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var overrideModalPresentationStyle: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var messageView: NoorSDK.BaseView
  @_Concurrency.MainActor(unsafe) public var containerView: NoorSDK.CornerRoundingView
  @_Concurrency.MainActor(unsafe) public var containment: NoorSDK.SwiftMessagesSegue.Containment
  @_Concurrency.MainActor(unsafe) public var keyboardTrackingView: NoorSDK.KeyboardTrackingView? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func perform()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(identifier: Swift.String?, source: UIKit.UIViewController, destination: UIKit.UIViewController)
  @objc deinit
}
extension NoorSDK.SwiftMessagesSegue {
  @_Concurrency.MainActor(unsafe) public func configure(layout: NoorSDK.SwiftMessagesSegue.Layout)
}
extension NoorSDK.SwiftMessagesSegue : UIKit.UIViewControllerTransitioningDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func animationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController, source: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @_Concurrency.MainActor(unsafe) @objc dynamic public func animationController(forDismissed dismissed: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
}
public enum SortMode {
  case ascending
  case descending
  public static func == (a: NoorSDK.SortMode, b: NoorSDK.SortMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SortType {
  case start(NoorSDK.SortMode)
  case end(NoorSDK.SortMode)
  case duration(NoorSDK.SortMode)
  case custom(((NoorSDK.TimePeriodProtocol, NoorSDK.TimePeriodProtocol) -> Swift.Bool))
}
@_inheritsConvenienceInitializers open class TimePeriodCollection : NoorSDK.TimePeriodGroup {
  public func append(_ period: NoorSDK.TimePeriodProtocol)
  public func append(_ periodArray: [NoorSDK.TimePeriodProtocol])
  public func append<C>(contentsOf newPeriods: C) where C : NoorSDK.TimePeriodGroup
  public func insert(_ newElement: NoorSDK.TimePeriodProtocol, at index: Swift.Int)
  public func remove(at: Swift.Int)
  public func removeAll()
  public func sort(by type: NoorSDK.SortType)
  public func sorted(by type: NoorSDK.SortType) -> NoorSDK.TimePeriodCollection
  public func periodsInside(period: NoorSDK.TimePeriodProtocol) -> NoorSDK.TimePeriodCollection
  public func periodsIntersected(by date: NoorSDK.DateInRegion) -> NoorSDK.TimePeriodCollection
  public func periodsIntersected(by period: NoorSDK.TimePeriodProtocol) -> NoorSDK.TimePeriodCollection
  public func periodsOverlappedBy(_ period: NoorSDK.TimePeriodProtocol) -> NoorSDK.TimePeriodCollection
  public func map(_ transform: (NoorSDK.TimePeriodProtocol) throws -> NoorSDK.TimePeriodProtocol) rethrows -> NoorSDK.TimePeriodCollection
  override public init(_ periods: [NoorSDK.TimePeriodProtocol]? = nil)
  @objc deinit
}
extension Swift.String {
  public func replaceFirst(of pattern: Swift.String, with replacement: Swift.String) -> Swift.String
}
extension Swift.String {
  public var digitLocalize: Swift.String {
    get
  }
  public var distanceLocalize: Swift.String {
    get
  }
}
extension UIKit.UIImage {
  public func buffer() -> CoreVideo.CVPixelBuffer?
  public func getAverageColor(inRect rect: CoreFoundation.CGRect? = nil) -> UIKit.UIColor
}
@available(iOSApplicationExtension, unavailable)
extension NoorSDK.IQKeyboardManager {
  @objc final public func reloadInputViews()
}
@available(iOSApplicationExtension, unavailable)
extension NoorSDK.IQKeyboardManager {
  @objc final public var canGoPrevious: Swift.Bool {
    @objc get
  }
  @objc final public var canGoNext: Swift.Bool {
    @objc get
  }
  @discardableResult
  @objc final public func goPrevious() -> Swift.Bool
  @discardableResult
  @objc final public func goNext() -> Swift.Bool
}
open class SwiftMessages {
  public enum PresentationStyle {
    case top
    case bottom
    case center
    case custom(animator: NoorSDK.Animator)
  }
  public enum PresentationContext {
    case automatic
    case window(windowLevel: UIKit.UIWindow.Level)
    case windowScene(NoorSDK.WindowScene, windowLevel: UIKit.UIWindow.Level)
    case viewController(UIKit.UIViewController)
    case view(UIKit.UIView)
  }
  public enum Duration {
    case automatic
    case forever
    case seconds(seconds: Foundation.TimeInterval)
    case indefinite(delay: Foundation.TimeInterval, minimum: Foundation.TimeInterval)
  }
  public enum DimMode {
    case none
    case gray(interactive: Swift.Bool)
    case color(color: UIKit.UIColor, interactive: Swift.Bool)
    case blur(style: UIKit.UIBlurEffect.Style, alpha: CoreFoundation.CGFloat, interactive: Swift.Bool)
    public var interactive: Swift.Bool {
      get
    }
    public var modal: Swift.Bool {
      get
    }
  }
  public enum Event {
    case willShow(UIKit.UIView)
    case didShow(UIKit.UIView)
    case willHide(UIKit.UIView)
    case didHide(UIKit.UIView)
    public var view: UIKit.UIView {
      get
    }
    public var id: Swift.String? {
      get
    }
  }
  public typealias EventListener = (NoorSDK.SwiftMessages.Event) -> Swift.Void
  public struct Config {
    public init()
    public var presentationStyle: NoorSDK.SwiftMessages.PresentationStyle
    public var presentationContext: NoorSDK.SwiftMessages.PresentationContext {
      get
      set
    }
    public var duration: NoorSDK.SwiftMessages.Duration
    public var dimMode: NoorSDK.SwiftMessages.DimMode
    public var interactiveHide: Swift.Bool
    public var preferredStatusBarStyle: UIKit.UIStatusBarStyle?
    public var prefersStatusBarHidden: Swift.Bool?
    public var shouldAutorotate: Swift.Bool
    public var ignoreDuplicates: Swift.Bool
    public var eventListeners: [NoorSDK.SwiftMessages.EventListener]
    public var becomeKeyWindow: Swift.Bool?
    public var dimModeAccessibilityLabel: Swift.String
    @available(iOS 13, *)
    public var overrideUserInterfaceStyle: UIKit.UIUserInterfaceStyle {
      get
      set
    }
    public var windowViewController: ((_ config: NoorSDK.SwiftMessages.Config) -> NoorSDK.WindowViewController)?
    public var keyboardTrackingView: NoorSDK.KeyboardTrackingView?
  }
  public init()
  open func show(config: NoorSDK.SwiftMessages.Config, view: UIKit.UIView)
  public func show(view: UIKit.UIView)
  public typealias ViewProvider = () -> UIKit.UIView
  open func show(config: NoorSDK.SwiftMessages.Config, viewProvider: @escaping NoorSDK.SwiftMessages.ViewProvider)
  public func show(viewProvider: @escaping NoorSDK.SwiftMessages.ViewProvider)
  open func hide(animated: Swift.Bool = true)
  open func hideAll()
  open func hide(id: Swift.String)
  open func hideCounted(id: Swift.String)
  public func count(id: Swift.String) -> Swift.Int
  public func set(count: Swift.Int, for id: Swift.String)
  public var defaultConfig: NoorSDK.SwiftMessages.Config
  open var pauseBetweenMessages: Swift.Double
  @objc deinit
}
extension NoorSDK.SwiftMessages {
  public func current<T>() -> T? where T : UIKit.UIView
  public func current<T>(id: Swift.String) -> T? where T : UIKit.UIView
  public func queued<T>(id: Swift.String) -> T? where T : UIKit.UIView
  public func currentOrQueued<T>(id: Swift.String) -> T? where T : UIKit.UIView
}
extension NoorSDK.SwiftMessages {
  public func hide(animator: NoorSDK.Animator)
  public func panStarted(animator: NoorSDK.Animator)
  public func panEnded(animator: NoorSDK.Animator)
}
extension NoorSDK.SwiftMessages {
  public class func viewFromNib<T>(_ filesOwner: Swift.AnyObject = NSNull.init()) throws -> T where T : UIKit.UIView
  public class func viewFromNib<T>(named name: Swift.String, filesOwner: Swift.AnyObject = NSNull.init()) throws -> T where T : UIKit.UIView
  public class func viewFromNib<T>(named name: Swift.String, bundle: Foundation.Bundle, filesOwner: Swift.AnyObject = NSNull.init()) throws -> T where T : UIKit.UIView
}
extension NoorSDK.SwiftMessages {
  public static var sharedInstance: NoorSDK.SwiftMessages {
    get
  }
  public static func show(viewProvider: @escaping NoorSDK.SwiftMessages.ViewProvider)
  public static func show(config: NoorSDK.SwiftMessages.Config, viewProvider: @escaping NoorSDK.SwiftMessages.ViewProvider)
  public static func show(view: UIKit.UIView)
  public static func show(config: NoorSDK.SwiftMessages.Config, view: UIKit.UIView)
  public static func hide(animated: Swift.Bool = true)
  public static func hideAll()
  public static func hide(id: Swift.String)
  public static func hideCounted(id: Swift.String)
  public static var defaultConfig: NoorSDK.SwiftMessages.Config {
    get
    set
  }
  public static var pauseBetweenMessages: Foundation.TimeInterval {
    get
    set
  }
  public static func current<T>(id: Swift.String) -> T? where T : UIKit.UIView
  public static func queued<T>(id: Swift.String) -> T? where T : UIKit.UIView
  public static func currentOrQueued<T>(id: Swift.String) -> T? where T : UIKit.UIView
  public static func count(id: Swift.String) -> Swift.Int
  public static func set(count: Swift.Int, for id: Swift.String)
}
public typealias ButtonTagInt = (_ tag: Swift.Int) -> ()
extension MapKit.MKMapView {
  @_Concurrency.MainActor(unsafe) public func clearPins()
  @_Concurrency.MainActor(unsafe) public func pins() -> [MapKit.MKAnnotation]
  @_Concurrency.MainActor(unsafe) public func dropPin(at location: CoreLocation.CLLocation, name: Swift.String)
  @_Concurrency.MainActor(unsafe) public func focusOn(location: CoreLocation.CLLocation, radius: Swift.Double)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class MessageView : NoorSDK.BaseView, NoorSDK.Identifiable, NoorSDK.AccessibleMessage {
  @_Concurrency.MainActor(unsafe) open var buttonTapHandler: ((_ button: UIKit.UIButton) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func point(inside point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) open var titleLabel: UIKit.UILabel?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) open var bodyLabel: UIKit.UILabel?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) open var iconImageView: UIKit.UIImageView?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) open var iconLabel: UIKit.UILabel?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) open var button: UIKit.UIButton? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var id: Swift.String {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var accessibilityPrefix: Swift.String?
  @_Concurrency.MainActor(unsafe) open var accessibilityMessage: Swift.String? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var accessibilityElement: ObjectiveC.NSObject? {
    get
  }
  @_Concurrency.MainActor(unsafe) open var additionalAccessibilityElements: [ObjectiveC.NSObject]? {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension NoorSDK.MessageView {
  public enum Layout : Swift.String {
    case messageView
    case cardView
    case tabView
    case statusLine
    case centeredView
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public static func viewFromNib<T>(layout: NoorSDK.MessageView.Layout, filesOwner: Swift.AnyObject = NSNull.init()) -> T where T : NoorSDK.MessageView
  @_Concurrency.MainActor(unsafe) public static func viewFromNib<T>(layout: NoorSDK.MessageView.Layout, bundle: Foundation.Bundle, filesOwner: Swift.AnyObject = NSNull.init()) -> T where T : NoorSDK.MessageView
}
extension NoorSDK.MessageView {
  @_Concurrency.MainActor(unsafe) public func configureIcon(withSize size: CoreFoundation.CGSize, contentMode: UIKit.UIView.ContentMode? = nil)
}
extension NoorSDK.MessageView {
  @_Concurrency.MainActor(unsafe) public func configureTheme(_ theme: NoorSDK.Theme, iconStyle: NoorSDK.IconStyle = .default)
  @_Concurrency.MainActor(unsafe) public func configureTheme(backgroundColor: UIKit.UIColor, foregroundColor: UIKit.UIColor, iconImage: UIKit.UIImage? = nil, iconText: Swift.String? = nil)
}
extension NoorSDK.MessageView {
  @_Concurrency.MainActor(unsafe) public func configureContent(body: Swift.String)
  @_Concurrency.MainActor(unsafe) public func configureContent(title: Swift.String, body: Swift.String)
  @_Concurrency.MainActor(unsafe) public func configureContent(title: Swift.String, body: Swift.String, iconImage: UIKit.UIImage)
  @_Concurrency.MainActor(unsafe) public func configureContent(title: Swift.String, body: Swift.String, iconText: Swift.String)
  @_Concurrency.MainActor(unsafe) public func configureContent(title: Swift.String?, body: Swift.String?, iconImage: UIKit.UIImage?, iconText: Swift.String?, buttonImage: UIKit.UIImage?, buttonTitle: Swift.String?, buttonTapHandler: ((_ button: UIKit.UIButton) -> Swift.Void)?)
}
extension Foundation.NSNotification.Name {
  public static var VGPlayerCacheManagerDidUpdateCache: Foundation.Notification.Name
  public static var VGPlayerCacheManagerDidFinishCache: Foundation.Notification.Name
  public static var VGPlayerCacheManagerDidCleanCache: Foundation.Notification.Name
}
@objc @_inheritsConvenienceInitializers open class VGPlayerCacheManager : ObjectiveC.NSObject {
  public static let VGPlayerCacheConfigurationKey: Swift.String
  public static let VGPlayerCacheErrorKey: Swift.String
  public static let VGPlayerCleanCacheKey: Swift.String
  public static var mediaCacheNotifyInterval: Swift.Double
  public static let shared: NoorSDK.VGPlayerCacheManager
  open var cacheConfig: NoorSDK.VGPlayerCacheConfiguration {
    get
  }
  @objc override dynamic public init()
  public static func cacheDirectory() -> Swift.String
  public static func cacheFilePath(for url: Foundation.URL) -> Swift.String
  public static func cacheConfiguration(forURL url: Foundation.URL) -> NoorSDK.VGPlayerCacheMediaConfiguration
  open func calculateCacheSize(completion handler: @escaping ((_ size: Swift.UInt) -> ()))
  open func cleanAllCache()
  open func cleanOldFiles(completion handler: (() -> ())? = nil)
  @objc deinit
}
@available(iOS 8.0, *)
public struct ConstraintLayoutSupportDSL : NoorSDK.ConstraintDSL {
  public var target: Swift.AnyObject? {
    get
  }
  public var top: NoorSDK.ConstraintItem {
    get
  }
  public var bottom: NoorSDK.ConstraintItem {
    get
  }
  public var height: NoorSDK.ConstraintItem {
    get
  }
}
public protocol Identifiable {
  var id: Swift.String { get }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class VGPlayerLoadingIndicator : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) open var lineWidth: CoreFoundation.CGFloat {
    get
    set(newValue)
  }
  @_Concurrency.MainActor(unsafe) open var strokeColor: UIKit.UIColor {
    get
    set(newValue)
  }
  @_Concurrency.MainActor(unsafe) open func startAnimating()
  @_Concurrency.MainActor(unsafe) open func stopAnimating()
  @objc deinit
}
public protocol ConstraintRelatableTarget {
}
extension Swift.Int : NoorSDK.ConstraintRelatableTarget {
}
extension Swift.UInt : NoorSDK.ConstraintRelatableTarget {
}
extension Swift.Float : NoorSDK.ConstraintRelatableTarget {
}
extension Swift.Double : NoorSDK.ConstraintRelatableTarget {
}
extension CoreFoundation.CGFloat : NoorSDK.ConstraintRelatableTarget {
}
extension CoreFoundation.CGSize : NoorSDK.ConstraintRelatableTarget {
}
extension CoreFoundation.CGPoint : NoorSDK.ConstraintRelatableTarget {
}
extension UIKit.UIEdgeInsets : NoorSDK.ConstraintRelatableTarget {
}
@available(iOS 11.0, tvOS 11.0, *)
extension UIKit.NSDirectionalEdgeInsets : NoorSDK.ConstraintRelatableTarget {
}
extension NoorSDK.ConstraintItem : NoorSDK.ConstraintRelatableTarget {
}
extension UIKit.UIView : NoorSDK.ConstraintRelatableTarget {
}
@available(iOS 9.0, macOS 10.11, *)
extension UIKit.UILayoutGuide : NoorSDK.ConstraintRelatableTarget {
}
@available(*, deprecated, message: "Use ConstraintMakerPrioritizable instead.")
public typealias ConstraintMakerPriortizable = NoorSDK.ConstraintMakerPrioritizable
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ConstraintMakerPrioritizable : NoorSDK.ConstraintMakerFinalizable {
  @discardableResult
  public func priority(_ amount: NoorSDK.ConstraintPriority) -> NoorSDK.ConstraintMakerFinalizable
  @discardableResult
  public func priority(_ amount: NoorSDK.ConstraintPriorityTarget) -> NoorSDK.ConstraintMakerFinalizable
  @available(*, deprecated, message: "Use priority(.required) instead.")
  @discardableResult
  public func priorityRequired() -> NoorSDK.ConstraintMakerFinalizable
  @available(*, deprecated, message: "Use priority(.high) instead.")
  @discardableResult
  public func priorityHigh() -> NoorSDK.ConstraintMakerFinalizable
  @available(*, deprecated, message: "Use priority(.medium) instead.")
  @discardableResult
  public func priorityMedium() -> NoorSDK.ConstraintMakerFinalizable
  @available(*, deprecated, message: "Use priority(.low) instead.")
  @discardableResult
  public func priorityLow() -> NoorSDK.ConstraintMakerFinalizable
  @objc deinit
}
extension NoorSDK.DateInRegion {
  public static func randomDates(count: Swift.Int, between initial: NoorSDK.DateInRegion, and final: NoorSDK.DateInRegion, region: NoorSDK.Region = SwiftDate.defaultRegion) -> [NoorSDK.DateInRegion]
  public static func randomDate(withinDaysBeforeToday days: Swift.Int, region: NoorSDK.Region = SwiftDate.defaultRegion) -> NoorSDK.DateInRegion
  public static func randomDate(region: NoorSDK.Region = SwiftDate.defaultRegion) -> NoorSDK.DateInRegion
  public static func randomDate(between initial: NoorSDK.DateInRegion, and final: NoorSDK.DateInRegion, region: NoorSDK.Region = SwiftDate.defaultRegion) -> NoorSDK.DateInRegion
  public static func oldestIn(list: [NoorSDK.DateInRegion]) -> NoorSDK.DateInRegion?
  public static func sortedByOldest(list: [NoorSDK.DateInRegion]) -> [NoorSDK.DateInRegion]
  public static func sortedByNewest(list: [NoorSDK.DateInRegion]) -> [NoorSDK.DateInRegion]
  public static func newestIn(list: [NoorSDK.DateInRegion]) -> NoorSDK.DateInRegion?
  public static func enumerateDates(from startDate: NoorSDK.DateInRegion, to endDate: NoorSDK.DateInRegion, increment: Foundation.DateComponents) -> [NoorSDK.DateInRegion]
  public static func enumerateDates(from startDate: NoorSDK.DateInRegion, to endDate: NoorSDK.DateInRegion, increment: ((NoorSDK.DateInRegion) -> (Foundation.DateComponents))) -> [NoorSDK.DateInRegion]
  public func dateAtStartOf(_ unit: Foundation.Calendar.Component) -> NoorSDK.DateInRegion
  public func dateAtStartOf(_ units: [Foundation.Calendar.Component]) -> NoorSDK.DateInRegion
  public func dateAtEndOf(_ unit: Foundation.Calendar.Component) -> NoorSDK.DateInRegion
  public func dateAtEndOf(_ units: [Foundation.Calendar.Component]) -> NoorSDK.DateInRegion
  public func dateBySet(_ components: [Foundation.Calendar.Component : Swift.Int?]) -> NoorSDK.DateInRegion?
  public func dateBySet(hour: Swift.Int?, min: Swift.Int?, secs: Swift.Int?, ms: Swift.Int? = nil, options: NoorSDK.TimeCalculationOptions = TimeCalculationOptions()) -> NoorSDK.DateInRegion?
  public func dateTruncated(at components: [Foundation.Calendar.Component]) -> NoorSDK.DateInRegion?
  public func dateTruncated(from component: Foundation.Calendar.Component) -> NoorSDK.DateInRegion?
  public func dateRoundedAt(_ style: NoorSDK.RoundDateMode) -> NoorSDK.DateInRegion
  public func dateByAdding(_ count: Swift.Int, _ component: Foundation.Calendar.Component) -> NoorSDK.DateInRegion
  public func dateAt(_ type: NoorSDK.DateRelatedType) -> NoorSDK.DateInRegion
  public func addingTimeInterval(_ interval: Foundation.TimeInterval) -> NoorSDK.DateInRegion
  public func convertTo(calendar: NoorSDK.CalendarConvertible? = nil, timezone: NoorSDK.ZoneConvertible? = nil, locale: NoorSDK.LocaleConvertible? = nil) -> NoorSDK.DateInRegion
  public static func datesForWeekday(_ weekday: NoorSDK.WeekDay, inMonth month: Swift.Int, ofYear year: Swift.Int, region: NoorSDK.Region = SwiftDate.defaultRegion) -> [NoorSDK.DateInRegion]
  public static func datesForWeekday(_ weekday: NoorSDK.WeekDay, from startDate: NoorSDK.DateInRegion, to endDate: NoorSDK.DateInRegion, region: NoorSDK.Region = SwiftDate.defaultRegion) -> [NoorSDK.DateInRegion]
}
extension NoorSDK.DateInRegion {
  public func dateAt(weekdayOrdinal: Swift.Int, weekday: NoorSDK.WeekDay, monthNumber: Swift.Int? = nil, yearNumber: Swift.Int? = nil) -> NoorSDK.DateInRegion
  public func dateAt(dayOfMonth: Swift.Int, monthNumber: Swift.Int? = nil, yearNumber: Swift.Int? = nil) -> NoorSDK.DateInRegion
  public func dateAfter(weeks count: Swift.Int, on weekday: NoorSDK.WeekDay) -> NoorSDK.DateInRegion
  public func nextWeekday(_ weekday: NoorSDK.WeekDay) -> NoorSDK.DateInRegion
  public func next(_ weekday: NoorSDK.WeekDay, withWeekOfMonth weekNumber: Swift.Int, andMonthNumber monthNumber: Swift.Int? = nil) -> NoorSDK.DateInRegion
  public func next(dayOfMonth: Swift.Int, monthOfYear: Swift.Int? = nil) -> NoorSDK.DateInRegion
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class LayoutConstraint : UIKit.NSLayoutConstraint {
  @_Concurrency.MainActor(unsafe) public var label: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public static func storyboardInstance() -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) public func showAlert(with title: Swift.String, message: Swift.String)
}
public enum VGPlayerMediaFormat : Swift.String {
  case unknown
  case mpeg4
  case m3u8
  case mov
  case m4v
  case error
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension UIKit.UIView {
  @available(*, deprecated, renamed: "snp.left")
  @_Concurrency.MainActor(unsafe) public var snp_left: NoorSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.top")
  @_Concurrency.MainActor(unsafe) public var snp_top: NoorSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.right")
  @_Concurrency.MainActor(unsafe) public var snp_right: NoorSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.bottom")
  @_Concurrency.MainActor(unsafe) public var snp_bottom: NoorSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.leading")
  @_Concurrency.MainActor(unsafe) public var snp_leading: NoorSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.trailing")
  @_Concurrency.MainActor(unsafe) public var snp_trailing: NoorSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.width")
  @_Concurrency.MainActor(unsafe) public var snp_width: NoorSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.height")
  @_Concurrency.MainActor(unsafe) public var snp_height: NoorSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.centerX")
  @_Concurrency.MainActor(unsafe) public var snp_centerX: NoorSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.centerY")
  @_Concurrency.MainActor(unsafe) public var snp_centerY: NoorSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.baseline")
  @_Concurrency.MainActor(unsafe) public var snp_baseline: NoorSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, macOS 10.11, *)
  @available(*, deprecated, renamed: "snp.lastBaseline")
  @_Concurrency.MainActor(unsafe) public var snp_lastBaseline: NoorSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, macOS 10.11, *)
  @available(iOS, deprecated, renamed: "snp.firstBaseline")
  @_Concurrency.MainActor(unsafe) public var snp_firstBaseline: NoorSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, renamed: "snp.leftMargin")
  @_Concurrency.MainActor(unsafe) public var snp_leftMargin: NoorSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, renamed: "snp.topMargin")
  @_Concurrency.MainActor(unsafe) public var snp_topMargin: NoorSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, renamed: "snp.rightMargin")
  @_Concurrency.MainActor(unsafe) public var snp_rightMargin: NoorSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, renamed: "snp.bottomMargin")
  @_Concurrency.MainActor(unsafe) public var snp_bottomMargin: NoorSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, renamed: "snp.leadingMargin")
  @_Concurrency.MainActor(unsafe) public var snp_leadingMargin: NoorSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, renamed: "snp.trailingMargin")
  @_Concurrency.MainActor(unsafe) public var snp_trailingMargin: NoorSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, renamed: "snp.centerXWithinMargins")
  @_Concurrency.MainActor(unsafe) public var snp_centerXWithinMargins: NoorSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, renamed: "snp.centerYWithinMargins")
  @_Concurrency.MainActor(unsafe) public var snp_centerYWithinMargins: NoorSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.edges")
  @_Concurrency.MainActor(unsafe) public var snp_edges: NoorSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.size")
  @_Concurrency.MainActor(unsafe) public var snp_size: NoorSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.center")
  @_Concurrency.MainActor(unsafe) public var snp_center: NoorSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, renamed: "snp.margins")
  @_Concurrency.MainActor(unsafe) public var snp_margins: NoorSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  @available(iOS, deprecated, renamed: "snp.centerWithinMargins")
  @_Concurrency.MainActor(unsafe) public var snp_centerWithinMargins: NoorSDK.ConstraintItem {
    get
  }
  @available(*, deprecated, renamed: "snp.prepareConstraints(_:)")
  @_Concurrency.MainActor(unsafe) public func snp_prepareConstraints(_ closure: (_ make: NoorSDK.ConstraintMaker) -> Swift.Void) -> [NoorSDK.Constraint]
  @available(*, deprecated, renamed: "snp.makeConstraints(_:)")
  @_Concurrency.MainActor(unsafe) public func snp_makeConstraints(_ closure: (_ make: NoorSDK.ConstraintMaker) -> Swift.Void)
  @available(*, deprecated, renamed: "snp.remakeConstraints(_:)")
  @_Concurrency.MainActor(unsafe) public func snp_remakeConstraints(_ closure: (_ make: NoorSDK.ConstraintMaker) -> Swift.Void)
  @available(*, deprecated, renamed: "snp.updateConstraints(_:)")
  @_Concurrency.MainActor(unsafe) public func snp_updateConstraints(_ closure: (_ make: NoorSDK.ConstraintMaker) -> Swift.Void)
  @available(*, deprecated, renamed: "snp.removeConstraints()")
  @_Concurrency.MainActor(unsafe) public func snp_removeConstraints()
  @_Concurrency.MainActor(unsafe) public var snp: NoorSDK.ConstraintViewDSL {
    get
  }
}
public struct VGPlayerDownloaderStatus {
  public func add(URL: Foundation.URL)
  public func remove(URL: Foundation.URL)
  public func contains(URL: Foundation.URL) -> Swift.Bool
  public func urls() -> Foundation.NSSet
}
public protocol VGPlayerDownloaderDelegate : AnyObject {
  func downloader(_ downloader: NoorSDK.VGPlayerDownloader, didReceiveResponse response: Foundation.URLResponse)
  func downloader(_ downloader: NoorSDK.VGPlayerDownloader, didReceiveData data: Foundation.Data)
  func downloader(_ downloader: NoorSDK.VGPlayerDownloader, didFinishedWithError error: Swift.Error?)
}
extension NoorSDK.VGPlayerDownloaderDelegate {
  public func downloader(_ downloader: NoorSDK.VGPlayerDownloader, didReceiveResponse response: Foundation.URLResponse)
  public func downloader(_ downloader: NoorSDK.VGPlayerDownloader, didReceiveData data: Foundation.Data)
  public func downloader(_ downloader: NoorSDK.VGPlayerDownloader, didFinishedWithError error: Swift.Error?)
}
@objc open class VGPlayerDownloader : ObjectiveC.NSObject {
  open var url: Foundation.URL {
    get
  }
  weak open var delegate: NoorSDK.VGPlayerDownloaderDelegate?
  open var cacheMedia: NoorSDK.VGPlayerCacheMedia?
  open var cacheMediaWorker: NoorSDK.VGPlayerCacheMediaWorker
  @objc deinit
  public init(url: Foundation.URL)
  open func dowloaderTask(_ fromOffset: Swift.Int64, _ length: Swift.Int, _ isEnd: Swift.Bool)
  open func dowloadFrameStartToEnd()
  open func cancel()
  open func invalidateAndCancel()
}
extension NoorSDK.VGPlayerDownloader : NoorSDK.VGPlayerDownloadActionWorkerDelegate {
  public func downloadActionWorker(_ actionWorker: NoorSDK.VGPlayerDownloadActionWorker, didFinishWithError error: Swift.Error?)
  public func downloadActionWorker(_ actionWorker: NoorSDK.VGPlayerDownloadActionWorker, didReceive data: Foundation.Data, isLocal: Swift.Bool)
  public func downloadActionWorker(_ actionWorker: NoorSDK.VGPlayerDownloadActionWorker, didReceive response: Foundation.URLResponse)
}
extension UIKit.UIButton {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
}
@objc @_hasMissingDesignatedInitializers public class TopBottomAnimation : ObjectiveC.NSObject, NoorSDK.Animator {
  public enum Style {
    case top
    case bottom
    public static func == (a: NoorSDK.TopBottomAnimation.Style, b: NoorSDK.TopBottomAnimation.Style) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  weak public var delegate: NoorSDK.AnimationDelegate?
  final public let style: NoorSDK.TopBottomAnimation.Style
  public var showDuration: Swift.Double
  public var hideDuration: Swift.Double
  public var springDamping: CoreFoundation.CGFloat
  public var closeSpeedThreshold: CoreFoundation.CGFloat
  public var closePercentThreshold: CoreFoundation.CGFloat
  public var closeAbsoluteThreshold: CoreFoundation.CGFloat
  public var panGestureRecognizer: UIKit.UIPanGestureRecognizer {
    get
  }
  public init(style: NoorSDK.TopBottomAnimation.Style)
  public func show(context: NoorSDK.AnimationContext, completion: @escaping NoorSDK.AnimationCompletion)
  public func hide(context: NoorSDK.AnimationContext, completion: @escaping NoorSDK.AnimationCompletion)
  @objc public func adjustMargins()
  @objc deinit
}
public protocol VGPlayerDownloadActionWorkerDelegate : ObjectiveC.NSObjectProtocol {
  func downloadActionWorker(_ actionWorker: NoorSDK.VGPlayerDownloadActionWorker, didReceive response: Foundation.URLResponse)
  func downloadActionWorker(_ actionWorker: NoorSDK.VGPlayerDownloadActionWorker, didReceive data: Foundation.Data, isLocal: Swift.Bool)
  func downloadActionWorker(_ actionWorker: NoorSDK.VGPlayerDownloadActionWorker, didFinishWithError error: Swift.Error?)
}
@objc open class VGPlayerDownloadActionWorker : ObjectiveC.NSObject {
  open var actions: [NoorSDK.VGPlayerCacheAction] {
    get
  }
  open var url: Foundation.URL {
    get
  }
  open var cacheMediaWorker: NoorSDK.VGPlayerCacheMediaWorker {
    get
  }
  open var session: Foundation.URLSession? {
    get
  }
  open var task: Foundation.URLSessionDataTask? {
    get
  }
  open var downloadURLSessionManager: NoorSDK.VGPlayerDownloadURLSessionManager? {
    get
  }
  open var startOffset: Swift.Int {
    get
  }
  weak open var delegate: NoorSDK.VGPlayerDownloadActionWorkerDelegate?
  public init(actions: [NoorSDK.VGPlayerCacheAction], url: Foundation.URL, cacheMediaWorker: NoorSDK.VGPlayerCacheMediaWorker)
  @objc deinit
  open func start()
  open func cancel()
}
extension NoorSDK.VGPlayerDownloadActionWorker : NoorSDK.VGPlayerDownloadeURLSessionManagerDelegate {
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive response: Foundation.URLResponse, completionHandler: @escaping (Foundation.URLSession.ResponseDisposition) -> Swift.Void)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class BaseView : UIKit.UIView, NoorSDK.BackgroundViewable, NoorSDK.MarginAdjustable {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak open var backgroundView: UIKit.UIView! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) open func installContentView(_ contentView: UIKit.UIView, insets: UIKit.UIEdgeInsets = UIEdgeInsets.zero)
  @_Concurrency.MainActor(unsafe) open func installBackgroundView(_ backgroundView: UIKit.UIView, insets: UIKit.UIEdgeInsets = UIEdgeInsets.zero)
  @_Concurrency.MainActor(unsafe) open func installBackgroundVerticalView(_ backgroundView: UIKit.UIView, insets: UIKit.UIEdgeInsets = UIEdgeInsets.zero)
  @_Concurrency.MainActor(unsafe) open var tapHandler: ((_ view: NoorSDK.BaseView) -> Swift.Void)? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func point(inside point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public var layoutMarginAdditions: UIKit.UIEdgeInsets {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var respectSafeArea: Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var topLayoutMarginAddition: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var leftLayoutMarginAddition: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var bottomLayoutMarginAddition: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var rightLayoutMarginAddition: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var collapseLayoutMarginAdditions: Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var bounceAnimationOffset: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) open var backgroundHeight: CoreFoundation.CGFloat? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func updateConstraints()
  @objc deinit
}
extension NoorSDK.BaseView {
  @_Concurrency.MainActor(unsafe) open func configureDropShadow()
  @_Concurrency.MainActor(unsafe) open func configureNoDropShadow()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
}
extension NoorSDK.BaseView {
  @_Concurrency.MainActor(unsafe) public func configureBackgroundView(sideMargin: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) public func configureBackgroundView(width: CoreFoundation.CGFloat)
}
extension UIKit.UIColor {
  convenience public init(hex: Swift.String)
  public func adjustingBrightness(byMultiple multiple: CoreFoundation.CGFloat) -> UIKit.UIColor
}
public enum Prayer : Swift.CaseIterable {
  case fajr
  case sunrise
  case dhuhr
  case asr
  case maghrib
  case isha
  public static func == (a: NoorSDK.Prayer, b: NoorSDK.Prayer) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [NoorSDK.Prayer]
  public static var allCases: [NoorSDK.Prayer] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public enum CalculationMethod : Swift.String, Swift.Codable, Swift.CaseIterable {
  case muslimWorldLeague
  case egyptian
  case karachi
  case ummAlQura
  case dubai
  case moonsightingCommittee
  case northAmerica
  case kuwait
  case qatar
  case singapore
  case tehran
  case turkey
  case other
  public var params: NoorSDK.CalculationParameters {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NoorSDK.CalculationMethod]
  public typealias RawValue = Swift.String
  public static var allCases: [NoorSDK.CalculationMethod] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct VGPlayerError : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension Foundation.Date : NoorSDK.DateRepresentable {
  public var date: Foundation.Date {
    get
  }
  public var region: NoorSDK.Region {
    get
  }
  public var customFormatter: Foundation.DateFormatter? {
    get
    set
  }
  public var dateComponents: Foundation.DateComponents {
    get
  }
  public init?(_ string: Swift.String, format: Swift.String? = nil, region: NoorSDK.Region = SwiftDate.defaultRegion)
  public init(seconds interval: Foundation.TimeInterval, region: NoorSDK.Region = Region.UTC)
  public init(milliseconds interval: Swift.Int, region: NoorSDK.Region = Region.UTC)
  public init?(components configuration: ((inout Foundation.DateComponents) -> Swift.Void), region: NoorSDK.Region? = SwiftDate.defaultRegion)
  public init?(components: Foundation.DateComponents, region: NoorSDK.Region?)
  public init(year: Swift.Int, month: Swift.Int, day: Swift.Int, hour: Swift.Int, minute: Swift.Int, second: Swift.Int = 0, nanosecond: Swift.Int = 0, region: NoorSDK.Region = SwiftDate.defaultRegion)
  public func inDefaultRegion() -> NoorSDK.DateInRegion
  public func `in`(region: NoorSDK.Region) -> NoorSDK.DateInRegion
  public static func past() -> Foundation.Date
  public static func future() -> Foundation.Date
}
public protocol VGPlayerResourceLoaderDelegate : AnyObject {
  func resourceLoader(_ resourceLoader: NoorSDK.VGPlayerResourceLoader, didFailWithError error: Swift.Error?)
}
@objc open class VGPlayerResourceLoader : ObjectiveC.NSObject {
  open var url: Foundation.URL {
    get
  }
  weak open var delegate: NoorSDK.VGPlayerResourceLoaderDelegate?
  @objc deinit
  public init(url: Foundation.URL)
  open func add(_ request: AVFoundation.AVAssetResourceLoadingRequest)
  open func remove(_ request: AVFoundation.AVAssetResourceLoadingRequest)
  open func cancel()
}
extension NoorSDK.VGPlayerResourceLoader : NoorSDK.VGPlayerResourceLoadingRequestDelegate {
  public func resourceLoadingRequest(_ resourceLoadingRequest: NoorSDK.VGPlayerResourceLoadingRequest, didCompleteWithError error: Swift.Error?)
}
public struct CalculationParameters : Swift.Codable, Swift.Equatable {
  public var method: NoorSDK.CalculationMethod
  public var fajrAngle: Swift.Double
  public var maghribAngle: Swift.Double?
  public var ishaAngle: Swift.Double
  public var ishaInterval: Swift.Int
  public var madhab: NoorSDK.Madhab
  public var highLatitudeRule: NoorSDK.HighLatitudeRule?
  public var adjustments: NoorSDK.PrayerAdjustments
  public var rounding: NoorSDK.Rounding
  public var shafaq: NoorSDK.Shafaq
  public static func == (a: NoorSDK.CalculationParameters, b: NoorSDK.CalculationParameters) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers final public class RevocationTrustEvaluator {
  public struct Options : Swift.OptionSet {
    public let rawValue: CoreFoundation.CFOptionFlags
    public init(rawValue: CoreFoundation.CFOptionFlags)
    public typealias ArrayLiteralElement = NoorSDK.RevocationTrustEvaluator.Options
    public typealias Element = NoorSDK.RevocationTrustEvaluator.Options
    public typealias RawValue = CoreFoundation.CFOptionFlags
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PhysicsAnimation : ObjectiveC.NSObject, NoorSDK.Animator {
  public enum Placement {
    case top
    case center
    case bottom
    public static func == (a: NoorSDK.PhysicsAnimation.Placement, b: NoorSDK.PhysicsAnimation.Placement) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  open var placement: NoorSDK.PhysicsAnimation.Placement
  open var showDuration: Swift.Double
  open var hideDuration: Swift.Double
  public var panHandler: NoorSDK.PhysicsPanHandler
  weak public var delegate: NoorSDK.AnimationDelegate?
  @objc override dynamic public init()
  public func show(context: NoorSDK.AnimationContext, completion: @escaping NoorSDK.AnimationCompletion)
  public func hide(context: NoorSDK.AnimationContext, completion: @escaping NoorSDK.AnimationCompletion)
  @objc public func adjustMargins()
  @objc deinit
}
@available(*, deprecated)
final public class ActivityData {
  public init(size: CoreFoundation.CGSize? = nil, message: Swift.String? = nil, messageFont: UIKit.UIFont? = nil, messageSpacing: CoreFoundation.CGFloat? = nil, type: NoorSDK.NVActivityIndicatorType? = nil, color: UIKit.UIColor? = nil, padding: CoreFoundation.CGFloat? = nil, displayTimeThreshold: Swift.Int? = nil, minimumDisplayTime: Swift.Int? = nil, backgroundColor: UIKit.UIColor? = nil, textColor: UIKit.UIColor? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(*, deprecated)
final public class NVActivityIndicatorPresenter {
  public static let sharedInstance: NoorSDK.NVActivityIndicatorPresenter
  final public var isAnimating: Swift.Bool {
    get
  }
  final public func startAnimating(_ data: NoorSDK.ActivityData, _ fadeInAnimation: NoorSDK.FadeInAnimation? = nil)
  final public func stopAnimating(_ fadeOutAnimation: NoorSDK.FadeOutAnimation? = nil)
  final public func setMessage(_ message: Swift.String?)
  @objc deinit
}
extension Swift.Double {
  public struct ComponentsFormatterOptions {
    public var allowsFractionalUnits: Swift.Bool?
    public var allowedUnits: Foundation.NSCalendar.Unit?
    public var collapsesLargestUnit: Swift.Bool?
    public var maximumUnitCount: Swift.Int?
    public var zeroFormattingBehavior: Foundation.DateComponentsFormatter.ZeroFormattingBehavior?
    public var unitsStyle: Foundation.DateComponentsFormatter.UnitsStyle?
    public var locale: NoorSDK.LocaleConvertible? {
      get
      set
    }
    public var calendar: Foundation.Calendar
    public func apply(toFormatter formatter: Foundation.DateComponentsFormatter)
    public init()
  }
  public func toString(options callback: ((inout Swift.Double.ComponentsFormatterOptions) -> Swift.Void)? = nil) -> Swift.String
  public func toIntervalString(options callback: ((inout Swift.Double.ComponentsFormatterOptions) -> Swift.Void)? = nil) -> Swift.String
  public func toString(options: Swift.Double.ComponentsFormatterOptions) -> Swift.String
  public func toClock(zero: Foundation.DateComponentsFormatter.ZeroFormattingBehavior = [.pad, .dropLeading]) -> Swift.String
  public func toUnits(_ units: Swift.Set<Foundation.Calendar.Component>, to refDate: NoorSDK.DateInRegion? = nil) -> [Foundation.Calendar.Component : Swift.Int]
  public func toUnit(_ component: Foundation.Calendar.Component, to refDate: NoorSDK.DateInRegion? = nil) -> Swift.Int?
}
open class TimePeriodGroup : Swift.Sequence, Swift.Equatable {
  public var start: NoorSDK.DateInRegion? {
    get
  }
  public var end: NoorSDK.DateInRegion? {
    get
  }
  public var duration: Foundation.TimeInterval? {
    get
  }
  public var count: Swift.Int {
    get
  }
  public static func == (lhs: NoorSDK.TimePeriodGroup, rhs: NoorSDK.TimePeriodGroup) -> Swift.Bool
  public init(_ periods: [NoorSDK.TimePeriodProtocol]? = nil)
  public func makeIterator() -> Swift.IndexingIterator<[NoorSDK.TimePeriodProtocol]>
  public func map<T>(_ transform: (NoorSDK.TimePeriodProtocol) throws -> T) rethrows -> [T]
  public func filter(_ isIncluded: (NoorSDK.TimePeriodProtocol) throws -> Swift.Bool) rethrows -> [NoorSDK.TimePeriodProtocol]
  public func forEach(_ body: (NoorSDK.TimePeriodProtocol) throws -> Swift.Void) rethrows
  public func split(maxSplits: Swift.Int, omittingEmptySubsequences: Swift.Bool, whereSeparator isSeparator: (NoorSDK.TimePeriodProtocol) throws -> Swift.Bool) rethrows -> [Swift.AnySequence<NoorSDK.TimePeriodProtocol>]
  public subscript(index: Swift.Int) -> NoorSDK.TimePeriodProtocol {
    get
  }
  public typealias Element = Swift.IndexingIterator<[NoorSDK.TimePeriodProtocol]>.Element
  public typealias Iterator = Swift.IndexingIterator<[NoorSDK.TimePeriodProtocol]>
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class WindowViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) public init(config: NoorSDK.SwiftMessages.Config)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @objc deinit
}
public typealias ConstraintInterfaceLayoutDirection = UIKit.UIUserInterfaceLayoutDirection
public struct ConstraintConfig {
  public static var interfaceLayoutDirection: NoorSDK.ConstraintInterfaceLayoutDirection
}
public protocol ZoneConvertible {
  func toTimezone() -> Foundation.TimeZone
}
extension Foundation.TimeZone : NoorSDK.ZoneConvertible {
  public func toTimezone() -> Foundation.TimeZone
}
public enum Zones : Swift.String, NoorSDK.ZoneConvertible {
  case current
  case autoUpdating
  case africaAbidjan
  case africaAccra
  case africaAddisAbaba
  case africaAlgiers
  case africaAsmara
  case africaBamako
  case africaBangui
  case africaBanjul
  case africaBissau
  case africaBlantyre
  case africaBrazzaville
  case africaBujumbura
  case africaCairo
  case africaCasablanca
  case africaCeuta
  case africaConakry
  case africaDakar
  case africaDarEsSalaam
  case africaDjibouti
  case africaDouala
  case africaElAaiun
  case africaFreetown
  case africaGaborone
  case africaHarare
  case africaJohannesburg
  case africaJuba
  case africaKampala
  case africaKhartoum
  case fricaKigali
  case africaKinshasa
  case africaLagos
  case africaLibreville
  case africaLome
  case africaLuanda
  case africaLubumbashi
  case africaLusaka
  case africaMalabo
  case africaMaputo
  case africaMaseru
  case africaMbabane
  case africaMogadishu
  case africaMonrovia
  case africaNairobi
  case africaNdjamena
  case africaNiamey
  case africaNouakchott
  case africaOuagadougou
  case africaPortoNovo
  case africaSaoTome
  case africaTripoli
  case africaTunis
  case africaWindhoek
  case americaAdak
  case americaAnchorage
  case americaAnguilla
  case americaAntigua
  case americaAraguaina
  case americaArgentinaBuenosAires
  case americaArgentinaCatamarca
  case americaArgentinaCordoba
  case americaArgentinaJujuy
  case americaArgentinaLaRioja
  case americaArgentinaMendoza
  case americaArgentinaRioGallegos
  case americaArgentinaSalta
  case americaArgentinaSanJuan
  case americaArgentinaSanLuis
  case americaArgentinaTucuman
  case americaArgentinaUshuaia
  case americaAruba
  case americaAsuncion
  case americaAtikokan
  case americaBahia
  case americaBahiaBanderas
  case americaBarbados
  case americaBelem
  case americaBelize
  case americaBlancSablon
  case americaBoaVista
  case americaBogota
  case americaBoise
  case americaCambridgeBay
  case americaCampoGrande
  case americaCancun
  case americaCaracas
  case americaCayenne
  case americaCayman
  case americaChicago
  case americaChihuahua
  case americaCostaRica
  case americaCreston
  case americaCuiaba
  case americaCuracao
  case americaDanmarkshavn
  case americaDawson
  case americaDawsonCreek
  case americaDenver
  case americaDetroit
  case americaDominica
  case americaEdmonton
  case americaEirunepe
  case americaElSalvador
  case americaFortNelson
  case americaFortaleza
  case americaGlaceBay
  case americaGodthab
  case americaGooseBay
  case americaGrandTurk
  case americaGrenada
  case americaGuadeloupe
  case americaGuatemala
  case americaGuayaquil
  case americaGuyana
  case americaHalifax
  case americaHavana
  case americaHermosillo
  case americaIndianaIndianapolis
  case americaIndianaKnox
  case americaIndianaMarengo
  case americaIndianaPetersburg
  case americaIndianaTellCity
  case americaIndianaVevay
  case americaIndianaVincennes
  case americaIndianaWinamac
  case americaInuvik
  case americaIqaluit
  case americaJamaica
  case americaJuneau
  case americaKentuckyLouisville
  case americaKentuckyMonticello
  case americaKralendijk
  case americaLaPaz
  case americaLima
  case americaLosAngeles
  case americaLowerPrinces
  case americaMaceio
  case americaManagua
  case americaManaus
  case americaMarigot
  case americaMartinique
  case americaMatamoros
  case americaMazatlan
  case americaMenominee
  case americaMerida
  case americaMetlakatla
  case americaMexicoCity
  case americaMiquelon
  case americaMoncton
  case americaMonterrey
  case americaMontevideo
  case americaMontreal
  case americaMontserrat
  case americaNassau
  case americaNewYork
  case americaNipigon
  case americaNome
  case americaNoronha
  case americaNorthDakotaBeulah
  case americaNorthDakotaCenter
  case americaNorthDakotaNewSalem
  case americaOjinaga
  case americaPanama
  case americaPangnirtung
  case americaParamaribo
  case americaPhoenix
  case americaPortAuPrince
  case americaPortOfSpain
  case americaPortoVelho
  case americaPuertoRico
  case americaRainyRiver
  case americaRankinInlet
  case americaRecife
  case americaRegina
  case americaResolute
  case americaRioBranco
  case americaSantaIsabel
  case americaSantarem
  case americaSantiago
  case americaSantoDomingo
  case americaSaoPaulo
  case americaScoresbysund
  case americaShiprock
  case americaSitka
  case americaStBarthelemy
  case americaStJohns
  case americaStKitts
  case americaStLucia
  case americaStThomas
  case americaStVincent
  case americaSwiftCurrent
  case americaTegucigalpa
  case americaThule
  case americaThunderBay
  case americaTijuana
  case americaToronto
  case americaTortola
  case americaVancouver
  case americaWhitehorse
  case americaWinnipeg
  case americaYakutat
  case americaYellowknife
  case antarcticaCasey
  case antarcticaDavis
  case antarcticaDumontdurville
  case antarcticaMacquarie
  case antarcticaMawson
  case antarcticaMcmurdo
  case antarcticaPalmer
  case antarcticaRothera
  case antarcticaSouthPole
  case antarcticaSyowa
  case antarcticaTroll
  case antarcticaVostok
  case arcticLongyearbyen
  case asiaAden
  case asiaAlmaty
  case asiaAmman
  case asiaAnadyr
  case asiaAqtau
  case asiaAqtobe
  case asiaAshgabat
  case asiaBaghdad
  case asiaBahrain
  case asiaBaku
  case asiaBangkok
  case asiaBeirut
  case asiaBishkek
  case asiaBrunei
  case asiaChita
  case asiaChoibalsan
  case asiaChongqing
  case asiaColombo
  case asiaDamascus
  case asiaDhaka
  case asiaDili
  case asiaDubai
  case asiaDushanbe
  case asiaGaza
  case asiaHarbin
  case asiaHebron
  case asiaHoChiMinh
  case asiaSaigon
  case asiaHongKong
  case asiaHovd
  case asiaIrkutsk
  case asiaJakarta
  case asiaJayapura
  case asiaJerusalem
  case asiaKabul
  case asiaKamchatka
  case asiaKarachi
  case asiaKashgar
  case asiaKathmandu
  case asiaKatmandu
  case asiaKhandyga
  case asiaKolkata
  case asiaKrasnoyarsk
  case asiaKualaLumpur
  case asiaKuching
  case asiaKuwait
  case asiaMacau
  case asiaMagadan
  case asiaMakassar
  case asiaManila
  case asiaMuscat
  case asiaNicosia
  case asiaNovokuznetsk
  case asiaNovosibirsk
  case asiaOmsk
  case asiaOral
  case asiaPhnomPenh
  case asiaPontianak
  case asiaPyongyang
  case asiaQatar
  case asiaQyzylorda
  case asiaRangoon
  case asiaRiyadh
  case asiaSakhalin
  case asiaSamarkand
  case asiaSeoul
  case asiaShanghai
  case asiaSingapore
  case asiaSrednekolymsk
  case asiaTaipei
  case asiaTashkent
  case asiaTbilisi
  case asiaTehran
  case asiaThimphu
  case asiaTokyo
  case asiaUlaanbaatar
  case asiaUrumqi
  case asiaUstNera
  case asiaVientiane
  case asiaVladivostok
  case asiaYakutsk
  case asiaYekaterinburg
  case asiaYerevan
  case atlanticAzores
  case atlanticBermuda
  case atlanticCanary
  case atlanticCapeVerde
  case atlanticFaroe
  case atlanticMadeira
  case atlanticReykjavik
  case atlanticSouthGeorgia
  case atlanticStHelena
  case atlanticStanley
  case australiaAdelaide
  case australiaBrisbane
  case australiaBrokenHill
  case australiaCurrie
  case australiaDarwin
  case australiaEucla
  case australiaHobart
  case australiaLindeman
  case australiaLordHowe
  case australiaMelbourne
  case australiaPerth
  case australiaSydney
  case europeAmsterdam
  case europeAndorra
  case europeAthens
  case europeBelgrade
  case europeBerlin
  case europeBratislava
  case europeBrussels
  case europeBucharest
  case europeBudapest
  case europeBusingen
  case europeChisinau
  case europeCopenhagen
  case europeDublin
  case europeGibraltar
  case europeGuernsey
  case europeHelsinki
  case europeIsleOfMan
  case europeIstanbul
  case europeJersey
  case europeKaliningrad
  case europeKiev
  case europeLisbon
  case europeLjubljana
  case europeLondon
  case europeLuxembourg
  case europeMadrid
  case europeMalta
  case europeMariehamn
  case europeMinsk
  case europeMonaco
  case europeMoscow
  case europeOslo
  case europeParis
  case europePodgorica
  case europePrague
  case europeRiga
  case europeRome
  case europeSamara
  case europeSanMarino
  case europeSarajevo
  case europeSimferopol
  case europeSkopje
  case europeSofia
  case europeStockholm
  case europeTallinn
  case europeTirane
  case europeUzhgorod
  case europeVaduz
  case europeVatican
  case europeVienna
  case europeVilnius
  case europeVolgograd
  case europeWarsaw
  case europeZagreb
  case europeZaporozhye
  case europeZurich
  case gmt
  case indianAntananarivo
  case indianChagos
  case indianChristmas
  case indianCocos
  case indianComoro
  case indianKerguelen
  case indianMahe
  case indianMaldives
  case indianMauritius
  case indianMayotte
  case indianReunion
  case pacificApia
  case pacificAuckland
  case pacificBougainville
  case pacificChatham
  case pacificChuuk
  case pacificEaster
  case pacificEfate
  case pacificEnderbury
  case pacificFakaofo
  case pacificFiji
  case pacificFunafuti
  case pacificGalapagos
  case pacificGambier
  case pacificGuadalcanal
  case pacificGuam
  case pacificHonolulu
  case pacificJohnston
  case pacificKiritimati
  case pacificKosrae
  case pacificKwajalein
  case pacificMajuro
  case pacificMarquesas
  case pacificMidway
  case pacificNauru
  case pacificNiue
  case pacificNorfolk
  case pacificNoumea
  case pacificPagoPago
  case pacificPalau
  case pacificPitcairn
  case pacificPohnpei
  case pacificPonape
  case pacificPortMoresby
  case pacificRarotonga
  case pacificSaipan
  case pacificTahiti
  case pacificTarawa
  case pacificTongatapu
  case pacificTruk
  case pacificWake
  case pacificWallis
  public func toTimezone() -> Foundation.TimeZone
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct DateInRegion : NoorSDK.DateRepresentable, Swift.Decodable, Swift.Encodable, Swift.CustomStringConvertible, Swift.Comparable, Swift.Hashable {
  public var date: Foundation.Date {
    get
  }
  public let region: NoorSDK.Region
  public var customFormatter: Foundation.DateFormatter?
  public var dateComponents: Foundation.DateComponents {
    get
  }
  public var description: Swift.String {
    get
  }
  public var timeIntervalSince1970: Foundation.TimeInterval {
    get
  }
  public init(_ date: Foundation.Date = Date(), region: NoorSDK.Region = SwiftDate.defaultRegion)
  public init?(_ string: Swift.String, format: Swift.String? = nil, region: NoorSDK.Region = SwiftDate.defaultRegion)
  public init?(_ string: Swift.String, formats: [Swift.String]?, region: NoorSDK.Region = SwiftDate.defaultRegion)
  public init(seconds interval: Foundation.TimeInterval, region: NoorSDK.Region = Region.UTC)
  public init(milliseconds interval: Swift.Int, region: NoorSDK.Region = Region.UTC)
  public init?(components configuration: ((inout Foundation.DateComponents) -> Swift.Void), region: NoorSDK.Region? = SwiftDate.defaultRegion)
  public init?(components: Foundation.DateComponents, region: NoorSDK.Region?)
  public init(year: Swift.Int, month: Swift.Int, day: Swift.Int, hour: Swift.Int = 0, minute: Swift.Int = 0, second: Swift.Int = 0, nanosecond: Swift.Int = 0, region: NoorSDK.Region = SwiftDate.defaultRegion)
  public static func past() -> NoorSDK.DateInRegion
  public static func future() -> NoorSDK.DateInRegion
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers open class TimePeriodChain : NoorSDK.TimePeriodGroup {
  public func append(_ period: NoorSDK.TimePeriodProtocol)
  public func append<G>(contentsOf group: G) where G : NoorSDK.TimePeriodGroup
  public func insert(_ period: NoorSDK.TimePeriodProtocol, at index: Swift.Int)
  public func remove(at index: Swift.Int)
  public func removeAll()
  public func shift(by duration: Foundation.TimeInterval)
  override public func map<T>(_ transform: (NoorSDK.TimePeriodProtocol) throws -> T) rethrows -> [T]
  override public func filter(_ isIncluded: (NoorSDK.TimePeriodProtocol) throws -> Swift.Bool) rethrows -> [NoorSDK.TimePeriodProtocol]
  public func pop() -> NoorSDK.TimePeriodProtocol?
  override public init(_ periods: [NoorSDK.TimePeriodProtocol]? = nil)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOSApplicationExtension, unavailable)
@objc final public class IQKeyboardManager : ObjectiveC.NSObject {
  @objc public static let shared: NoorSDK.IQKeyboardManager
  @objc final public var enable: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var keyboardDistanceFromTextField: CoreFoundation.CGFloat
  @objc final public var enableAutoToolbar: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var toolbarManageBehaviour: NoorSDK.IQAutoToolbarManageBehaviour
  @objc final public var shouldToolbarUsesTextFieldTintColor: Swift.Bool
  @objc final public var toolbarTintColor: UIKit.UIColor?
  @objc final public var toolbarBarTintColor: UIKit.UIColor?
  @objc final public var previousNextDisplayMode: NoorSDK.IQPreviousNextDisplayMode
  @objc final public var toolbarPreviousBarButtonItemImage: UIKit.UIImage?
  @objc final public var toolbarNextBarButtonItemImage: UIKit.UIImage?
  @objc final public var toolbarDoneBarButtonItemImage: UIKit.UIImage?
  @objc final public var toolbarPreviousBarButtonItemText: Swift.String?
  @objc final public var toolbarPreviousBarButtonItemAccessibilityLabel: Swift.String?
  @objc final public var toolbarNextBarButtonItemText: Swift.String?
  @objc final public var toolbarNextBarButtonItemAccessibilityLabel: Swift.String?
  @objc final public var toolbarDoneBarButtonItemText: Swift.String?
  @objc final public var toolbarDoneBarButtonItemAccessibilityLabel: Swift.String?
  @objc final public var shouldShowToolbarPlaceholder: Swift.Bool
  @objc final public var placeholderFont: UIKit.UIFont?
  @objc final public var placeholderColor: UIKit.UIColor?
  @objc final public var placeholderButtonColor: UIKit.UIColor?
  @objc final public var overrideKeyboardAppearance: Swift.Bool
  @objc final public var keyboardAppearance: UIKit.UIKeyboardAppearance
  @objc final public var shouldResignOnTouchOutside: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var resignFirstResponderGesture: UIKit.UITapGestureRecognizer {
    @objc get
    @objc set
  }
  @discardableResult
  @objc final public func resignFirstResponder() -> Swift.Bool
  @objc final public var shouldPlayInputClicks: Swift.Bool
  @objc final public var layoutIfNeededOnUpdate: Swift.Bool
  @objc final public var disabledDistanceHandlingClasses: [UIKit.UIViewController.Type]
  @objc final public var enabledDistanceHandlingClasses: [UIKit.UIViewController.Type]
  @objc final public var disabledToolbarClasses: [UIKit.UIViewController.Type]
  @objc final public var enabledToolbarClasses: [UIKit.UIViewController.Type]
  @objc final public var toolbarPreviousNextAllowedClasses: [UIKit.UIView.Type]
  @objc final public var disabledTouchResignedClasses: [UIKit.UIViewController.Type]
  @objc final public var enabledTouchResignedClasses: [UIKit.UIViewController.Type]
  @objc final public var touchResignedGestureIgnoreClasses: [UIKit.UIView.Type]
  @objc final public func registerTextFieldViewClass(_ aClass: UIKit.UIView.Type, didBeginEditingNotificationName: Swift.String, didEndEditingNotificationName: Swift.String)
  @objc final public func unregisterTextFieldViewClass(_ aClass: UIKit.UIView.Type, didBeginEditingNotificationName: Swift.String, didEndEditingNotificationName: Swift.String)
  @objc deinit
  @objc final public func reloadLayoutIfNeeded()
}
@available(iOSApplicationExtension, unavailable)
extension NoorSDK.IQKeyboardManager : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
}
@available(iOS 8.0, *)
public typealias ConstraintLayoutSupport = UIKit.UILayoutSupport
@_hasMissingDesignatedInitializers public class ConstraintMakerFinalizable {
  @discardableResult
  public func labeled(_ label: Swift.String) -> NoorSDK.ConstraintMakerFinalizable
  public var constraint: NoorSDK.Constraint {
    get
  }
  @objc deinit
}
public struct Coordinates : Swift.Codable, Swift.Equatable {
  public init(latitude: Swift.Double, longitude: Swift.Double)
  public static func == (a: NoorSDK.Coordinates, b: NoorSDK.Coordinates) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public typealias ConstraintInsets = UIKit.UIEdgeInsets
public enum TimePeriodRelation {
  case after
  case startTouching
  case startInside
  case insideStartTouching
  case enclosingStartTouching
  case enclosing
  case enclosingEndTouching
  case exactMatch
  case inside
  case insideEndTouching
  case endInside
  case endTouching
  case before
  case none
  public static func == (a: NoorSDK.TimePeriodRelation, b: NoorSDK.TimePeriodRelation) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum IntervalType {
  case open
  case closed
  public static func == (a: NoorSDK.IntervalType, b: NoorSDK.IntervalType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum TimePeriodAnchor {
  case beginning
  case center
  case end
  public static func == (a: NoorSDK.TimePeriodAnchor, b: NoorSDK.TimePeriodAnchor) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol ConstraintOffsetTarget : NoorSDK.ConstraintConstantTarget {
}
extension Swift.Int : NoorSDK.ConstraintOffsetTarget {
}
extension Swift.UInt : NoorSDK.ConstraintOffsetTarget {
}
extension Swift.Float : NoorSDK.ConstraintOffsetTarget {
}
extension Swift.Double : NoorSDK.ConstraintOffsetTarget {
}
extension CoreFoundation.CGFloat : NoorSDK.ConstraintOffsetTarget {
}
extension NoorSDK.MarginAdjustable where Self : UIKit.UIView {
  public func defaultMarginAdjustment(context: NoorSDK.AnimationContext) -> UIKit.UIEdgeInsets
}
public protocol ConstraintInsetTarget : NoorSDK.ConstraintConstantTarget {
}
extension Swift.Int : NoorSDK.ConstraintInsetTarget {
}
extension Swift.UInt : NoorSDK.ConstraintInsetTarget {
}
extension Swift.Float : NoorSDK.ConstraintInsetTarget {
}
extension Swift.Double : NoorSDK.ConstraintInsetTarget {
}
extension CoreFoundation.CGFloat : NoorSDK.ConstraintInsetTarget {
}
extension UIKit.UIEdgeInsets : NoorSDK.ConstraintInsetTarget {
}
public enum VGPlayerCacheActionType : Swift.Int {
  case local
  case remote
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct VGPlayerCacheAction : Swift.Hashable, Swift.CustomStringConvertible {
  public var type: NoorSDK.VGPlayerCacheActionType
  public var range: Foundation.NSRange
  public var description: Swift.String {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
  public static func == (lhs: NoorSDK.VGPlayerCacheAction, rhs: NoorSDK.VGPlayerCacheAction) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
}
infix operator |> : AdditionPrecedence
extension Swift.Collection {
  public func at(_ index: Self.Index) -> Self.Element?
}
public enum LineCap : Swift.Int {
  case round, butt, square
  public func style() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum Orientation : Swift.Int {
  case left, top, right, bottom
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class CircularProgress : UIKit.UIView {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var titleLabel: UIKit.UILabel
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var clockwise: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var backgroundShapeColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var progressShapeColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var lineWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var spaceDegree: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var inset: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var percentLabelFormat: Swift.String {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var percentColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var title: Swift.String {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var titleColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var font: UIKit.UIFont {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var orientation: NoorSDK.Orientation {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var lineCap: NoorSDK.LineCap {
    get
    set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var progress: CoreFoundation.CGFloat {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open var completeDuration: Swift.Double
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) public func setProgress(progress: CoreFoundation.CGFloat, animated: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc deinit
}
public typealias TagString = (_ tag: Swift.String) -> ()
public typealias TagBoolean = (_ tag: Swift.Bool) -> ()
public typealias TagInteger = (_ tag: Swift.Int) -> ()
public typealias TagBooleanWithIndex = (_ tag: Swift.Bool, _ index: Swift.Int) -> ()
@_hasMissingDesignatedInitializers final public class Constraint {
  final public var layoutConstraints: [NoorSDK.LayoutConstraint]
  final public var isActive: Swift.Bool {
    get
    set
  }
  @available(*, deprecated, renamed: "activate()")
  final public func install()
  @available(*, deprecated, renamed: "deactivate()")
  final public func uninstall()
  final public func activate()
  final public func deactivate()
  @discardableResult
  final public func update(offset: NoorSDK.ConstraintOffsetTarget) -> NoorSDK.Constraint
  @discardableResult
  final public func update(inset: NoorSDK.ConstraintInsetTarget) -> NoorSDK.Constraint
  @available(iOS 11.0, tvOS 11.0, *)
  @discardableResult
  final public func update(inset: NoorSDK.ConstraintDirectionalInsetTarget) -> NoorSDK.Constraint
  @discardableResult
  final public func update(priority: NoorSDK.ConstraintPriorityTarget) -> NoorSDK.Constraint
  @discardableResult
  final public func update(priority: NoorSDK.ConstraintPriority) -> NoorSDK.Constraint
  @available(*, deprecated, renamed: "update(offset:)")
  final public func updateOffset(amount: NoorSDK.ConstraintOffsetTarget)
  @available(*, deprecated, renamed: "update(inset:)")
  final public func updateInsets(amount: NoorSDK.ConstraintInsetTarget)
  @available(*, deprecated, renamed: "update(priority:)")
  final public func updatePriority(amount: NoorSDK.ConstraintPriorityTarget)
  @available(*, deprecated, message: "Use update(priority: ConstraintPriorityTarget) instead.")
  final public func updatePriorityRequired()
  @available(*, deprecated, message: "Use update(priority: ConstraintPriorityTarget) instead.")
  final public func updatePriorityHigh()
  @available(*, deprecated, message: "Use update(priority: ConstraintPriorityTarget) instead.")
  final public func updatePriorityMedium()
  @available(*, deprecated, message: "Use update(priority: ConstraintPriorityTarget) instead.")
  final public func updatePriorityLow()
  @objc deinit
}
extension Swift.Int {
  public var nanoseconds: Foundation.DateComponents {
    get
  }
  public var seconds: Foundation.DateComponents {
    get
  }
  public var minutes: Foundation.DateComponents {
    get
  }
  public var hours: Foundation.DateComponents {
    get
  }
  public var days: Foundation.DateComponents {
    get
  }
  public var weeks: Foundation.DateComponents {
    get
  }
  public var months: Foundation.DateComponents {
    get
  }
  public var years: Foundation.DateComponents {
    get
  }
  public var quarters: Foundation.DateComponents {
    get
  }
}
public protocol DateParsable {
  func toDate(_ format: Swift.String?, region: NoorSDK.Region) -> NoorSDK.DateInRegion?
  func toDate(_ formats: [Swift.String], region: NoorSDK.Region) -> NoorSDK.DateInRegion?
  func toDate(style: NoorSDK.StringToDateStyles, region: NoorSDK.Region) -> NoorSDK.DateInRegion?
  func toISODate(_ options: NoorSDK.ISOParser.Options?, region: NoorSDK.Region?) -> NoorSDK.DateInRegion?
  func toDotNETDate(region: NoorSDK.Region) -> NoorSDK.DateInRegion?
  func toRSSDate(alt: Swift.Bool, region: NoorSDK.Region) -> NoorSDK.DateInRegion?
  func toSQLDate(region: NoorSDK.Region) -> NoorSDK.DateInRegion?
}
extension Swift.String : NoorSDK.DateParsable {
  public func toDate(_ format: Swift.String? = nil, region: NoorSDK.Region = SwiftDate.defaultRegion) -> NoorSDK.DateInRegion?
  public func toDate(_ formats: [Swift.String], region: NoorSDK.Region) -> NoorSDK.DateInRegion?
  public func toDate(style: NoorSDK.StringToDateStyles, region: NoorSDK.Region = SwiftDate.defaultRegion) -> NoorSDK.DateInRegion?
  public func toISODate(_ options: NoorSDK.ISOParser.Options? = nil, region: NoorSDK.Region? = nil) -> NoorSDK.DateInRegion?
  public func toDotNETDate(region: NoorSDK.Region = Region.ISO) -> NoorSDK.DateInRegion?
  public func toRSSDate(alt: Swift.Bool, region: NoorSDK.Region = Region.ISO) -> NoorSDK.DateInRegion?
  public func toSQLDate(region: NoorSDK.Region = Region.ISO) -> NoorSDK.DateInRegion?
  public func asLocale() -> Foundation.Locale
}
public func - (lhs: Foundation.Date, rhs: Foundation.Date) -> Foundation.DateComponents
public func + (lhs: Foundation.Date, rhs: Foundation.DateComponents) -> Foundation.Date
public func + (lhs: Foundation.DateComponents, rhs: Foundation.Date) -> Foundation.Date
public func - (lhs: Foundation.Date, rhs: Foundation.DateComponents) -> Foundation.Date
public func + (lhs: Foundation.Date, rhs: Foundation.TimeInterval) -> Foundation.Date
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CoreIntegration : ObjectiveC.NSObject {
  public static let shared: NoorSDK.CoreIntegration
  public func goToHomeVC(with nav: UIKit.UINavigationController? = UINavigationController())
  @objc deinit
}
@available(iOSApplicationExtension, unavailable)
@objc extension UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) dynamic open func parentIQContainerViewController() -> UIKit.UIViewController?
  @objc @available(*, deprecated, message: "Due to change in core-logic of handling distance between textField and keyboard distance, this layout contraint tweak is no longer needed and things will just work out of the box regardless of constraint pinned with safeArea/layoutGuide/superview.")
  @IBOutlet @_Concurrency.MainActor(unsafe) dynamic public var IQLayoutGuideConstraint: UIKit.NSLayoutConstraint? {
    @objc get
    @objc set(newValue)
  }
}
public struct PrayerAdjustments : Swift.Codable, Swift.Equatable {
  public var fajr: NoorSDK.Minute
  public var sunrise: NoorSDK.Minute
  public var dhuhr: NoorSDK.Minute
  public var asr: NoorSDK.Minute
  public var maghrib: NoorSDK.Minute
  public var isha: NoorSDK.Minute
  public init(fajr: NoorSDK.Minute = 0, sunrise: NoorSDK.Minute = 0, dhuhr: NoorSDK.Minute = 0, asr: NoorSDK.Minute = 0, maghrib: NoorSDK.Minute = 0, isha: NoorSDK.Minute = 0)
  public static func == (a: NoorSDK.PrayerAdjustments, b: NoorSDK.PrayerAdjustments) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc public protocol FloatingPanelControllerDelegate {
  @objc(floatingPanel:layoutForTraitCollection:) optional func floatingPanel(_ fpc: NoorSDK.FloatingPanelController, layoutFor newCollection: UIKit.UITraitCollection) -> NoorSDK.FloatingPanelLayout
  @objc(floatingPanel:layoutForSize:) optional func floatingPanel(_ fpc: NoorSDK.FloatingPanelController, layoutFor size: CoreFoundation.CGSize) -> NoorSDK.FloatingPanelLayout
  @objc(floatingPanel:animatorForPresentingToState:) optional func floatingPanel(_ fpc: NoorSDK.FloatingPanelController, animatorForPresentingTo state: NoorSDK.FloatingPanelState) -> UIKit.UIViewPropertyAnimator
  @objc(floatingPanel:animatorForDismissingWithVelocity:) optional func floatingPanel(_ fpc: NoorSDK.FloatingPanelController, animatorForDismissingWith velocity: CoreFoundation.CGVector) -> UIKit.UIViewPropertyAnimator
  @objc optional func floatingPanelDidChangeState(_ fpc: NoorSDK.FloatingPanelController)
  @objc optional func floatingPanelShouldBeginDragging(_ fpc: NoorSDK.FloatingPanelController) -> Swift.Bool
  @objc optional func floatingPanelDidMove(_ fpc: NoorSDK.FloatingPanelController)
  @objc optional func floatingPanelWillBeginDragging(_ fpc: NoorSDK.FloatingPanelController)
  @objc optional func floatingPanelWillEndDragging(_ fpc: NoorSDK.FloatingPanelController, withVelocity velocity: CoreFoundation.CGPoint, targetState: Swift.UnsafeMutablePointer<NoorSDK.FloatingPanelState>)
  @objc optional func floatingPanelDidEndDragging(_ fpc: NoorSDK.FloatingPanelController, willAttract attract: Swift.Bool)
  @objc optional func floatingPanelWillBeginAttracting(_ fpc: NoorSDK.FloatingPanelController, to state: NoorSDK.FloatingPanelState)
  @objc optional func floatingPanelDidEndAttracting(_ fpc: NoorSDK.FloatingPanelController)
  @objc(floatingPanel:shouldRemoveAtLocation:withVelocity:) optional func floatingPanel(_ fpc: NoorSDK.FloatingPanelController, shouldRemoveAt location: CoreFoundation.CGPoint, with velocity: CoreFoundation.CGVector) -> Swift.Bool
  @objc(floatingPanelWillRemove:) optional func floatingPanelWillRemove(_ fpc: NoorSDK.FloatingPanelController)
  @objc optional func floatingPanelDidRemove(_ fpc: NoorSDK.FloatingPanelController)
  @objc(floatingPanel:contentOffsetForPinningScrollView:) optional func floatingPanel(_ fpc: NoorSDK.FloatingPanelController, contentOffsetForPinning trackingScrollView: UIKit.UIScrollView) -> CoreFoundation.CGPoint
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) open class FloatingPanelController : UIKit.UIViewController {
  @objc public enum ContentInsetAdjustmentBehavior : Swift.Int {
    case always
    case never
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum ContentMode : Swift.Int {
    case `static`
    case fitToBounds
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc @_Concurrency.MainActor(unsafe) weak public var delegate: NoorSDK.FloatingPanelControllerDelegate? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var surfaceView: NoorSDK.SurfaceView! {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var backdropView: NoorSDK.BackdropView! {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) weak public var trackingScrollView: UIKit.UIScrollView? {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var panGestureRecognizer: NoorSDK.FloatingPanelPanGestureRecognizer {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var state: NoorSDK.FloatingPanelState {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var isAttracting: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var layout: NoorSDK.FloatingPanelLayout {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var behavior: NoorSDK.FloatingPanelBehavior {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var adjustedContentInsets: UIKit.UIEdgeInsets {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var contentInsetAdjustmentBehavior: NoorSDK.FloatingPanelController.ContentInsetAdjustmentBehavior
  @objc @_Concurrency.MainActor(unsafe) public var isRemovalInteractionEnabled: Swift.Bool {
    @objc(isRemovalInteractionEnabled) get
    @objc(setRemovalInteractionEnabled:) set
  }
  @objc @_Concurrency.MainActor(unsafe) public var contentViewController: UIKit.UIViewController? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var nearbyState: NoorSDK.FloatingPanelState {
    get
  }
  @objc @_Concurrency.MainActor(unsafe) public var contentMode: NoorSDK.FloatingPanelController.ContentMode {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) public init(delegate: NoorSDK.FloatingPanelControllerDelegate? = nil)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLayoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willTransition(to newCollection: UIKit.UITraitCollection, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var childForStatusBarStyle: UIKit.UIViewController? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var childForStatusBarHidden: UIKit.UIViewController? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var childForScreenEdgesDeferringSystemGestures: UIKit.UIViewController? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var childForHomeIndicatorAutoHidden: UIKit.UIViewController? {
    @objc get
  }
  @objc(show:completion:) @_Concurrency.MainActor(unsafe) public func show(animated: Swift.Bool = false, completion: (() -> Swift.Void)? = nil)
  @objc(hide:completion:) @_Concurrency.MainActor(unsafe) public func hide(animated: Swift.Bool = false, completion: (() -> Swift.Void)? = nil)
  @objc(addPanelToParent:at:animated:completion:) @_Concurrency.MainActor(unsafe) public func addPanel(toParent parent: UIKit.UIViewController, at viewIndex: Swift.Int = -1, animated: Swift.Bool = false, completion: (() -> Swift.Void)? = nil)
  @objc(removePanelFromParent:completion:) @_Concurrency.MainActor(unsafe) public func removePanelFromParent(animated: Swift.Bool, completion: (() -> Swift.Void)? = nil)
  @objc(moveToState:animated:completion:) @_Concurrency.MainActor(unsafe) public func move(to: NoorSDK.FloatingPanelState, animated: Swift.Bool, completion: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func set(contentViewController: UIKit.UIViewController?)
  @objc(trackScrollView:) @_Concurrency.MainActor(unsafe) public func track(scrollView: UIKit.UIScrollView)
  @objc(untrackScrollView:) @_Concurrency.MainActor(unsafe) public func untrack(scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func accessibilityPerformEscape() -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) public func invalidateLayout()
  @objc @_Concurrency.MainActor(unsafe) public func surfaceLocation(for state: NoorSDK.FloatingPanelState) -> CoreFoundation.CGPoint
  @objc @_Concurrency.MainActor(unsafe) public var surfaceLocation: CoreFoundation.CGPoint {
    @objc get
    @objc set
  }
  @objc deinit
}
extension UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func fp_original_dismiss(animated flag: Swift.Bool, completion: (() -> Swift.Void)? = nil)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func fp_dismiss(animated flag: Swift.Bool, completion: (() -> Swift.Void)? = nil)
}
extension UIKit.UIScrollView {
  @_Concurrency.MainActor(unsafe) public var isScrolledToBottom: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isScrolledToTop: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isScrolledToLeftSide: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var isScrolledToRightSide: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public var maxVerticalScrollOffset: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) public var maxHorizontalScrollOffset: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) public func isScrolledWithin(distanceFromBottom distance: CoreFoundation.CGFloat) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func isScrolledWithin(distanceFromRight distance: CoreFoundation.CGFloat) -> Swift.Bool
}
public typealias ButtonTag = (_ tag: Swift.String) -> ()
extension Foundation.DateFormatter {
  public static func sharedFormatter(forRegion region: NoorSDK.Region?, format: Swift.String? = nil) -> Foundation.DateFormatter
  @available(iOS 9.0, macOS 10.11, *)
  public static func sharedOrdinalNumberFormatter(locale: NoorSDK.LocaleConvertible) -> Foundation.NumberFormatter
}
public enum SymbolFormatStyle {
  case `default`
  case defaultStandalone
  case short
  case veryShort
  case standaloneShort
  case standaloneVeryShort
  public static func == (a: NoorSDK.SymbolFormatStyle, b: NoorSDK.SymbolFormatStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct DateFormats {
  public static var autoFormats: [Swift.String]
  public static let iso8601: Swift.String
  public static let extended: Swift.String
  public static let altRSS: Swift.String
  public static let rss: Swift.String
  public static let httpHeader: Swift.String
  public static let standard: Swift.String
  public static let sql: Swift.String
  public static func resetAutoFormats()
  public static func parse(string: Swift.String, format: Swift.String?, region: NoorSDK.Region) -> Foundation.Date?
  public static func parse(string: Swift.String, formats: [Swift.String], region: NoorSDK.Region) -> Foundation.Date?
}
public enum RoundDateMode {
  case to5Mins
  case to10Mins
  case to30Mins
  case toMins(Swift.Int)
  case toCeil5Mins
  case toCeil10Mins
  case toCeil30Mins
  case toCeilMins(Swift.Int)
  case toFloor5Mins
  case toFloor10Mins
  case toFloor30Mins
  case toFloorMins(Swift.Int)
}
public enum DateRelatedType {
  case startOfDay
  case endOfDay
  case startOfWeek
  case endOfWeek
  case startOfMonth
  case endOfMonth
  case tomorrow
  case tomorrowAtStart
  case yesterday
  case yesterdayAtStart
  case nearestMinute(minute: Swift.Int)
  case nearestHour(hour: Swift.Int)
  case nextWeekday(NoorSDK.WeekDay)
  case nextDSTDate
  case prevMonth
  case nextMonth
  case prevWeek
  case nextWeek
  case nextYear
  case prevYear
  case nextDSTTransition
}
public struct TimeCalculationOptions {
  public var matchingPolicy: Foundation.Calendar.MatchingPolicy
  public var repeatedTimePolicy: Foundation.Calendar.RepeatedTimePolicy
  public var direction: Foundation.Calendar.SearchDirection
  public init(matching: Foundation.Calendar.MatchingPolicy = .nextTime, timePolicy: Foundation.Calendar.RepeatedTimePolicy = .first, direction: Foundation.Calendar.SearchDirection = .forward)
}
@_inheritsConvenienceInitializers @objc(FloatingPanelSurfaceAppearance) @objcMembers public class SurfaceAppearance : ObjectiveC.NSObject {
  @_inheritsConvenienceInitializers @objc(FloatingPanelSurfaceAppearanceShadow) public class Shadow : ObjectiveC.NSObject {
    @objc public var hidden: Swift.Bool
    @objc public var color: UIKit.UIColor
    @objc public var offset: CoreFoundation.CGSize
    @objc public var opacity: Swift.Float
    @objc public var radius: CoreFoundation.CGFloat
    @objc public var spread: CoreFoundation.CGFloat
    @objc override dynamic public init()
    @objc deinit
  }
  @objc public var backgroundColor: UIKit.UIColor?
  @objc public var cornerRadius: CoreFoundation.CGFloat
  @objc @available(iOS 13.0, *)
  public var cornerCurve: QuartzCore.CALayerCornerCurve {
    @objc get
    @objc set
  }
  @objc public var shadows: [NoorSDK.SurfaceAppearance.Shadow]
  @objc public var borderColor: UIKit.UIColor?
  @objc public var borderWidth: CoreFoundation.CGFloat
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(FloatingPanelSurfaceView) @objcMembers @_Concurrency.MainActor(unsafe) public class SurfaceView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) final public let grabberHandle: NoorSDK.GrabberView
  @objc @_Concurrency.MainActor(unsafe) public var grabberHandlePadding: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var grabberAreaOffset: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor(unsafe) public var grabberHandleSize: CoreFoundation.CGSize {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) weak public var contentView: UIKit.UIView?
  @objc @_Concurrency.MainActor(unsafe) public var contentPadding: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var appearance: NoorSDK.SurfaceAppearance {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var containerMargins: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) final public let containerView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) @objc override dynamic public class var requiresConstraintBasedLayout: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func updateConstraints()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @objc deinit
}
public struct LocaleInfo {
  public var locale: Foundation.Locale?
  public var id: Swift.String? {
    get
  }
  public var country: Swift.String
  public var code: Swift.String
  public var phoneCode: Swift.String
  public var flag: UIKit.UIImage? {
    get
  }
  public var currencyCode: Swift.String? {
    get
  }
  public var currencySymbol: Swift.String? {
    get
  }
  public var currencyName: Swift.String? {
    get
  }
}
public protocol TinderSwipeViewDelegate : AnyObject {
  func dummyAnimationDone()
  func currentCardStatus(card: Any, distance: CoreFoundation.CGFloat)
  func fallbackCard(model: Any)
  func didSelectCard(model: Any)
  func cardGoesLeft(model: Any)
  func cardGoesRight(model: Any)
  func undoCardsDone(model: Any)
  func endOfCardsReached()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class TinderSwipeView<Element> : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var sepeatorDistance: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) weak public var delegate: NoorSDK.TinderSwipeViewDelegate?
  public typealias ContentView = (_ index: Swift.Int, _ frame: CoreFoundation.CGRect, _ element: Element) -> (UIKit.UIView)
  @_Concurrency.MainActor(unsafe) public init(frame: CoreFoundation.CGRect, contentView: @escaping NoorSDK.TinderSwipeView<Element>.ContentView, bufferSize: Swift.Int = 3)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) public func showTinderCards(with elements: [Element], isDummyShow: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) public func appendTinderCards(with elements: [Element])
  @_Concurrency.MainActor(unsafe) public func makeLeftSwipeAction()
  @_Concurrency.MainActor(unsafe) public func makeRightSwipeAction()
  @_Concurrency.MainActor(unsafe) public func undoCurrentTinderCard()
  @objc deinit
}
extension UIKit.UISpringTimingParameters {
  @_Concurrency.MainActor(unsafe) convenience public init(decelerationRate: CoreFoundation.CGFloat, frequencyResponse: CoreFoundation.CGFloat, initialVelocity: CoreFoundation.CGVector = .zero)
  @_Concurrency.MainActor(unsafe) convenience public init(dampingRatio: CoreFoundation.CGFloat, frequencyResponse: CoreFoundation.CGFloat, initialVelocity: CoreFoundation.CGVector = .zero)
}
@available(iOSApplicationExtension, unavailable)
extension NoorSDK.IQKeyboardManager {
  @objc final public var enableDebugging: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  @objc final public func registerAllNotifications()
  @objc final public func unregisterAllNotifications()
  public struct Static {
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class CornerRoundingView : UIKit.UIView {
  @IBInspectable @_Concurrency.MainActor(unsafe) @objc dynamic open var cornerRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var roundsLeadingCorners: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var roundedCorners: UIKit.UIRectCorner {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class ConstraintItem {
  @objc deinit
}
public func == (lhs: NoorSDK.ConstraintItem, rhs: NoorSDK.ConstraintItem) -> Swift.Bool
extension Foundation.Date {
  public var removeTimeStamp: Foundation.Date? {
    get
  }
}
@available(*, deprecated)
public protocol NVActivityIndicatorViewable {
}
@available(*, deprecated)
extension NoorSDK.NVActivityIndicatorViewable where Self : UIKit.UIViewController {
  public var isAnimating: Swift.Bool {
    get
  }
  public func startAnimating(_ size: CoreFoundation.CGSize? = nil, message: Swift.String? = nil, messageFont: UIKit.UIFont? = nil, type: NoorSDK.NVActivityIndicatorType? = nil, color: UIKit.UIColor? = nil, padding: CoreFoundation.CGFloat? = nil, displayTimeThreshold: Swift.Int? = nil, minimumDisplayTime: Swift.Int? = nil, backgroundColor: UIKit.UIColor? = nil, textColor: UIKit.UIColor? = nil, fadeInAnimation: NoorSDK.FadeInAnimation? = NVActivityIndicatorView.DEFAULT_FADE_IN_ANIMATION)
  public func stopAnimating(_ fadeOutAnimation: NoorSDK.FadeOutAnimation? = NVActivityIndicatorView.DEFAULT_FADE_OUT_ANIMATION)
}
public protocol ConstraintDSL {
  var target: Swift.AnyObject? { get }
  func setLabel(_ value: Swift.String?)
  func label() -> Swift.String?
}
extension NoorSDK.ConstraintDSL {
  public func setLabel(_ value: Swift.String?)
  public func label() -> Swift.String?
}
public protocol ConstraintBasicAttributesDSL : NoorSDK.ConstraintDSL {
}
extension NoorSDK.ConstraintBasicAttributesDSL {
  public var left: NoorSDK.ConstraintItem {
    get
  }
  public var top: NoorSDK.ConstraintItem {
    get
  }
  public var right: NoorSDK.ConstraintItem {
    get
  }
  public var bottom: NoorSDK.ConstraintItem {
    get
  }
  public var leading: NoorSDK.ConstraintItem {
    get
  }
  public var trailing: NoorSDK.ConstraintItem {
    get
  }
  public var width: NoorSDK.ConstraintItem {
    get
  }
  public var height: NoorSDK.ConstraintItem {
    get
  }
  public var centerX: NoorSDK.ConstraintItem {
    get
  }
  public var centerY: NoorSDK.ConstraintItem {
    get
  }
  public var edges: NoorSDK.ConstraintItem {
    get
  }
  public var directionalEdges: NoorSDK.ConstraintItem {
    get
  }
  public var horizontalEdges: NoorSDK.ConstraintItem {
    get
  }
  public var verticalEdges: NoorSDK.ConstraintItem {
    get
  }
  public var directionalHorizontalEdges: NoorSDK.ConstraintItem {
    get
  }
  public var directionalVerticalEdges: NoorSDK.ConstraintItem {
    get
  }
  public var size: NoorSDK.ConstraintItem {
    get
  }
  public var center: NoorSDK.ConstraintItem {
    get
  }
}
public protocol ConstraintAttributesDSL : NoorSDK.ConstraintBasicAttributesDSL {
}
extension NoorSDK.ConstraintAttributesDSL {
  @available(*, deprecated, renamed: "lastBaseline")
  public var baseline: NoorSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, macOS 10.11, *)
  public var lastBaseline: NoorSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, macOS 10.11, *)
  public var firstBaseline: NoorSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var leftMargin: NoorSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var topMargin: NoorSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var rightMargin: NoorSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var bottomMargin: NoorSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var leadingMargin: NoorSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var trailingMargin: NoorSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var centerXWithinMargins: NoorSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var centerYWithinMargins: NoorSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var margins: NoorSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var directionalMargins: NoorSDK.ConstraintItem {
    get
  }
  @available(iOS 8.0, *)
  public var centerWithinMargins: NoorSDK.ConstraintItem {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(FloatingPanelGrabberView) @_Concurrency.MainActor(unsafe) public class GrabberView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var barColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func hitTest(_ point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @objc deinit
}
extension UIKit.UIAlertController {
  @_Concurrency.MainActor(unsafe) public func show(animated: Swift.Bool = true, vibrate: Swift.Bool = false, style: UIKit.UIBlurEffect.Style? = nil, completion: (() -> Swift.Void)? = nil)
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var size: CoreFoundation.CGSize {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var width: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var height: CoreFoundation.CGFloat {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func allSubViewsOf<T>(type: T.Type) -> [T] where T : UIKit.UIView
}
public protocol BackgroundViewable {
  var backgroundView: UIKit.UIView! { get }
}
@objc public enum FSPagerViewTransformerType : Swift.Int {
  case crossFading
  case zoomOut
  case depth
  case overlap
  case linear
  case coverFlow
  case ferrisWheel
  case invertedFerrisWheel
  case cubic
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc open class FSPagerViewTransformer : ObjectiveC.NSObject {
  weak open var pagerView: NoorSDK.FSPagerView? {
    get
  }
  open var type: NoorSDK.FSPagerViewTransformerType {
    get
  }
  open var minimumScale: CoreFoundation.CGFloat
  open var minimumAlpha: CoreFoundation.CGFloat
  @objc public init(type: NoorSDK.FSPagerViewTransformerType)
  open func applyTransform(to attributes: NoorSDK.FSPagerViewLayoutAttributes)
  open func proposedInteritemSpacing() -> CoreFoundation.CGFloat
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class NoorAudioPlayerItem : AVFoundation.AVPlayerItem {
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class NoorVideoPlayerItem : AVFoundation.AVPlayerItem {
  @objc deinit
}
@objc public protocol FSPagerViewDataSource : ObjectiveC.NSObjectProtocol {
  @objc(numberOfItemsInPagerView:) func numberOfItems(in pagerView: NoorSDK.FSPagerView) -> Swift.Int
  @objc(pagerView:cellForItemAtIndex:) func pagerView(_ pagerView: NoorSDK.FSPagerView, cellForItemAt index: Swift.Int) -> NoorSDK.FSPagerViewCell
}
@objc public protocol FSPagerViewDelegate : ObjectiveC.NSObjectProtocol {
  @objc(pagerView:shouldHighlightItemAtIndex:) optional func pagerView(_ pagerView: NoorSDK.FSPagerView, shouldHighlightItemAt index: Swift.Int) -> Swift.Bool
  @objc(pagerView:didHighlightItemAtIndex:) optional func pagerView(_ pagerView: NoorSDK.FSPagerView, didHighlightItemAt index: Swift.Int)
  @objc(pagerView:shouldSelectItemAtIndex:) optional func pagerView(_ pagerView: NoorSDK.FSPagerView, shouldSelectItemAt index: Swift.Int) -> Swift.Bool
  @objc(pagerView:didSelectItemAtIndex:) optional func pagerView(_ pagerView: NoorSDK.FSPagerView, didSelectItemAt index: Swift.Int)
  @objc(pagerView:willDisplayCell:forItemAtIndex:) optional func pagerView(_ pagerView: NoorSDK.FSPagerView, willDisplay cell: NoorSDK.FSPagerViewCell, forItemAt index: Swift.Int)
  @objc(pagerView:didEndDisplayingCell:forItemAtIndex:) optional func pagerView(_ pagerView: NoorSDK.FSPagerView, didEndDisplaying cell: NoorSDK.FSPagerViewCell, forItemAt index: Swift.Int)
  @objc(pagerViewWillBeginDragging:) optional func pagerViewWillBeginDragging(_ pagerView: NoorSDK.FSPagerView)
  @objc(pagerViewWillEndDragging:targetIndex:) optional func pagerViewWillEndDragging(_ pagerView: NoorSDK.FSPagerView, targetIndex: Swift.Int)
  @objc(pagerViewDidScroll:) optional func pagerViewDidScroll(_ pagerView: NoorSDK.FSPagerView)
  @objc(pagerViewDidEndScrollAnimation:) optional func pagerViewDidEndScrollAnimation(_ pagerView: NoorSDK.FSPagerView)
  @objc(pagerViewDidEndDecelerating:) optional func pagerViewDidEndDecelerating(_ pagerView: NoorSDK.FSPagerView)
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) open class FSPagerView : UIKit.UIView, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegate {
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak open var dataSource: NoorSDK.FSPagerViewDataSource?
  @objc @IBOutlet @_Concurrency.MainActor(unsafe) weak open var delegate: NoorSDK.FSPagerViewDelegate?
  @objc @_Concurrency.MainActor(unsafe) open var scrollDirection: NoorSDK.FSPagerView.ScrollDirection {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var automaticSlidingInterval: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var interitemSpacing: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var itemSize: CoreFoundation.CGSize {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var isInfinite: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var decelerationDistance: Swift.UInt
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var isScrollEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var bounces: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var alwaysBounceHorizontal: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var alwaysBounceVertical: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var removesInfiniteLoopForSingleItem: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var backgroundView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var transformer: NoorSDK.FSPagerViewTransformer? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) open var isTracking: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var scrollOffset: CoreFoundation.CGFloat {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) open var panGestureRecognizer: UIKit.UIPanGestureRecognizer {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic open var currentIndex: Swift.Int {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func willMove(toWindow newWindow: UIKit.UIWindow?)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, shouldHighlightItemAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, didHighlightItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, shouldSelectItemAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, willDisplay cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc public func collectionView(_ collectionView: UIKit.UICollectionView, didEndDisplaying cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc public func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc public func scrollViewWillEndDragging(_ scrollView: UIKit.UIScrollView, withVelocity velocity: CoreFoundation.CGPoint, targetContentOffset: Swift.UnsafeMutablePointer<CoreFoundation.CGPoint>)
  @_Concurrency.MainActor(unsafe) @objc public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor(unsafe) @objc public func scrollViewDidEndScrollingAnimation(_ scrollView: UIKit.UIScrollView)
  @objc(registerClass:forCellWithReuseIdentifier:) @_Concurrency.MainActor(unsafe) open func register(_ cellClass: Swift.AnyClass?, forCellWithReuseIdentifier identifier: Swift.String)
  @objc(registerNib:forCellWithReuseIdentifier:) @_Concurrency.MainActor(unsafe) open func register(_ nib: UIKit.UINib?, forCellWithReuseIdentifier identifier: Swift.String)
  @objc(dequeueReusableCellWithReuseIdentifier:atIndex:) @_Concurrency.MainActor(unsafe) open func dequeueReusableCell(withReuseIdentifier identifier: Swift.String, at index: Swift.Int) -> NoorSDK.FSPagerViewCell
  @objc(reloadData) @_Concurrency.MainActor(unsafe) open func reloadData()
  @objc(selectItemAtIndex:animated:) @_Concurrency.MainActor(unsafe) open func selectItem(at index: Swift.Int, animated: Swift.Bool)
  @objc(deselectItemAtIndex:animated:) @_Concurrency.MainActor(unsafe) open func deselectItem(at index: Swift.Int, animated: Swift.Bool)
  @objc(scrollToItemAtIndex:animated:) @_Concurrency.MainActor(unsafe) open func scrollToItem(at index: Swift.Int, animated: Swift.Bool)
  @objc(indexForCell:) @_Concurrency.MainActor(unsafe) open func index(for cell: NoorSDK.FSPagerViewCell) -> Swift.Int
  @objc(cellForItemAtIndex:) @_Concurrency.MainActor(unsafe) open func cellForItem(at index: Swift.Int) -> NoorSDK.FSPagerViewCell?
}
extension NoorSDK.FSPagerView {
  @objc public enum ScrollDirection : Swift.Int {
    case horizontal
    case vertical
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public static let automaticDistance: Swift.UInt
  @_Concurrency.MainActor(unsafe) public static let automaticSize: CoreFoundation.CGSize
}
@available(iOSApplicationExtension, unavailable)
@objc extension UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func viewContainingController() -> UIKit.UIViewController?
  @objc @_Concurrency.MainActor(unsafe) dynamic public func topMostController() -> UIKit.UIViewController?
  @objc @_Concurrency.MainActor(unsafe) dynamic public func parentContainerViewController() -> UIKit.UIViewController?
  @objc @_Concurrency.MainActor(unsafe) dynamic public func superviewOfClassType(_ classType: UIKit.UIView.Type, belowView: UIKit.UIView? = nil) -> UIKit.UIView?
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOSApplicationExtension, unavailable)
@objc @_Concurrency.MainActor(unsafe) open class IQToolbar : UIKit.UIToolbar, UIKit.UIInputViewAudioFeedback {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor(unsafe) open var previousBarButton: NoorSDK.IQBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) open var nextBarButton: NoorSDK.IQBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) open var titleBarButton: NoorSDK.IQTitleBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) open var doneBarButton: NoorSDK.IQBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor(unsafe) open var fixedSpaceBarButton: NoorSDK.IQBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func sizeThatFits(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) @objc open var enableInputClicksWhenVisible: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@available(iOS 9.0, macOS 10.11, *)
extension UIKit.UILayoutGuide {
  @_Concurrency.MainActor(unsafe) public var snp: NoorSDK.ConstraintLayoutGuideDSL {
    get
  }
}
public enum AFError : Swift.Error {
  public enum MultipartEncodingFailureReason {
    case bodyPartURLInvalid(url: Foundation.URL)
    case bodyPartFilenameInvalid(in: Foundation.URL)
    case bodyPartFileNotReachable(at: Foundation.URL)
    case bodyPartFileNotReachableWithError(atURL: Foundation.URL, error: Swift.Error)
    case bodyPartFileIsDirectory(at: Foundation.URL)
    case bodyPartFileSizeNotAvailable(at: Foundation.URL)
    case bodyPartFileSizeQueryFailedWithError(forURL: Foundation.URL, error: Swift.Error)
    case bodyPartInputStreamCreationFailed(for: Foundation.URL)
    case outputStreamCreationFailed(for: Foundation.URL)
    case outputStreamFileAlreadyExists(at: Foundation.URL)
    case outputStreamURLInvalid(url: Foundation.URL)
    case outputStreamWriteFailed(error: Swift.Error)
    case inputStreamReadFailed(error: Swift.Error)
  }
  public struct UnexpectedInputStreamLength : Swift.Error {
    public var bytesExpected: Swift.UInt64
    public var bytesRead: Swift.UInt64
  }
  public enum ParameterEncodingFailureReason {
    case missingURL
    case jsonEncodingFailed(error: Swift.Error)
    case customEncodingFailed(error: Swift.Error)
  }
  public enum ParameterEncoderFailureReason {
    public enum RequiredComponent {
      case url
      case httpMethod(rawValue: Swift.String)
    }
    case missingRequiredComponent(NoorSDK.AFError.ParameterEncoderFailureReason.RequiredComponent)
    case encoderFailed(error: Swift.Error)
  }
  public enum ResponseValidationFailureReason {
    case dataFileNil
    case dataFileReadFailed(at: Foundation.URL)
    case missingContentType(acceptableContentTypes: [Swift.String])
    case unacceptableContentType(acceptableContentTypes: [Swift.String], responseContentType: Swift.String)
    case unacceptableStatusCode(code: Swift.Int)
    case customValidationFailed(error: Swift.Error)
  }
  public enum ResponseSerializationFailureReason {
    case inputDataNilOrZeroLength
    case inputFileNil
    case inputFileReadFailed(at: Foundation.URL)
    case stringSerializationFailed(encoding: Swift.String.Encoding)
    case jsonSerializationFailed(error: Swift.Error)
    case decodingFailed(error: Swift.Error)
    case customSerializationFailed(error: Swift.Error)
    case invalidEmptyResponse(type: Swift.String)
  }
  public enum ServerTrustFailureReason {
    public struct Output {
      public let host: Swift.String
      public let trust: Security.SecTrust
      public let status: Darwin.OSStatus
      public let result: Security.SecTrustResultType
    }
    case noRequiredEvaluator(host: Swift.String)
    case noCertificatesFound
    case noPublicKeysFound
    case policyApplicationFailed(trust: Security.SecTrust, policy: Security.SecPolicy, status: Darwin.OSStatus)
    case settingAnchorCertificatesFailed(status: Darwin.OSStatus, certificates: [Security.SecCertificate])
    case revocationPolicyCreationFailed
    case trustEvaluationFailed(error: Swift.Error?)
    case defaultEvaluationFailed(output: NoorSDK.AFError.ServerTrustFailureReason.Output)
    case hostValidationFailed(output: NoorSDK.AFError.ServerTrustFailureReason.Output)
    case revocationCheckFailed(output: NoorSDK.AFError.ServerTrustFailureReason.Output, options: NoorSDK.RevocationTrustEvaluator.Options)
    case certificatePinningFailed(host: Swift.String, trust: Security.SecTrust, pinnedCertificates: [Security.SecCertificate], serverCertificates: [Security.SecCertificate])
    case publicKeyPinningFailed(host: Swift.String, trust: Security.SecTrust, pinnedKeys: [Security.SecKey], serverKeys: [Security.SecKey])
    case customEvaluationFailed(error: Swift.Error)
  }
  public enum URLRequestValidationFailureReason {
    case bodyDataInGETRequest(Foundation.Data)
  }
  case createUploadableFailed(error: Swift.Error)
  case createURLRequestFailed(error: Swift.Error)
  case downloadedFileMoveFailed(error: Swift.Error, source: Foundation.URL, destination: Foundation.URL)
  case explicitlyCancelled
  case invalidURL(url: NoorSDK.URLConvertible)
  case multipartEncodingFailed(reason: NoorSDK.AFError.MultipartEncodingFailureReason)
  case parameterEncodingFailed(reason: NoorSDK.AFError.ParameterEncodingFailureReason)
  case parameterEncoderFailed(reason: NoorSDK.AFError.ParameterEncoderFailureReason)
  case requestAdaptationFailed(error: Swift.Error)
  case requestRetryFailed(retryError: Swift.Error, originalError: Swift.Error)
  case responseValidationFailed(reason: NoorSDK.AFError.ResponseValidationFailureReason)
  case responseSerializationFailed(reason: NoorSDK.AFError.ResponseSerializationFailureReason)
  case serverTrustEvaluationFailed(reason: NoorSDK.AFError.ServerTrustFailureReason)
  case sessionDeinitialized
  case sessionInvalidated(error: Swift.Error?)
  case sessionTaskFailed(error: Swift.Error)
  case urlRequestValidationFailed(reason: NoorSDK.AFError.URLRequestValidationFailureReason)
}
extension Swift.Error {
  public var asAFError: NoorSDK.AFError? {
    get
  }
  public func asAFError(orFailWith message: @autoclosure () -> Swift.String, file: Swift.StaticString = #file, line: Swift.UInt = #line) -> NoorSDK.AFError
}
extension NoorSDK.AFError {
  public var isSessionDeinitializedError: Swift.Bool {
    get
  }
  public var isSessionInvalidatedError: Swift.Bool {
    get
  }
  public var isExplicitlyCancelledError: Swift.Bool {
    get
  }
  public var isInvalidURLError: Swift.Bool {
    get
  }
  public var isParameterEncodingError: Swift.Bool {
    get
  }
  public var isParameterEncoderError: Swift.Bool {
    get
  }
  public var isMultipartEncodingError: Swift.Bool {
    get
  }
  public var isRequestAdaptationError: Swift.Bool {
    get
  }
  public var isResponseValidationError: Swift.Bool {
    get
  }
  public var isResponseSerializationError: Swift.Bool {
    get
  }
  public var isServerTrustEvaluationError: Swift.Bool {
    get
  }
  public var isRequestRetryError: Swift.Bool {
    get
  }
  public var isCreateUploadableError: Swift.Bool {
    get
  }
  public var isCreateURLRequestError: Swift.Bool {
    get
  }
  public var isDownloadedFileMoveError: Swift.Bool {
    get
  }
  public var isSessionTaskError: Swift.Bool {
    get
  }
}
extension NoorSDK.AFError {
  public var url: Foundation.URL? {
    get
  }
  public var underlyingError: Swift.Error? {
    get
  }
  public var acceptableContentTypes: [Swift.String]? {
    get
  }
  public var responseContentType: Swift.String? {
    get
  }
  public var responseCode: Swift.Int? {
    get
  }
  public var failedStringEncoding: Swift.String.Encoding? {
    get
  }
  public var sourceURL: Foundation.URL? {
    get
  }
  public var destinationURL: Foundation.URL? {
    get
  }
  public var downloadResumeData: Foundation.Data? {
    get
  }
}
extension NoorSDK.AFError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public protocol TimePeriodProtocol {
  var start: NoorSDK.DateInRegion? { get set }
  var end: NoorSDK.DateInRegion? { get set }
}
extension NoorSDK.TimePeriodProtocol {
  public var hasFiniteRange: Swift.Bool {
    get
  }
  public var hasStart: Swift.Bool {
    get
  }
  public var hasEnd: Swift.Bool {
    get
  }
  public func equals(_ period: NoorSDK.TimePeriodProtocol) -> Swift.Bool
  public func isInside(_ period: NoorSDK.TimePeriodProtocol) -> Swift.Bool
  public func contains(date: NoorSDK.DateInRegion, interval: NoorSDK.IntervalType = .closed) -> Swift.Bool
  public func contains(_ period: NoorSDK.TimePeriodProtocol) -> Swift.Bool
  public func overlaps(with period: NoorSDK.TimePeriodProtocol) -> Swift.Bool
  public func intersects(with period: NoorSDK.TimePeriodProtocol) -> Swift.Bool
  public func isBefore(_ period: NoorSDK.TimePeriodProtocol) -> Swift.Bool
  public func isAfter(_ period: NoorSDK.TimePeriodProtocol) -> Swift.Bool
  public func hasGap(between period: NoorSDK.TimePeriodProtocol) -> Swift.Bool
  public func gap(between period: NoorSDK.TimePeriodProtocol) -> Foundation.TimeInterval
  public mutating func shift(by timeInterval: Foundation.TimeInterval)
  public mutating func lengthen(by timeInterval: Foundation.TimeInterval, at anchor: NoorSDK.TimePeriodAnchor)
  public mutating func shorten(by timeInterval: Foundation.TimeInterval, at anchor: NoorSDK.TimePeriodAnchor)
  public func relation(to period: NoorSDK.TimePeriodProtocol) -> NoorSDK.TimePeriodRelation
  public func isMoment(precision: Foundation.TimeInterval = 0) -> Swift.Bool
  public func durationIn(_ units: Swift.Set<Foundation.Calendar.Component>) -> Foundation.DateComponents?
  public func durationIn(_ unit: Foundation.Calendar.Component) -> Swift.Int?
  public var years: Swift.Int {
    get
  }
  public var months: Swift.Int {
    get
  }
  public var weeks: Swift.Int {
    get
  }
  public var days: Swift.Int {
    get
  }
  public var hours: Swift.Int {
    get
  }
  public var minutes: Swift.Int {
    get
  }
  public var seconds: Swift.Int {
    get
  }
  public var duration: Foundation.TimeInterval {
    get
  }
}
public protocol WindowScene {
}
@available(iOS 13.0, *)
extension UIKit.UIWindowScene : NoorSDK.WindowScene {
}
public enum Rounding : Swift.String, Swift.Codable, Swift.CaseIterable {
  case nearest
  case up
  case none
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NoorSDK.Rounding]
  public typealias RawValue = Swift.String
  public static var allCases: [NoorSDK.Rounding] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@available(iOSApplicationExtension, unavailable)
extension NoorSDK.IQKeyboardManager {
  public typealias SizeBlock = (_ size: CoreFoundation.CGSize) -> Swift.Void
  @objc final public func registerKeyboardSizeChange(identifier: Swift.AnyHashable, sizeHandler: @escaping NoorSDK.IQKeyboardManager.SizeBlock)
  @objc final public func unregisterKeyboardSizeChange(identifier: Swift.AnyHashable)
  @objc final public var keyboardShowing: Swift.Bool {
    @objc get
  }
  @objc final public var keyboardFrame: CoreFoundation.CGRect {
    @objc get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FSPagerViewLayoutAttributes : UIKit.UICollectionViewLayoutAttributes {
  @_Concurrency.MainActor(unsafe) open var position: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func isEqual(_ object: Any?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @objc deinit
}
public protocol URLConvertible {
  func asURL() throws -> Foundation.URL
}
extension Swift.String : NoorSDK.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
extension Foundation.URL : NoorSDK.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
extension Foundation.URLComponents : NoorSDK.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
extension NoorSDK.VGPlayerViewPanGestureDirection : Swift.Equatable {}
extension NoorSDK.VGPlayerViewPanGestureDirection : Swift.Hashable {}
extension NoorSDK.VGPlayerViewPanGestureDirection : Swift.RawRepresentable {}
extension NoorSDK.Theme : Swift.Equatable {}
extension NoorSDK.Theme : Swift.Hashable {}
extension NoorSDK.Icon : Swift.Equatable {}
extension NoorSDK.Icon : Swift.Hashable {}
extension NoorSDK.Icon : Swift.RawRepresentable {}
extension NoorSDK.IconStyle : Swift.Equatable {}
extension NoorSDK.IconStyle : Swift.Hashable {}
extension NoorSDK.Locales : Swift.Equatable {}
extension NoorSDK.Locales : Swift.Hashable {}
extension NoorSDK.Locales : Swift.RawRepresentable {}
extension NoorSDK.StepDrawingMode : Swift.Equatable {}
extension NoorSDK.StepDrawingMode : Swift.Hashable {}
extension NoorSDK.StepDrawingMode : Swift.RawRepresentable {}
extension NoorSDK.DisplayMode : Swift.Equatable {}
extension NoorSDK.DisplayMode : Swift.Hashable {}
extension NoorSDK.NVActivityIndicatorType : Swift.Equatable {}
extension NoorSDK.NVActivityIndicatorType : Swift.Hashable {}
extension NoorSDK.WeekDay : Swift.Equatable {}
extension NoorSDK.WeekDay : Swift.Hashable {}
extension NoorSDK.WeekDay : Swift.RawRepresentable {}
extension NoorSDK.Month : Swift.Hashable {}
extension NoorSDK.Month : Swift.RawRepresentable {}
extension NoorSDK.YouTubePlayerState : Swift.Equatable {}
extension NoorSDK.YouTubePlayerState : Swift.Hashable {}
extension NoorSDK.YouTubePlayerState : Swift.RawRepresentable {}
extension NoorSDK.YouTubePlayerEvents : Swift.Equatable {}
extension NoorSDK.YouTubePlayerEvents : Swift.Hashable {}
extension NoorSDK.YouTubePlayerEvents : Swift.RawRepresentable {}
extension NoorSDK.YouTubePlaybackQuality : Swift.Equatable {}
extension NoorSDK.YouTubePlaybackQuality : Swift.Hashable {}
extension NoorSDK.YouTubePlaybackQuality : Swift.RawRepresentable {}
extension NoorSDK.subtitlesFormat : Swift.Equatable {}
extension NoorSDK.subtitlesFormat : Swift.Hashable {}
extension NoorSDK.subtitlesFormat : Swift.RawRepresentable {}
extension NoorSDK.ISO8601ParserError : Swift.Equatable {}
extension NoorSDK.ISO8601ParserError : Swift.Hashable {}
extension NoorSDK.ISOParser.ParsedDate.DateStyle : Swift.Equatable {}
extension NoorSDK.ISOParser.ParsedDate.DateStyle : Swift.Hashable {}
extension NoorSDK.FloatingPanelPosition : Swift.Equatable {}
extension NoorSDK.FloatingPanelPosition : Swift.Hashable {}
extension NoorSDK.FloatingPanelPosition : Swift.RawRepresentable {}
@available(iOSApplicationExtension, unavailable)
extension NoorSDK.IQAutoToolbarManageBehaviour : Swift.Equatable {}
@available(iOSApplicationExtension, unavailable)
extension NoorSDK.IQAutoToolbarManageBehaviour : Swift.Hashable {}
@available(iOSApplicationExtension, unavailable)
extension NoorSDK.IQAutoToolbarManageBehaviour : Swift.RawRepresentable {}
@available(iOSApplicationExtension, unavailable)
extension NoorSDK.IQPreviousNextDisplayMode : Swift.Equatable {}
@available(iOSApplicationExtension, unavailable)
extension NoorSDK.IQPreviousNextDisplayMode : Swift.Hashable {}
@available(iOSApplicationExtension, unavailable)
extension NoorSDK.IQPreviousNextDisplayMode : Swift.RawRepresentable {}
@available(iOSApplicationExtension, unavailable)
extension NoorSDK.IQEnableMode : Swift.Equatable {}
@available(iOSApplicationExtension, unavailable)
extension NoorSDK.IQEnableMode : Swift.Hashable {}
@available(iOSApplicationExtension, unavailable)
extension NoorSDK.IQEnableMode : Swift.RawRepresentable {}
extension NoorSDK.VGPlayerState : Swift.Equatable {}
extension NoorSDK.VGPlayerState : Swift.Hashable {}
extension NoorSDK.VGPlayerState : Swift.RawRepresentable {}
extension NoorSDK.VGPlayerBufferstate : Swift.Equatable {}
extension NoorSDK.VGPlayerBufferstate : Swift.Hashable {}
extension NoorSDK.VGPlayerBufferstate : Swift.RawRepresentable {}
extension NoorSDK.VGVideoGravityMode : Swift.Equatable {}
extension NoorSDK.VGVideoGravityMode : Swift.Hashable {}
extension NoorSDK.VGVideoGravityMode : Swift.RawRepresentable {}
extension NoorSDK.VGPlayerBackgroundMode : Swift.Equatable {}
extension NoorSDK.VGPlayerBackgroundMode : Swift.Hashable {}
extension NoorSDK.VGPlayerBackgroundMode : Swift.RawRepresentable {}
extension NoorSDK.BAPrayer : Swift.Equatable {}
extension NoorSDK.BAPrayer : Swift.Hashable {}
extension NoorSDK.BAPrayer : Swift.RawRepresentable {}
extension NoorSDK.BACalculationMethod : Swift.Equatable {}
extension NoorSDK.BACalculationMethod : Swift.Hashable {}
extension NoorSDK.BACalculationMethod : Swift.RawRepresentable {}
extension NoorSDK.BAMadhab : Swift.Equatable {}
extension NoorSDK.BAMadhab : Swift.Hashable {}
extension NoorSDK.BAMadhab : Swift.RawRepresentable {}
extension NoorSDK.BAShafaq : Swift.Equatable {}
extension NoorSDK.BAShafaq : Swift.Hashable {}
extension NoorSDK.BAShafaq : Swift.RawRepresentable {}
extension NoorSDK.BARounding : Swift.Equatable {}
extension NoorSDK.BARounding : Swift.Hashable {}
extension NoorSDK.BARounding : Swift.RawRepresentable {}
extension NoorSDK.BAHighLatitudeRule : Swift.Equatable {}
extension NoorSDK.BAHighLatitudeRule : Swift.Hashable {}
extension NoorSDK.BAHighLatitudeRule : Swift.RawRepresentable {}
extension NoorSDK.HighLatitudeRule : Swift.Equatable {}
extension NoorSDK.HighLatitudeRule : Swift.Hashable {}
extension NoorSDK.HighLatitudeRule : Swift.RawRepresentable {}
extension NoorSDK.Madhab : Swift.Equatable {}
extension NoorSDK.Madhab : Swift.Hashable {}
extension NoorSDK.Madhab : Swift.RawRepresentable {}
extension NoorSDK.KeyboardTrackingView.Change : Swift.Equatable {}
extension NoorSDK.KeyboardTrackingView.Change : Swift.Hashable {}
extension NoorSDK.Shafaq : Swift.Equatable {}
extension NoorSDK.Shafaq : Swift.Hashable {}
extension NoorSDK.Shafaq : Swift.RawRepresentable {}
extension NoorSDK.FloatingPanelReferenceEdge : Swift.Equatable {}
extension NoorSDK.FloatingPanelReferenceEdge : Swift.Hashable {}
extension NoorSDK.FloatingPanelReferenceEdge : Swift.RawRepresentable {}
extension NoorSDK.FloatingPanelLayoutReferenceGuide : Swift.Equatable {}
extension NoorSDK.FloatingPanelLayoutReferenceGuide : Swift.Hashable {}
extension NoorSDK.FloatingPanelLayoutReferenceGuide : Swift.RawRepresentable {}
extension NoorSDK.FloatingPanelLayoutContentBoundingGuide : Swift.Equatable {}
extension NoorSDK.FloatingPanelLayoutContentBoundingGuide : Swift.Hashable {}
extension NoorSDK.FloatingPanelLayoutContentBoundingGuide : Swift.RawRepresentable {}
extension NoorSDK.SwiftMessagesSegue.Layout : Swift.Equatable {}
extension NoorSDK.SwiftMessagesSegue.Layout : Swift.Hashable {}
extension NoorSDK.SwiftMessagesSegue.Containment : Swift.Equatable {}
extension NoorSDK.SwiftMessagesSegue.Containment : Swift.Hashable {}
extension NoorSDK.SortMode : Swift.Equatable {}
extension NoorSDK.SortMode : Swift.Hashable {}
extension NoorSDK.SwiftMessages : NoorSDK.AnimationDelegate {}
extension NoorSDK.MessageView.Layout : Swift.Equatable {}
extension NoorSDK.MessageView.Layout : Swift.Hashable {}
extension NoorSDK.MessageView.Layout : Swift.RawRepresentable {}
extension NoorSDK.VGPlayerMediaFormat : Swift.Equatable {}
extension NoorSDK.VGPlayerMediaFormat : Swift.Hashable {}
extension NoorSDK.VGPlayerMediaFormat : Swift.RawRepresentable {}
extension NoorSDK.TopBottomAnimation.Style : Swift.Equatable {}
extension NoorSDK.TopBottomAnimation.Style : Swift.Hashable {}
extension NoorSDK.Prayer : Swift.Equatable {}
extension NoorSDK.Prayer : Swift.Hashable {}
extension NoorSDK.CalculationMethod : Swift.Equatable {}
extension NoorSDK.CalculationMethod : Swift.Hashable {}
extension NoorSDK.CalculationMethod : Swift.RawRepresentable {}
extension NoorSDK.PhysicsAnimation.Placement : Swift.Equatable {}
extension NoorSDK.PhysicsAnimation.Placement : Swift.Hashable {}
extension NoorSDK.Zones : Swift.Equatable {}
extension NoorSDK.Zones : Swift.Hashable {}
extension NoorSDK.Zones : Swift.RawRepresentable {}
extension NoorSDK.TimePeriodRelation : Swift.Equatable {}
extension NoorSDK.TimePeriodRelation : Swift.Hashable {}
extension NoorSDK.IntervalType : Swift.Equatable {}
extension NoorSDK.IntervalType : Swift.Hashable {}
extension NoorSDK.TimePeriodAnchor : Swift.Equatable {}
extension NoorSDK.TimePeriodAnchor : Swift.Hashable {}
extension NoorSDK.VGPlayerCacheActionType : Swift.Equatable {}
extension NoorSDK.VGPlayerCacheActionType : Swift.Hashable {}
extension NoorSDK.VGPlayerCacheActionType : Swift.RawRepresentable {}
extension NoorSDK.LineCap : Swift.Equatable {}
extension NoorSDK.LineCap : Swift.Hashable {}
extension NoorSDK.LineCap : Swift.RawRepresentable {}
extension NoorSDK.Orientation : Swift.Equatable {}
extension NoorSDK.Orientation : Swift.Hashable {}
extension NoorSDK.Orientation : Swift.RawRepresentable {}
extension NoorSDK.FloatingPanelController.ContentInsetAdjustmentBehavior : Swift.Equatable {}
extension NoorSDK.FloatingPanelController.ContentInsetAdjustmentBehavior : Swift.Hashable {}
extension NoorSDK.FloatingPanelController.ContentInsetAdjustmentBehavior : Swift.RawRepresentable {}
extension NoorSDK.FloatingPanelController.ContentMode : Swift.Equatable {}
extension NoorSDK.FloatingPanelController.ContentMode : Swift.Hashable {}
extension NoorSDK.FloatingPanelController.ContentMode : Swift.RawRepresentable {}
extension NoorSDK.SymbolFormatStyle : Swift.Equatable {}
extension NoorSDK.SymbolFormatStyle : Swift.Hashable {}
extension NoorSDK.FSPagerViewTransformerType : Swift.Equatable {}
extension NoorSDK.FSPagerViewTransformerType : Swift.Hashable {}
extension NoorSDK.FSPagerViewTransformerType : Swift.RawRepresentable {}
extension NoorSDK.FSPagerView.ScrollDirection : Swift.Equatable {}
extension NoorSDK.FSPagerView.ScrollDirection : Swift.Hashable {}
extension NoorSDK.FSPagerView.ScrollDirection : Swift.RawRepresentable {}
extension NoorSDK.Rounding : Swift.Equatable {}
extension NoorSDK.Rounding : Swift.Hashable {}
extension NoorSDK.Rounding : Swift.RawRepresentable {}
