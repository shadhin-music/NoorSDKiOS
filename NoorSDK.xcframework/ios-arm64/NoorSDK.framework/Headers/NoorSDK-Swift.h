#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef NOORSDK_SWIFT_H
#define NOORSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import QuartzCore;
@import StoreKit;
@import UIKit;
@import WebKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="NoorSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

typedef SWIFT_ENUM(NSInteger, BACalculationMethod, open) {
  BACalculationMethodMuslimWorldLeague = 0,
  BACalculationMethodEgyptian = 1,
  BACalculationMethodKarachi = 2,
  BACalculationMethodUmmAlQura = 3,
  BACalculationMethodDubai = 4,
  BACalculationMethodMoonsightingCommittee = 5,
  BACalculationMethodNorthAmerica = 6,
  BACalculationMethodKuwait = 7,
  BACalculationMethodQatar = 8,
  BACalculationMethodOther = 9,
  BACalculationMethodSingapore = 10,
  BACalculationMethodTehran = 11,
  BACalculationMethodTurkey = 12,
};

enum BAMadhab : NSInteger;
enum BAHighLatitudeRule : NSInteger;
@class BAPrayerAdjustments;
enum BAShafaq : NSInteger;
enum BARounding : NSInteger;

SWIFT_CLASS("_TtC7NoorSDK23BACalculationParameters")
@interface BACalculationParameters : NSObject
@property (nonatomic) enum BACalculationMethod method;
@property (nonatomic) double fajrAngle;
@property (nonatomic) double maghribAngle;
@property (nonatomic) double ishaAngle;
@property (nonatomic) NSInteger ishaInterval;
@property (nonatomic) enum BAMadhab madhab;
@property (nonatomic) enum BAHighLatitudeRule highLatitudeRule;
@property (nonatomic, strong) BAPrayerAdjustments * _Nonnull adjustments;
@property (nonatomic) enum BAShafaq shafaq;
@property (nonatomic) enum BARounding rounding;
- (nonnull instancetype)initWithFajrAngle:(double)fajrAngle maghribAngle:(double)maghribAngle ishaAngle:(double)ishaAngle ishaInterval:(NSInteger)ishaInterval OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithMethod:(enum BACalculationMethod)method;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7NoorSDK13BACoordinates")
@interface BACoordinates : NSObject
@property (nonatomic) double latitude;
@property (nonatomic) double longitude;
- (nonnull instancetype)initWithLatitude:(double)latitude longitude:(double)longitude OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, BAHighLatitudeRule, open) {
  BAHighLatitudeRuleMiddleOfTheNight = 0,
  BAHighLatitudeRuleSeventhOfTheNight = 1,
  BAHighLatitudeRuleTwilightAngle = 2,
};

typedef SWIFT_ENUM(NSInteger, BAMadhab, open) {
  BAMadhabShafi = 0,
  BAMadhabHanafi = 1,
};

typedef SWIFT_ENUM(NSInteger, BAPrayer, open) {
  BAPrayerFajr = 0,
  BAPrayerSunrise = 1,
  BAPrayerDhuhr = 2,
  BAPrayerAsr = 3,
  BAPrayerMaghrib = 4,
  BAPrayerIsha = 5,
  BAPrayerNone = 6,
};


SWIFT_CLASS("_TtC7NoorSDK19BAPrayerAdjustments")
@interface BAPrayerAdjustments : NSObject
@property (nonatomic) NSInteger fajr;
@property (nonatomic) NSInteger sunrise;
@property (nonatomic) NSInteger dhuhr;
@property (nonatomic) NSInteger asr;
@property (nonatomic) NSInteger maghrib;
@property (nonatomic) NSInteger isha;
- (nonnull instancetype)initWithFajr:(NSInteger)fajr sunrise:(NSInteger)sunrise dhuhr:(NSInteger)dhuhr asr:(NSInteger)asr maghrib:(NSInteger)maghrib isha:(NSInteger)isha OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSDate;
@class NSDateComponents;

SWIFT_CLASS("_TtC7NoorSDK13BAPrayerTimes")
@interface BAPrayerTimes : NSObject
@property (nonatomic, copy) NSDate * _Nullable fajr;
@property (nonatomic, copy) NSDate * _Nullable sunrise;
@property (nonatomic, copy) NSDate * _Nullable dhuhr;
@property (nonatomic, copy) NSDate * _Nullable asr;
@property (nonatomic, copy) NSDate * _Nullable maghrib;
@property (nonatomic, copy) NSDate * _Nullable isha;
- (nonnull instancetype)initWithCoordinates:(BACoordinates * _Nonnull)coordinates date:(NSDateComponents * _Nonnull)date calculationParameters:(BACalculationParameters * _Nonnull)calculationParameters OBJC_DESIGNATED_INITIALIZER;
- (enum BAPrayer)currentPrayer:(NSDate * _Nullable)time SWIFT_WARN_UNUSED_RESULT;
- (enum BAPrayer)nextPrayer:(NSDate * _Nullable)time SWIFT_WARN_UNUSED_RESULT;
- (NSDate * _Nullable)timeForPrayer:(enum BAPrayer)prayer SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7NoorSDK7BAQibla")
@interface BAQibla : NSObject
@property (nonatomic) double direction;
- (nonnull instancetype)initWithCoordinates:(BACoordinates * _Nonnull)coordinates OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, BARounding, open) {
  BARoundingNearest = 0,
  BARoundingUp = 1,
  BARoundingNone = 2,
};

typedef SWIFT_ENUM(NSInteger, BAShafaq, open) {
  BAShafaqGeneral = 0,
  BAShafaqAhmer = 1,
  BAShafaqAbyad = 2,
};

@class UITapGestureRecognizer;
@class NSCoder;

/// A view that presents a backdrop interface behind a panel.
SWIFT_CLASS_NAMED("BackdropView")
@interface FloatingPanelBackdropView : UIView
/// The gesture recognizer for tap gestures to dismiss a panel.
/// By default, this gesture recognizer is disabled as following the default behavior of iOS modalities.
/// To dismiss a panel by tap gestures on the backdrop, <code>dismissalTapGestureRecognizer.isEnabled</code> is set to true.
@property (nonatomic, strong) UITapGestureRecognizer * _Nonnull dismissalTapGestureRecognizer;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class UIEvent;

/// The <code>BaseView</code> class is a reusable message view base class that implements some
/// of the optional SwiftMessages protocols and provides some convenience functions
/// and a configurable tap handler. Message views do not need to inherit from <code>BaseVew</code>.
SWIFT_CLASS("_TtC7NoorSDK8BaseView")
@interface BaseView : UIView
/// Fulfills the <code>BackgroundViewable</code> protocol and is the target for
/// the optional <code>tapHandler</code> block. Defaults to <code>self</code>.
@property (nonatomic, weak) IBOutlet UIView * _Null_unspecified backgroundView;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
/// IBInspectable access to layoutMarginAdditions.top
@property (nonatomic) IBInspectable CGFloat topLayoutMarginAddition;
/// IBInspectable access to layoutMarginAdditions.left
@property (nonatomic) IBInspectable CGFloat leftLayoutMarginAddition;
/// IBInspectable access to layoutMarginAdditions.bottom
@property (nonatomic) IBInspectable CGFloat bottomLayoutMarginAddition;
/// IBInspectable access to layoutMarginAdditions.right
@property (nonatomic) IBInspectable CGFloat rightLayoutMarginAddition;
@property (nonatomic) IBInspectable BOOL collapseLayoutMarginAdditions;
@property (nonatomic) IBInspectable CGFloat bounceAnimationOffset;
- (void)updateConstraints;
@end



@interface BaseView (SWIFT_EXTENSION(NoorSDK))
- (void)layoutSubviews;
@end







@class UILabel;
@class UIColor;
@class NSString;
@class UIFont;

IB_DESIGNABLE
SWIFT_CLASS("_TtC7NoorSDK16CircularProgress")
@interface CircularProgress : UIView
@property (nonatomic, strong) IBInspectable UILabel * _Nonnull titleLabel;
/// Stroke background color
@property (nonatomic) IBInspectable BOOL clockwise;
/// Stroke background color
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull backgroundShapeColor;
/// Progress stroke color
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull progressShapeColor;
/// Line width
@property (nonatomic) IBInspectable CGFloat lineWidth;
/// Space value
@property (nonatomic) IBInspectable CGFloat spaceDegree;
/// The progress shapes line width will be the <code>line width</code> minus the <code>inset</code>.
@property (nonatomic) IBInspectable CGFloat inset;
@property (nonatomic, copy) IBInspectable NSString * _Nonnull percentLabelFormat;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull percentColor;
/// progress text (progress bottom label)
@property (nonatomic, copy) IBInspectable NSString * _Nonnull title;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull titleColor;
@property (nonatomic, strong) IBInspectable UIFont * _Nonnull font;
/// Returns the current progress.
@property (nonatomic, readonly) IBInspectable CGFloat progress;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end


SWIFT_CLASS("_TtC7NoorSDK15CoreIntegration")
@interface CoreIntegration : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A background view that messages can use for rounding all or a subset of corners with squircles
/// (the smoother method of rounding corners that you see on app icons).
SWIFT_CLASS("_TtC7NoorSDK18CornerRoundingView")
@interface CornerRoundingView : UIView
/// Specifies the corner radius to use.
@property (nonatomic) IBInspectable CGFloat cornerRadius;
/// Set to <code>true</code> for layouts where only the leading corners should be
/// rounded. For example, the layout in TabView.xib rounds the bottom corners
/// when displayed from the top and the top corners when displayed from the bottom.
/// When this property is <code>true</code>, the <code>roundedCorners</code> property will be overwritten
/// by relevant animators (e.g. <code>TopBottomAnimation</code>).
@property (nonatomic) IBInspectable BOOL roundsLeadingCorners;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end






SWIFT_CLASS("_TtC7NoorSDK8DropDown")
@interface DropDown : UITextField
@property (nonatomic) IBInspectable CGFloat rowHeight;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull rowBackgroundColor;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull itemsColor;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull itemsTintColor;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull selectedRowColor;
@property (nonatomic) IBInspectable BOOL hideOptionsWhenSelect;
@property (nonatomic) IBInspectable BOOL isSearchEnable;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull borderColorr;
@property (nonatomic) IBInspectable CGFloat listHeight;
@property (nonatomic) IBInspectable CGFloat borderWidth;
@property (nonatomic) IBInspectable CGFloat cornerRadius;
@property (nonatomic) IBInspectable CGFloat arrowSize;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull arrowColor;
@property (nonatomic) IBInspectable BOOL checkMarkEnabled;
@property (nonatomic) IBInspectable BOOL handleKeyboard;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)touchAction;
@end

@class UITableView;
@class NSIndexPath;

@interface DropDown (SWIFT_EXTENSION(NoorSDK)) <UITableViewDelegate>
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end

@class UITableViewCell;

@interface DropDown (SWIFT_EXTENSION(NoorSDK)) <UITableViewDataSource>
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


@interface DropDown (SWIFT_EXTENSION(NoorSDK)) <UITextFieldDelegate>
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
- (BOOL)textFieldShouldBeginEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
@end

@class CALayer;
@class UIImage;
@class UIBezierPath;

IB_DESIGNABLE
SWIFT_CLASS("_TtC7NoorSDK13FSPageControl")
@interface FSPageControl : UIControl
/// The number of page indicators of the page control. Default is 0.
@property (nonatomic) IBInspectable NSInteger numberOfPages;
/// The current page, highlighted by the page control. Default is 0.
@property (nonatomic) IBInspectable NSInteger currentPage;
/// The spacing to use of page indicators in the page control.
@property (nonatomic) IBInspectable CGFloat itemSpacing;
/// The spacing to use between page indicators in the page control.
@property (nonatomic) IBInspectable CGFloat interitemSpacing;
/// The distance that the page indicators is inset from the enclosing page control.
@property (nonatomic) IBInspectable UIEdgeInsets contentInsets;
/// The horizontal alignment of content within the control’s bounds. Default is center.
@property (nonatomic) UIControlContentHorizontalAlignment contentHorizontalAlignment;
/// Hide the indicator if there is only one page. default is NO
@property (nonatomic) IBInspectable BOOL hidesForSinglePage;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (void)layoutSublayersOfLayer:(CALayer * _Nonnull)layer;
/// Sets the stroke color for page indicators to use for the specified state. (selected/normal).
/// \param strokeColor The stroke color to use for the specified state.
///
/// \param state The state that uses the specified stroke color.
///
- (void)setStrokeColor:(UIColor * _Nullable)strokeColor forState:(UIControlState)state;
/// Sets the fill color for page indicators to use for the specified state. (selected/normal).
/// \param fillColor The fill color to use for the specified state.
///
/// \param state The state that uses the specified fill color.
///
- (void)setFillColor:(UIColor * _Nullable)fillColor forState:(UIControlState)state;
/// Sets the image for page indicators to use for the specified state. (selected/normal).
/// \param image The image to use for the specified state.
///
/// \param state The state that uses the specified image.
///
- (void)setImage:(UIImage * _Nullable)image forState:(UIControlState)state;
- (void)setAlpha:(CGFloat)alpha forState:(UIControlState)state;
/// Sets the path for page indicators to use for the specified state. (selected/normal).
/// \param path The path to use for the specified state.
///
/// \param state The state that uses the specified path.
///
- (void)setPath:(UIBezierPath * _Nullable)path forState:(UIControlState)state;
@end

@protocol FSPagerViewDataSource;
@protocol FSPagerViewDelegate;
enum ScrollDirection : NSInteger;
@class FSPagerViewTransformer;
@class UIPanGestureRecognizer;
@class UIWindow;
@class UICollectionView;
@class UICollectionViewCell;
@class UIScrollView;
@class UINib;
@class FSPagerViewCell;

IB_DESIGNABLE
SWIFT_CLASS("_TtC7NoorSDK11FSPagerView")
@interface FSPagerView : UIView <UICollectionViewDataSource, UICollectionViewDelegate>
/// The object that acts as the data source of the pager view.
@property (nonatomic, weak) IBOutlet id <FSPagerViewDataSource> _Nullable dataSource;
/// The object that acts as the delegate of the pager view.
@property (nonatomic, weak) IBOutlet id <FSPagerViewDelegate> _Nullable delegate;
/// The scroll direction of the pager view. Default is horizontal.
@property (nonatomic) enum ScrollDirection scrollDirection;
/// The time interval of automatic sliding. 0 means disabling automatic sliding. Default is 0.
@property (nonatomic) IBInspectable CGFloat automaticSlidingInterval;
/// The spacing to use between items in the pager view. Default is 0.
@property (nonatomic) IBInspectable CGFloat interitemSpacing;
/// The item size of the pager view. When the value of this property is FSPagerView.automaticSize, the items fill the entire visible area of the pager view. Default is FSPagerView.automaticSize.
@property (nonatomic) IBInspectable CGSize itemSize;
/// A Boolean value indicates that whether the pager view has infinite items. Default is false.
@property (nonatomic) IBInspectable BOOL isInfinite;
/// An unsigned integer value that determines the deceleration distance of the pager view, which indicates the number of passing items during the deceleration. When the value of this property is FSPagerView.automaticDistance, the actual ‘distance’ is automatically calculated according to the scrolling speed of the pager view. Default is 1.
@property (nonatomic) IBInspectable NSUInteger decelerationDistance;
/// A Boolean value that determines whether scrolling is enabled.
@property (nonatomic) IBInspectable BOOL isScrollEnabled;
/// A Boolean value that controls whether the pager view bounces past the edge of content and back again.
@property (nonatomic) IBInspectable BOOL bounces;
/// A Boolean value that determines whether bouncing always occurs when horizontal scrolling reaches the end of the content view.
@property (nonatomic) IBInspectable BOOL alwaysBounceHorizontal;
/// A Boolean value that determines whether bouncing always occurs when vertical scrolling reaches the end of the content view.
@property (nonatomic) IBInspectable BOOL alwaysBounceVertical;
/// A Boolean value that controls whether the infinite loop is removed if there is only one item. Default is false.
@property (nonatomic) IBInspectable BOOL removesInfiniteLoopForSingleItem;
/// The background view of the pager view.
@property (nonatomic, strong) IBInspectable UIView * _Nullable backgroundView;
/// The transformer of the pager view.
@property (nonatomic, strong) FSPagerViewTransformer * _Nullable transformer;
/// Returns whether the user has touched the content to initiate scrolling.
@property (nonatomic, readonly) BOOL isTracking;
/// The percentage of x position at which the origin of the content view is offset from the origin of the pagerView view.
@property (nonatomic, readonly) CGFloat scrollOffset;
/// The underlying gesture recognizer for pan gestures.
@property (nonatomic, readonly, strong) UIPanGestureRecognizer * _Nonnull panGestureRecognizer;
@property (nonatomic, readonly) NSInteger currentIndex;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (void)willMoveToWindow:(UIWindow * _Nullable)newWindow;
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (BOOL)collectionView:(UICollectionView * _Nonnull)collectionView shouldHighlightItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didHighlightItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (BOOL)collectionView:(UICollectionView * _Nonnull)collectionView shouldSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView willDisplayCell:(UICollectionViewCell * _Nonnull)cell forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didEndDisplayingCell:(UICollectionViewCell * _Nonnull)cell forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset;
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndScrollingAnimation:(UIScrollView * _Nonnull)scrollView;
/// Register a class for use in creating new pager view cells.
/// \param cellClass The class of a cell that you want to use in the pager view.
///
/// \param identifier The reuse identifier to associate with the specified class. This parameter must not be nil and must not be an empty string.
///
- (void)registerClass:(Class _Nullable)cellClass forCellWithReuseIdentifier:(NSString * _Nonnull)identifier;
/// Register a nib file for use in creating new pager view cells.
/// \param nib The nib object containing the cell object. The nib file must contain only one top-level object and that object must be of the type FSPagerViewCell.
///
/// \param identifier The reuse identifier to associate with the specified nib file. This parameter must not be nil and must not be an empty string.
///
- (void)registerNib:(UINib * _Nullable)nib forCellWithReuseIdentifier:(NSString * _Nonnull)identifier;
/// Returns a reusable cell object located by its identifier
/// \param identifier The reuse identifier for the specified cell. This parameter must not be nil.
///
/// \param index The index specifying the location of the cell.
///
///
/// returns:
/// A valid FSPagerViewCell object.
- (FSPagerViewCell * _Nonnull)dequeueReusableCellWithReuseIdentifier:(NSString * _Nonnull)identifier atIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Reloads all of the data for the collection view.
- (void)reloadData;
/// Selects the item at the specified index and optionally scrolls it into view.
/// \param index The index path of the item to select.
///
/// \param animated Specify true to animate the change in the selection or false to make the change without animating it.
///
- (void)selectItemAtIndex:(NSInteger)index animated:(BOOL)animated;
/// Deselects the item at the specified index.
/// \param index The index of the item to deselect.
///
/// \param animated Specify true to animate the change in the selection or false to make the change without animating it.
///
- (void)deselectItemAtIndex:(NSInteger)index animated:(BOOL)animated;
/// Scrolls the pager view contents until the specified item is visible.
/// \param index The index of the item to scroll into view.
///
/// \param animated Specify true to animate the scrolling behavior or false to adjust the pager view’s visible content immediately.
///
- (void)scrollToItemAtIndex:(NSInteger)index animated:(BOOL)animated;
/// Returns the index of the specified cell.
/// \param cell The cell object whose index you want.
///
///
/// returns:
/// The index of the cell or NSNotFound if the specified cell is not in the pager view.
- (NSInteger)indexForCell:(FSPagerViewCell * _Nonnull)cell SWIFT_WARN_UNUSED_RESULT;
/// Returns the visible cell at the specified index.
/// \param index The index that specifies the position of the cell.
///
///
/// returns:
/// The cell object at the corresponding position or nil if the cell is not visible or index is out of range.
- (FSPagerViewCell * _Nullable)cellForItemAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
@end


@interface FSPagerView (SWIFT_EXTENSION(NoorSDK))
@end

/// Constants indicating the direction of scrolling for the pager view.
typedef SWIFT_ENUM(NSInteger, ScrollDirection, open) {
/// The pager view scrolls content horizontally
  ScrollDirectionHorizontal = 0,
/// The pager view scrolls content vertically
  ScrollDirectionVertical = 1,
};

@class UIImageView;

SWIFT_CLASS("_TtC7NoorSDK15FSPagerViewCell")
@interface FSPagerViewCell : UICollectionViewCell
/// Returns the label used for the main textual content of the pager view cell.
@property (nonatomic, readonly, strong) UILabel * _Nullable textLabel;
/// Returns the image view of the pager view cell. Default is nil.
@property (nonatomic, readonly, strong) UIImageView * _Nullable imageView;
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
@property (nonatomic, getter=isSelected) BOOL selected;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end


SWIFT_PROTOCOL("_TtP7NoorSDK21FSPagerViewDataSource_")
@protocol FSPagerViewDataSource <NSObject>
/// Asks your data source object for the number of items in the pager view.
- (NSInteger)numberOfItemsInPagerView:(FSPagerView * _Nonnull)pagerView SWIFT_WARN_UNUSED_RESULT;
/// Asks your data source object for the cell that corresponds to the specified item in the pager view.
- (FSPagerViewCell * _Nonnull)pagerView:(FSPagerView * _Nonnull)pagerView cellForItemAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP7NoorSDK19FSPagerViewDelegate_")
@protocol FSPagerViewDelegate <NSObject>
@optional
/// Asks the delegate if the item should be highlighted during tracking.
- (BOOL)pagerView:(FSPagerView * _Nonnull)pagerView shouldHighlightItemAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Tells the delegate that the item at the specified index was highlighted.
- (void)pagerView:(FSPagerView * _Nonnull)pagerView didHighlightItemAtIndex:(NSInteger)index;
/// Asks the delegate if the specified item should be selected.
- (BOOL)pagerView:(FSPagerView * _Nonnull)pagerView shouldSelectItemAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
/// Tells the delegate that the item at the specified index was selected.
- (void)pagerView:(FSPagerView * _Nonnull)pagerView didSelectItemAtIndex:(NSInteger)index;
/// Tells the delegate that the specified cell is about to be displayed in the pager view.
- (void)pagerView:(FSPagerView * _Nonnull)pagerView willDisplayCell:(FSPagerViewCell * _Nonnull)cell forItemAtIndex:(NSInteger)index;
/// Tells the delegate that the specified cell was removed from the pager view.
- (void)pagerView:(FSPagerView * _Nonnull)pagerView didEndDisplayingCell:(FSPagerViewCell * _Nonnull)cell forItemAtIndex:(NSInteger)index;
/// Tells the delegate when the pager view is about to start scrolling the content.
- (void)pagerViewWillBeginDragging:(FSPagerView * _Nonnull)pagerView;
/// Tells the delegate when the user finishes scrolling the content.
- (void)pagerViewWillEndDragging:(FSPagerView * _Nonnull)pagerView targetIndex:(NSInteger)targetIndex;
/// Tells the delegate when the user scrolls the content view within the receiver.
- (void)pagerViewDidScroll:(FSPagerView * _Nonnull)pagerView;
/// Tells the delegate when a scrolling animation in the pager view concludes.
- (void)pagerViewDidEndScrollAnimation:(FSPagerView * _Nonnull)pagerView;
/// Tells the delegate that the pager view has ended decelerating the scrolling movement.
- (void)pagerViewDidEndDecelerating:(FSPagerView * _Nonnull)pagerView;
@end


SWIFT_CLASS("_TtC7NoorSDK27FSPagerViewLayoutAttributes")
@interface FSPagerViewLayoutAttributes : UICollectionViewLayoutAttributes
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum FSPagerViewTransformerType : NSInteger;

SWIFT_CLASS("_TtC7NoorSDK22FSPagerViewTransformer")
@interface FSPagerViewTransformer : NSObject
- (nonnull instancetype)initWithType:(enum FSPagerViewTransformerType)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, FSPagerViewTransformerType, open) {
  FSPagerViewTransformerTypeCrossFading = 0,
  FSPagerViewTransformerTypeZoomOut = 1,
  FSPagerViewTransformerTypeDepth = 2,
  FSPagerViewTransformerTypeOverlap = 3,
  FSPagerViewTransformerTypeLinear = 4,
  FSPagerViewTransformerTypeCoverFlow = 5,
  FSPagerViewTransformerTypeFerrisWheel = 6,
  FSPagerViewTransformerTypeInvertedFerrisWheel = 7,
  FSPagerViewTransformerTypeCubic = 8,
};

enum FloatingPanelLayoutReferenceGuide : NSInteger;
@class FloatingPanelController;
enum FloatingPanelPosition : NSInteger;
@class NSLayoutConstraint;

/// An interface for implementing custom layout anchor objects.
SWIFT_PROTOCOL("_TtP7NoorSDK28FloatingPanelLayoutAnchoring_")
@protocol FloatingPanelLayoutAnchoring
@property (nonatomic, readonly) enum FloatingPanelLayoutReferenceGuide referenceGuide;
- (NSArray<NSLayoutConstraint *> * _Nonnull)layoutConstraints:(FloatingPanelController * _Nonnull)fpc for:(enum FloatingPanelPosition)position SWIFT_WARN_UNUSED_RESULT;
@end

@class UILayoutGuide;
enum FloatingPanelLayoutContentBoundingGuide : NSInteger;

/// An object that defines how to settles a panel with a layout guide of a content view.
SWIFT_CLASS("_TtC7NoorSDK33FloatingPanelAdaptiveLayoutAnchor")
@interface FloatingPanelAdaptiveLayoutAnchor : NSObject <FloatingPanelLayoutAnchoring>
/// Returns a layout anchor with the specified offset by an absolute value to display a panel with its intrinsic content size.
/// The offset is an amount to offset a position of panel that displays the entire content of the specified guide from an edge of
/// the reference guide.  The edge refers to a panel positioning.
/// <code>contentBoundingGuide</code> restricts the content size which a panel displays. For example, given <code>referenceGuide</code> is <code>.superview</code> and <code>contentBoundingGuide</code> is <code>.safeArea</code> for a bottom positioned panel, the panel content is laid out inside the superview of the view of FloatingPanelController(not its safe area), but its content size is limited to its safe area size. Normally both of <code>referenceGuide</code> and <code>contentBoundingGuide</code> are specified with the same rectangle area.
/// warning:
/// If <code>contentBoundingGuide</code> is set to none, the panel may expand out of the screen size, depending on the intrinsic size of its content.
/// \param absoluteOffset An absolute offset from the content size in the main dimension(i.e. y axis for a bottom panel) to attach the panel.
///
/// \param contentLayout The content layout guide to calculate the content size in the panel.
///
/// \param referenceGuide The rectangular area to lay out the content of a panel. If it’s set to <code>.safeArea</code>, the panel content displays inside the safe area of its <code>FloatingPanelController</code>‘s view. This argument doesn’t limit its content size.
///
/// \param contentBoundingGuide The rectangular area to restrict the content size of a panel in the main dimension(i.e. y axis is the main dimension for a bottom panel).
///
- (nonnull instancetype)initWithAbsoluteOffset:(CGFloat)offset contentLayout:(UILayoutGuide * _Nonnull)contentLayout referenceGuide:(enum FloatingPanelLayoutReferenceGuide)referenceGuide contentBoundingGuide:(enum FloatingPanelLayoutContentBoundingGuide)contentBoundingGuide OBJC_DESIGNATED_INITIALIZER;
/// Returns a layout anchor with the specified offset by a fractional value to display a panel with its intrinsic content size.
/// The offset value is a floating-point number in the range 0.0 to 1.0, where 0.0 represents the full content
/// is displayed and 0.5 represents the half of content is displayed.
/// <code>contentBoundingGuide</code> restricts the content size which a panel displays. For example, given <code>referenceGuide</code> is <code>.superview</code> and <code>contentBoundingGuide</code> is <code>.safeArea</code> for a bottom positioned panel, the panel content is laid out inside the superview of the view of FloatingPanelController(not its safe area), but its content size is limited to its safe area size. Normally both of <code>referenceGuide</code> and <code>contentBoundingGuide</code> are specified with the same rectangle area.
/// warning:
/// If <code>contentBoundingGuide</code> is set to none, the panel may expand out of the screen size, depending on the intrinsic size of its content.
/// \param fractionalOffset A fractional offset of the content size in the main dimension(i.e. y axis for a bottom panel) to attach the panel.
///
/// \param contentLayout The content layout guide to calculate the content size in the panel.
///
/// \param referenceGuide The rectangular area to lay out the content of a panel. If it’s set to <code>.safeArea</code>, the panel content displays inside the safe area of its <code>FloatingPanelController</code>‘s view. This argument doesn’t limit its content size.
///
/// \param contentBoundingGuide The rectangular area to restrict the content size of a panel in the main dimension(i.e. y axis is the main dimension for a bottom panel).
///
- (nonnull instancetype)initWithFractionalOffset:(CGFloat)offset contentLayout:(UILayoutGuide * _Nonnull)contentLayout referenceGuide:(enum FloatingPanelLayoutReferenceGuide)referenceGuide contentBoundingGuide:(enum FloatingPanelLayoutContentBoundingGuide)contentBoundingGuide OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) enum FloatingPanelLayoutReferenceGuide referenceGuide;
@property (nonatomic, readonly) enum FloatingPanelLayoutContentBoundingGuide contentBoundingGuide;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface FloatingPanelAdaptiveLayoutAnchor (SWIFT_EXTENSION(NoorSDK))
- (NSArray<NSLayoutConstraint *> * _Nonnull)layoutConstraints:(FloatingPanelController * _Nonnull)vc for:(enum FloatingPanelPosition)position SWIFT_WARN_UNUSED_RESULT;
@end


@class FloatingPanelState;

/// An interface for generating behavior information to fine-tune the behavior of a panel.
SWIFT_PROTOCOL("_TtP7NoorSDK21FloatingPanelBehavior_")
@protocol FloatingPanelBehavior
@optional
/// A floating-point value that determines the rate of oscillation magnitude reduction after the user lifts their finger.
/// The oscillation magnitude to attract a panel to an anchor can be adjusted this value between 0.979 and 1.0
/// in increments of 0.001. When this value is around 0.979, the attraction uses a critically damped spring system.
/// When this value is between 0.978 and 1.0, it uses a underdamped spring system with a damping ratio computed by
/// this value. You shouldn’t return less than 0.979 because the system is overdamped. If the pan gesture’s velocity
/// is less than 300, this value is ignored and a panel applies a critically damped system.
@property (nonatomic, readonly) CGFloat springDecelerationRate;
/// A floating-point value that determines the approximate time until a panel stops to an anchor after the user lifts their finger.
@property (nonatomic, readonly) CGFloat springResponseTime;
/// Returns a deceleration rate to calculate a target position projected a dragging momentum.
/// The default implementation of this method returns the normal deceleration rate of UIScrollView.
@property (nonatomic, readonly) CGFloat momentumProjectionRate;
/// Asks the behavior if a panel should project a momentum of a user interaction to move the proposed position.
/// The default implementation of this method returns true. This method is called for a layout to support all positions(tip, half and full).
/// Therefore, <code>proposedTargetPosition</code> can only be <code>FloatingPanelState.tip</code> or <code>FloatingPanelState.full</code>.
- (BOOL)shouldProjectMomentum:(FloatingPanelController * _Nonnull)fpc to:(FloatingPanelState * _Nonnull)proposedTargetPosition SWIFT_WARN_UNUSED_RESULT;
/// Returns the progress to redirect to the previous position.
/// The progress is represented by a floating-point value between 0.0 and 1.0, inclusive, where 1.0 indicates a panel is impossible to move to the next position. The default value is 0.5. Values less than 0.0 and greater than 1.0 are pinned to those limits.
- (CGFloat)redirectionalProgress:(FloatingPanelController * _Nonnull)fpc from:(FloatingPanelState * _Nonnull)from to:(FloatingPanelState * _Nonnull)to SWIFT_WARN_UNUSED_RESULT;
/// Asks the behavior whether the rubber band effect is enabled in moving over a given edge of the surface view.
/// This method allows a panel to activate the rubber band effect to a given edge of the surface view. By default, the effect is disabled.
- (BOOL)allowsRubberBandingFor:(UIRectEdge)edge SWIFT_WARN_UNUSED_RESULT;
/// Returns the velocity threshold for the default interactive removal gesture.
/// In case <code>FloatingPanel/FloatingPanelControllerDelegate/floatingPanel(_:shouldRemoveAt:with:)</code> is implemented, this value will not be used. The default value of <code>FloatingPanelDefaultBehavior</code> is 5.5
@property (nonatomic, readonly) CGFloat removalInteractionVelocityThreshold;
@end


/// An interface for generating layout information for a panel.
SWIFT_PROTOCOL("_TtP7NoorSDK19FloatingPanelLayout_")
@protocol FloatingPanelLayout
/// Returns the position of a panel in a <code>FloatingPanelController</code> view .
@property (nonatomic, readonly) enum FloatingPanelPosition position;
/// Returns the initial state when a panel is presented.
@property (nonatomic, readonly, strong) FloatingPanelState * _Nonnull initialState;
/// Returns the layout anchors to specify the snapping locations for each state.
@property (nonatomic, readonly, copy) NSDictionary<FloatingPanelState *, id <FloatingPanelLayoutAnchoring>> * _Nonnull anchors;
@optional
/// Returns layout constraints to determine the cross dimension of a panel.
- (NSArray<NSLayoutConstraint *> * _Nonnull)prepareLayoutWithSurfaceView:(UIView * _Nonnull)surfaceView in:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
/// Returns the alpha value of the backdrop of a panel for each state.
- (CGFloat)backdropAlphaFor:(FloatingPanelState * _Nonnull)state SWIFT_WARN_UNUSED_RESULT;
@end


/// A layout object that lays out a panel in bottom sheet style.
SWIFT_CLASS("_TtC7NoorSDK25FloatingPanelBottomLayout")
@interface FloatingPanelBottomLayout : NSObject <FloatingPanelLayout>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, strong) FloatingPanelState * _Nonnull initialState;
@property (nonatomic, readonly, copy) NSDictionary<FloatingPanelState *, id <FloatingPanelLayoutAnchoring>> * _Nonnull anchors;
@property (nonatomic, readonly) enum FloatingPanelPosition position;
- (NSArray<NSLayoutConstraint *> * _Nonnull)prepareLayoutWithSurfaceView:(UIView * _Nonnull)surfaceView in:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)backdropAlphaFor:(FloatingPanelState * _Nonnull)state SWIFT_WARN_UNUSED_RESULT;
@end

@protocol FloatingPanelControllerDelegate;
@class FloatingPanelSurfaceView;
@class FloatingPanelPanGestureRecognizer;
enum ContentInsetAdjustmentBehavior : NSInteger;
enum ContentMode : NSInteger;
@class NSBundle;
@protocol UIViewControllerTransitionCoordinator;
@class UITraitCollection;

/// A container view controller to display a panel to present contents in parallel as a user wants.
SWIFT_CLASS("_TtC7NoorSDK23FloatingPanelController")
@interface FloatingPanelController : UIViewController
/// The delegate of a panel controller object.
@property (nonatomic, weak) id <FloatingPanelControllerDelegate> _Nullable delegate;
/// Returns the surface view managed by the controller object. It’s the same as <code>self.view</code>.
@property (nonatomic, readonly, strong) FloatingPanelSurfaceView * _Null_unspecified surfaceView;
/// Returns the backdrop view managed by the controller object.
@property (nonatomic, readonly, strong) FloatingPanelBackdropView * _Null_unspecified backdropView;
/// Returns the scroll view that the controller tracks.
@property (nonatomic, readonly, weak) UIScrollView * _Nullable trackingScrollView;
@property (nonatomic, readonly, strong) FloatingPanelPanGestureRecognizer * _Nonnull panGestureRecognizer;
/// The current position of a panel controller’s contents.
@property (nonatomic, readonly, strong) FloatingPanelState * _Nonnull state;
/// A Boolean value indicating whether a panel controller is attracting the surface to a state anchor.
@property (nonatomic, readonly) BOOL isAttracting;
/// The layout object that the controller manages
/// You need to call <code>invalidateLayout()</code> if you want to apply a new layout object into the panel
/// immediately.
@property (nonatomic, strong) id <FloatingPanelLayout> _Nonnull layout;
/// The behavior object that the controller manages
@property (nonatomic, strong) id <FloatingPanelBehavior> _Nonnull behavior;
/// The content insets of the tracking scroll view derived from this safe area
@property (nonatomic, readonly) UIEdgeInsets adjustedContentInsets;
/// The behavior for determining the adjusted content offsets.
/// This property specifies how the content area of the tracking scroll view is modified using <code>adjustedContentInsets</code>. The default value of this property is FloatingPanelController.ContentInsetAdjustmentBehavior.always.
@property (nonatomic) enum ContentInsetAdjustmentBehavior contentInsetAdjustmentBehavior;
/// A Boolean value that determines whether the removal interaction is enabled.
@property (nonatomic, setter=setRemovalInteractionEnabled:) BOOL isRemovalInteractionEnabled;
/// The view controller responsible for the content portion of a panel.
@property (nonatomic, strong) UIViewController * _Nullable contentViewController;
/// Constants that define how a panel content fills in the surface.
@property (nonatomic) enum ContentMode contentMode;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
/// Initialize a newly created panel controller.
- (nonnull instancetype)initWithDelegate:(id <FloatingPanelControllerDelegate> _Nullable)delegate OBJC_DESIGNATED_INITIALIZER;
/// Creates the view that the controller manages.
- (void)loadView;
- (void)viewDidLayoutSubviews;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)willTransitionToTraitCollection:(UITraitCollection * _Nonnull)newCollection withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)viewWillDisappear:(BOOL)animated;
@property (nonatomic, readonly, strong) UIViewController * _Nullable childViewControllerForStatusBarStyle;
@property (nonatomic, readonly, strong) UIViewController * _Nullable childViewControllerForStatusBarHidden;
@property (nonatomic, readonly, strong) UIViewController * _Nullable childViewControllerForScreenEdgesDeferringSystemGestures;
@property (nonatomic, readonly, strong) UIViewController * _Nullable childViewControllerForHomeIndicatorAutoHidden;
/// Shows the surface view at the initial position defined by the current layout
/// \param animated Pass true to animate the presentation; otherwise, pass false.
///
/// \param completion The block to execute after the presentation finishes. This block has no return value and takes no parameters. You may specify nil for this parameter.
///
- (void)show:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
/// Hides the surface view to the hidden position
- (void)hide:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
/// Adds the view managed by the controller as a child of the specified view controller.
/// \param parent A parent view controller object that displays FloatingPanelController’s view. A container view controller object isn’t applicable.
///
/// \param viewIndex Insert the surface view managed by the controller below the specified view index. By default, the surface view will be added to the end of the parent list of subviews.
///
/// \param animated Pass true to animate the presentation; otherwise, pass false.
///
/// \param completion The block to execute after the presentation finishes. This block has no return value and takes no parameters. You may specify nil for this parameter.
///
- (void)addPanelToParent:(UIViewController * _Nonnull)parent at:(NSInteger)viewIndex animated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
/// Removes the controller and the managed view from its parent view controller
/// \param animated Pass true to animate the presentation; otherwise, pass false.
///
/// \param completion The block to execute after the view controller is dismissed. This block has no return value and takes no parameters. You may specify nil for this parameter.
///
- (void)removePanelFromParent:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
/// Moves the position to the specified position.
/// \param to Pass a FloatingPanelPosition value to move the surface view to the position.
///
/// \param animated Pass true to animate the presentation; otherwise, pass false.
///
/// \param completion The block to execute after the view controller has finished moving. This block has no return value and takes no parameters. You may specify nil for this parameter.
///
- (void)moveToState:(FloatingPanelState * _Nonnull)to animated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
/// Tracks the specified scroll view to correspond with the scroll.
/// \param scrollView Specify a scroll view to continuously and seamlessly work in concert with interactions of the surface view
///
- (void)trackScrollView:(UIScrollView * _Nonnull)scrollView;
/// Cancel tracking the specify scroll view.
- (void)untrackScrollView:(UIScrollView * _Nonnull)scrollView;
- (BOOL)accessibilityPerformEscape SWIFT_WARN_UNUSED_RESULT;
/// Invalidates all layout information of the panel and apply the <code>layout</code> property into it immediately.
/// This lays out subviews of the view that the controller manages with the <code>layout</code> property by
/// calling the view’s <code>layoutIfNeeded()</code>. Thus this method can be called in an animation block to
/// animate the panel’s changes.
/// If the controller has a delegate object, this will lay them out using the layout object returned by
/// <code>floatingPanel(_:layoutFor:)</code> delegate method for the current <code>UITraitCollection</code>.
- (void)invalidateLayout;
/// Returns the surface’s position in a panel controller’s view for the specified state.
/// If a panel is top positioned, this returns a point of the bottom-left corner of the surface. If it is left positioned
/// this returns a point of top-right corner of the surface. If it is bottom or right positioned, this returns a point
/// of the top-left corner of the surface.
- (CGPoint)surfaceLocationFor:(FloatingPanelState * _Nonnull)state SWIFT_WARN_UNUSED_RESULT;
/// The surface’s position in a panel controller’s view.
/// If a panel is top positioned, this returns a point of the bottom-left corner of the surface. If it is left positioned
/// this returns a point of top-right corner of the surface. If it is bottom or right positioned, this returns a point
/// of the top-left corner of the surface.
@property (nonatomic) CGPoint surfaceLocation;
@end

/// Constants indicating how safe area insets are added to the adjusted content inset.
typedef SWIFT_ENUM(NSInteger, ContentInsetAdjustmentBehavior, open) {
  ContentInsetAdjustmentBehaviorAlways = 0,
  ContentInsetAdjustmentBehaviorNever = 1,
};

/// A flag used to determine how the controller object lays out the content view when the surface position changes.
typedef SWIFT_ENUM(NSInteger, ContentMode, open) {
/// The option to fix the content to keep the height of the top most position.
  ContentModeStatic = 0,
/// The option to scale the content to fit the bounds of the root view by changing the surface position.
  ContentModeFitToBounds = 1,
};






@class UIViewPropertyAnimator;

/// A set of methods implemented by the delegate of a panel controller allows the adopting delegate to respond to
/// messages from the FloatingPanelController class and thus respond to, and in some affect, operations such as
/// dragging, attracting a panel, layout of a panel and the content, and transition animations.
SWIFT_PROTOCOL("_TtP7NoorSDK31FloatingPanelControllerDelegate_")
@protocol FloatingPanelControllerDelegate
@optional
/// Returns a FloatingPanelLayout object. If you use the default one, you can use a <code>FloatingPanelBottomLayout</code> object.
- (id <FloatingPanelLayout> _Nonnull)floatingPanel:(FloatingPanelController * _Nonnull)fpc layoutForTraitCollection:(UITraitCollection * _Nonnull)newCollection SWIFT_WARN_UNUSED_RESULT;
/// Returns a FloatingPanelLayout object. If you use the default one, you can use a <code>FloatingPanelBottomLayout</code> object.
- (id <FloatingPanelLayout> _Nonnull)floatingPanel:(FloatingPanelController * _Nonnull)fpc layoutForSize:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
/// Returns a UIViewPropertyAnimator object to add/present the  panel to a position.
/// Default is the spring animation with 0.25 secs.
- (UIViewPropertyAnimator * _Nonnull)floatingPanel:(FloatingPanelController * _Nonnull)fpc animatorForPresentingToState:(FloatingPanelState * _Nonnull)state SWIFT_WARN_UNUSED_RESULT;
/// Returns a UIViewPropertyAnimator object to remove/dismiss a panel from a position.
/// Default is the spring animator with 0.25 secs.
- (UIViewPropertyAnimator * _Nonnull)floatingPanel:(FloatingPanelController * _Nonnull)fpc animatorForDismissingWithVelocity:(CGVector)velocity SWIFT_WARN_UNUSED_RESULT;
/// Called when a panel has changed to a new state.
/// This can be called inside an animation block for presenting, dismissing a panel or moving a panel with your
/// animation. So any view properties set inside this function will be automatically animated alongside a panel.
- (void)floatingPanelDidChangeState:(FloatingPanelController * _Nonnull)fpc;
/// Asks the delegate if dragging should begin by the pan gesture recognizer.
- (BOOL)floatingPanelShouldBeginDragging:(FloatingPanelController * _Nonnull)fpc SWIFT_WARN_UNUSED_RESULT;
/// Called while the user drags the surface or the surface moves to a state anchor.
- (void)floatingPanelDidMove:(FloatingPanelController * _Nonnull)fpc;
/// Called on start of dragging (may require some time and or distance to move)
- (void)floatingPanelWillBeginDragging:(FloatingPanelController * _Nonnull)fpc;
/// Called on finger up if the user dragged. velocity is in points/second.
- (void)floatingPanelWillEndDragging:(FloatingPanelController * _Nonnull)fpc withVelocity:(CGPoint)velocity targetState:(FloatingPanelState * _Nonnull * _Nonnull)targetState;
/// Called on finger up if the user dragged.
/// If <code>attract</code> is true, it will continue moving afterwards to a nearby state anchor.
- (void)floatingPanelDidEndDragging:(FloatingPanelController * _Nonnull)fpc willAttract:(BOOL)attract;
/// Called when it is about to be attracted to a state anchor.
- (void)floatingPanelWillBeginAttracting:(FloatingPanelController * _Nonnull)fpc to:(FloatingPanelState * _Nonnull)state;
/// Called when attracting it is completed.
- (void)floatingPanelDidEndAttracting:(FloatingPanelController * _Nonnull)fpc;
/// Asks the delegate whether a panel should be removed when dragging ended at the specified location
/// This delegate method is called only where <code>FloatingPanel/FloatingPanelController/isRemovalInteractionEnabled</code>  is <code>true</code>.
/// The velocity vector is calculated from the distance to a point of the hidden state and the pan gesture’s velocity.
- (BOOL)floatingPanel:(FloatingPanelController * _Nonnull)fpc shouldRemoveAtLocation:(CGPoint)location withVelocity:(CGVector)velocity SWIFT_WARN_UNUSED_RESULT;
/// Called on start to remove its view controller from the parent view controller.
- (void)floatingPanelWillRemove:(FloatingPanelController * _Nonnull)fpc;
/// Called when a panel is removed from the parent view controller.
- (void)floatingPanelDidRemove:(FloatingPanelController * _Nonnull)fpc;
/// Asks the delegate for a content offset of the tracking scroll view to be pinned when a panel moves
/// If you do not implement this method, the controller uses a value of the content offset plus the content insets
/// of the tracked scroll view. Your implementation of this method can return a value for a navigation bar with a large
/// title, for example.
/// This method will not be called if the controller doesn’t track any scroll view.
- (CGPoint)floatingPanel:(FloatingPanelController * _Nonnull)fpc contentOffsetForPinningScrollView:(UIScrollView * _Nonnull)trackingScrollView SWIFT_WARN_UNUSED_RESULT;
@end


/// An object that defines how to settles a panel with the intrinsic size for a content.
SWIFT_CLASS("_TtC7NoorSDK34FloatingPanelIntrinsicLayoutAnchor")
@interface FloatingPanelIntrinsicLayoutAnchor : NSObject <FloatingPanelLayoutAnchoring>
/// Returns a layout anchor with the specified offset by an absolute value and reference guide for a panel.
/// The offset is an amount to offset a position of panel that displays the entire content from an edge of
/// the reference guide.  The edge refers to a panel positioning.
/// \param absoluteOffset An absolute offset from the content size in the main dimension(i.e. y axis for a bottom panel) to attach the panel.
///
/// \param referenceGuide The rectangular area to lay out the content. If it’s set to <code>.safeArea</code>, the panel content lays out inside the safe area of its <code>FloatingPanelController</code>’s view.
///
- (nonnull instancetype)initWithAbsoluteOffset:(CGFloat)offset referenceGuide:(enum FloatingPanelLayoutReferenceGuide)referenceGuide OBJC_DESIGNATED_INITIALIZER;
/// Returns a layout anchor with the specified offset by a fractional value and reference guide for a panel.
/// The offset value is a floating-point number in the range 0.0 to 1.0, where 0.0 represents the full content
/// is displayed and 0.5 represents the half of content is displayed.
/// \param fractionalOffset A fractional offset of the content size in the main dimension(i.e. y axis for a bottom panel) to attach the panel.
///
/// \param referenceGuide The rectangular area to lay out the content. If it’s set to <code>.safeArea</code>, the panel content lays out inside the safe area of its <code>FloatingPanelController</code>’s view.
///
- (nonnull instancetype)initWithFractionalOffset:(CGFloat)offset referenceGuide:(enum FloatingPanelLayoutReferenceGuide)referenceGuide OBJC_DESIGNATED_INITIALIZER;
/// The reference rectangle area for the offset
@property (nonatomic, readonly) enum FloatingPanelLayoutReferenceGuide referenceGuide;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface FloatingPanelIntrinsicLayoutAnchor (SWIFT_EXTENSION(NoorSDK))
- (NSArray<NSLayoutConstraint *> * _Nonnull)layoutConstraints:(FloatingPanelController * _Nonnull)vc for:(enum FloatingPanelPosition)position SWIFT_WARN_UNUSED_RESULT;
@end


enum FloatingPanelReferenceEdge : NSInteger;

/// An object that defines how to settles a panel with insets from an edge of a reference rectangle.
SWIFT_CLASS("_TtC7NoorSDK25FloatingPanelLayoutAnchor")
@interface FloatingPanelLayoutAnchor : NSObject <FloatingPanelLayoutAnchoring>
/// Returns a layout anchor with the specified inset by an absolute value, edge and reference guide for a panel.
/// The inset is an amount to inset a panel from an edge of the reference guide.  The edge refers to a panel
/// positioning.
/// \param absoluteOffset An absolute offset to attach the panel from the edge.
///
/// \param edge Specify the edge of <code>FloatingPanelController</code>’s view. This is the staring point of the offset.
///
/// \param referenceGuide The rectangular area to lay out the content. If it’s set to <code>.safeArea</code>, the panel content lays out inside the safe area of its <code>FloatingPanelController</code>’s view.
///
- (nonnull instancetype)initWithAbsoluteInset:(CGFloat)absoluteInset edge:(enum FloatingPanelReferenceEdge)edge referenceGuide:(enum FloatingPanelLayoutReferenceGuide)referenceGuide OBJC_DESIGNATED_INITIALIZER;
/// Returns a layout anchor with the specified inset by a fractional value, edge and reference guide for a panel.
/// The inset is an amount to inset a panel from the edge of the specified reference guide. The value is
/// a floating-point number in the range 0.0 to 1.0, where 0.0 represents zero distance from the edge and
/// 1.0 represents a distance to the opposite edge.
/// \param fractionalOffset A fractional value of the size of <code>FloatingPanelController</code>’s view to attach the panel from the edge.
///
/// \param edge Specify the edge of <code>FloatingPanelController</code>’s view. This is the staring point of the offset.
///
/// \param referenceGuide The rectangular area to lay out the content. If it’s set to <code>.safeArea</code>, the panel content lays out inside the safe area of its <code>FloatingPanelController</code>’s view.
///
- (nonnull instancetype)initWithFractionalInset:(CGFloat)fractionalInset edge:(enum FloatingPanelReferenceEdge)edge referenceGuide:(enum FloatingPanelLayoutReferenceGuide)referenceGuide OBJC_DESIGNATED_INITIALIZER;
/// The reference rectangle area for the inset.
@property (nonatomic, readonly) enum FloatingPanelLayoutReferenceGuide referenceGuide;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface FloatingPanelLayoutAnchor (SWIFT_EXTENSION(NoorSDK))
- (NSArray<NSLayoutConstraint *> * _Nonnull)layoutConstraints:(FloatingPanelController * _Nonnull)vc for:(enum FloatingPanelPosition)position SWIFT_WARN_UNUSED_RESULT;
@end


/// A representation to specify a bounding box which limit the content size of a panel.
typedef SWIFT_ENUM(NSInteger, FloatingPanelLayoutContentBoundingGuide, open) {
  FloatingPanelLayoutContentBoundingGuideNone = 0,
  FloatingPanelLayoutContentBoundingGuideSuperview = 1,
  FloatingPanelLayoutContentBoundingGuideSafeArea = 2,
};

/// A representation to specify a rectangular area to lay out a panel.
typedef SWIFT_ENUM(NSInteger, FloatingPanelLayoutReferenceGuide, open) {
  FloatingPanelLayoutReferenceGuideSuperview = 0,
  FloatingPanelLayoutReferenceGuideSafeArea = 1,
};

@class UITouch;
@protocol UIGestureRecognizerDelegate;

/// A gesture recognizer that looks for panning (dragging) gestures in a panel.
SWIFT_CLASS("_TtC7NoorSDK33FloatingPanelPanGestureRecognizer")
@interface FloatingPanelPanGestureRecognizer : UIPanGestureRecognizer
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nonnull)event;
/// The delegate of the gesture recognizer.
/// note:
/// The delegate is used by FloatingPanel itself. If you set your own delegate object, an
/// exception is raised. If you want to handle the methods of UIGestureRecognizerDelegate, you can use <code>delegateProxy</code>.
@property (nonatomic, weak) id <UIGestureRecognizerDelegate> _Nullable delegate;
- (nonnull instancetype)initWithTarget:(id _Nullable)target action:(SEL _Nullable)action OBJC_DESIGNATED_INITIALIZER;
@end

/// Constants describing the position of a panel in a screen
typedef SWIFT_ENUM(NSInteger, FloatingPanelPosition, open) {
  FloatingPanelPositionTop = 0,
  FloatingPanelPositionLeft = 1,
  FloatingPanelPositionBottom = 2,
  FloatingPanelPositionRight = 3,
};

/// Constants that specify the edge of the container of a panel.
typedef SWIFT_ENUM(NSInteger, FloatingPanelReferenceEdge, open) {
  FloatingPanelReferenceEdgeTop = 0,
  FloatingPanelReferenceEdgeLeft = 1,
  FloatingPanelReferenceEdgeBottom = 2,
  FloatingPanelReferenceEdgeRight = 3,
};


/// An object that represents the display state of a panel in a screen.
SWIFT_CLASS("_TtC7NoorSDK18FloatingPanelState")
@interface FloatingPanelState : NSObject <NSCopying>
- (nonnull instancetype)initWithRawValue:(NSString * _Nonnull)rawValue order:(NSInteger)order OBJC_DESIGNATED_INITIALIZER;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
/// A panel state indicates the entire panel is shown.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FloatingPanelState * _Nonnull Full;)
+ (FloatingPanelState * _Nonnull)Full SWIFT_WARN_UNUSED_RESULT;
/// A panel state indicates the half of a panel is shown.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FloatingPanelState * _Nonnull Half;)
+ (FloatingPanelState * _Nonnull)Half SWIFT_WARN_UNUSED_RESULT;
/// A panel state indicates the tip of a panel is shown.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FloatingPanelState * _Nonnull Tip;)
+ (FloatingPanelState * _Nonnull)Tip SWIFT_WARN_UNUSED_RESULT;
/// A panel state indicates it is hidden.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) FloatingPanelState * _Nonnull Hidden;)
+ (FloatingPanelState * _Nonnull)Hidden SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// A view that presents a grabber handle in the surface of a panel.
SWIFT_CLASS_NAMED("GrabberView")
@interface FloatingPanelGrabberView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)layoutSubviews;
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end



SWIFT_CLASS("_TtC7NoorSDK10IAPManager")
@interface IAPManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SKProductsRequest;
@class SKProductsResponse;
@class SKRequest;

@interface IAPManager (SWIFT_EXTENSION(NoorSDK)) <SKProductsRequestDelegate>
- (void)productsRequest:(SKProductsRequest * _Nonnull)request didReceiveResponse:(SKProductsResponse * _Nonnull)response;
- (void)request:(SKRequest * _Nonnull)request didFailWithError:(NSError * _Nonnull)error;
@end


@class SKPaymentQueue;
@class SKPaymentTransaction;

@interface IAPManager (SWIFT_EXTENSION(NoorSDK)) <SKPaymentTransactionObserver>
- (void)paymentQueue:(SKPaymentQueue * _Nonnull)queue updatedTransactions:(NSArray<SKPaymentTransaction *> * _Nonnull)transactions;
- (void)paymentQueue:(SKPaymentQueue * _Nonnull)queue restoreCompletedTransactionsFailedWithError:(NSError * _Nonnull)error;
@end

/// <code>IQAutoToolbarBySubviews</code>
/// Creates Toolbar according to subview’s hirarchy of Textfield’s in view.
/// <code>IQAutoToolbarByTag</code>
/// Creates Toolbar according to tag property of TextField’s.
/// <code>IQAutoToolbarByPosition</code>
/// Creates Toolbar according to the y,x position of textField in it’s superview coordinate.
typedef SWIFT_ENUM(NSInteger, IQAutoToolbarManageBehaviour, open) {
  IQAutoToolbarManageBehaviourBySubviews = 0,
  IQAutoToolbarManageBehaviourByTag = 1,
  IQAutoToolbarManageBehaviourByPosition = 2,
};

@class IQInvocation;

SWIFT_CLASS("_TtC7NoorSDK15IQBarButtonItem") SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface IQBarButtonItem : UIBarButtonItem
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, strong) UIColor * _Nullable tintColor;
/// Additional target & action to do get callback action. Note that setting custom target & selector doesn’t affect native functionality, this is just an additional target to get a callback.
/// @param target Target object.
/// @param action Target Selector.
- (void)setTarget:(id _Nullable)target action:(SEL _Nullable)action;
/// Customized Invocation to be called when button is pressed. invocation is internally created using setTarget:action: method.
@property (nonatomic, strong) IQInvocation * _Nullable invocation;
@end


/// IQBarButtonItemConfiguration for creating toolbar with bar button items
SWIFT_CLASS("_TtC7NoorSDK28IQBarButtonItemConfiguration") SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface IQBarButtonItemConfiguration : NSObject
- (nonnull instancetype)initWithBarButtonSystemItem:(UIBarButtonSystemItem)barButtonSystemItem action:(SEL _Nonnull)action OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image action:(SEL _Nonnull)action OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title action:(SEL _Nonnull)action OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
@property (nonatomic, readonly, copy) NSString * _Nullable title;
@property (nonatomic, readonly) SEL _Nullable action;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// <code>IQEnableModeDefault</code>
/// Pick default settings.
/// <code>IQEnableModeEnabled</code>
/// setting is enabled.
/// <code>IQEnableModeDisabled</code>
/// setting is disabled.
typedef SWIFT_ENUM(NSInteger, IQEnableMode, open) {
  IQEnableModeDefault = 0,
  IQEnableModeEnabled = 1,
  IQEnableModeDisabled = 2,
};


SWIFT_CLASS("_TtC7NoorSDK12IQInvocation") SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface IQInvocation : NSObject
@property (nonatomic, weak) id _Nullable target;
@property (nonatomic) SEL _Nonnull action;
- (nonnull instancetype)init:(id _Nonnull)target :(SEL _Nonnull)action OBJC_DESIGNATED_INITIALIZER;
- (void)invokeFrom:(id _Nonnull)from;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum IQPreviousNextDisplayMode : NSInteger;

/// Codeless drop-in universal library allows to prevent issues of keyboard sliding up and cover UITextField/UITextView. Neither need to write any code nor any setup required and much more. A generic version of KeyboardManagement. https://developer.apple.com/library/ios/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/KeyboardManagement/KeyboardManagement.html
SWIFT_CLASS("_TtC7NoorSDK17IQKeyboardManager") SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface IQKeyboardManager : NSObject
/// Returns the default singleton instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) IQKeyboardManager * _Nonnull shared;)
+ (IQKeyboardManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Enable/disable managing distance between keyboard and textField. Default is YES(Enabled when class loads in <code>+(void)load</code> method).
@property (nonatomic) BOOL enable;
/// To set keyboard distance from textField. can’t be less than zero. Default is 10.0.
@property (nonatomic) CGFloat keyboardDistanceFromTextField;
/// Automatic add the IQToolbar functionality. Default is YES.
@property (nonatomic) BOOL enableAutoToolbar;
/// /**
/// IQAutoToolbarBySubviews:   Creates Toolbar according to subview’s hirarchy of Textfield’s in view.
/// IQAutoToolbarByTag:        Creates Toolbar according to tag property of TextField’s.
/// IQAutoToolbarByPosition:   Creates Toolbar according to the y,x position of textField in it’s superview coordinate.
/// Default is IQAutoToolbarBySubviews.
/// */
/// AutoToolbar managing behaviour. Default is IQAutoToolbarBySubviews.
@property (nonatomic) enum IQAutoToolbarManageBehaviour toolbarManageBehaviour;
/// If YES, then uses textField’s tintColor property for IQToolbar, otherwise tint color is default. Default is NO.
@property (nonatomic) BOOL shouldToolbarUsesTextFieldTintColor;
/// This is used for toolbar.tintColor when textfield.keyboardAppearance is UIKeyboardAppearanceDefault. If shouldToolbarUsesTextFieldTintColor is YES then this property is ignored. Default is nil and uses black color.
@property (nonatomic, strong) UIColor * _Nullable toolbarTintColor;
/// This is used for toolbar.barTintColor. Default is nil.
@property (nonatomic, strong) UIColor * _Nullable toolbarBarTintColor;
/// IQPreviousNextDisplayModeDefault:      Show NextPrevious when there are more than 1 textField otherwise hide.
/// IQPreviousNextDisplayModeAlwaysHide:   Do not show NextPrevious buttons in any case.
/// IQPreviousNextDisplayModeAlwaysShow:   Always show nextPrevious buttons, if there are more than 1 textField then both buttons will be visible but will be shown as disabled.
@property (nonatomic) enum IQPreviousNextDisplayMode previousNextDisplayMode;
/// Toolbar previous/next/done button icon, If nothing is provided then check toolbarDoneBarButtonItemText to draw done button.
@property (nonatomic, strong) UIImage * _Nullable toolbarPreviousBarButtonItemImage;
@property (nonatomic, strong) UIImage * _Nullable toolbarNextBarButtonItemImage;
@property (nonatomic, strong) UIImage * _Nullable toolbarDoneBarButtonItemImage;
/// Toolbar previous/next/done button text, If nothing is provided then system default ‘UIBarButtonSystemItemDone’ will be used.
@property (nonatomic, copy) NSString * _Nullable toolbarPreviousBarButtonItemText;
@property (nonatomic, copy) NSString * _Nullable toolbarPreviousBarButtonItemAccessibilityLabel;
@property (nonatomic, copy) NSString * _Nullable toolbarNextBarButtonItemText;
@property (nonatomic, copy) NSString * _Nullable toolbarNextBarButtonItemAccessibilityLabel;
@property (nonatomic, copy) NSString * _Nullable toolbarDoneBarButtonItemText;
@property (nonatomic, copy) NSString * _Nullable toolbarDoneBarButtonItemAccessibilityLabel;
/// If YES, then it add the textField’s placeholder text on IQToolbar. Default is YES.
@property (nonatomic) BOOL shouldShowToolbarPlaceholder;
/// Placeholder Font. Default is nil.
@property (nonatomic, strong) UIFont * _Nullable placeholderFont;
/// Placeholder Color. Default is nil. Which means lightGray
@property (nonatomic, strong) UIColor * _Nullable placeholderColor;
/// Placeholder Button Color when it’s treated as button. Default is nil.
@property (nonatomic, strong) UIColor * _Nullable placeholderButtonColor;
/// Override the keyboardAppearance for all textField/textView. Default is NO.
@property (nonatomic) BOOL overrideKeyboardAppearance;
/// If overrideKeyboardAppearance is YES, then all the textField keyboardAppearance is set using this property.
@property (nonatomic) UIKeyboardAppearance keyboardAppearance;
/// Resigns Keyboard on touching outside of UITextField/View. Default is NO.
@property (nonatomic) BOOL shouldResignOnTouchOutside;
/// TapGesture to resign keyboard on view’s touch. It’s a readonly property and exposed only for adding/removing dependencies if your added gesture does have collision with this one
@property (nonatomic, strong) UITapGestureRecognizer * _Nonnull resignFirstResponderGesture;
/// Resigns currently first responder field.
- (BOOL)resignFirstResponder;
/// If YES, then it plays inputClick sound on next/previous/done click.
@property (nonatomic) BOOL shouldPlayInputClicks;
/// If YES, then calls ‘setNeedsLayout’ and ‘layoutIfNeeded’ on any frame update of to viewController’s view.
@property (nonatomic) BOOL layoutIfNeededOnUpdate;
/// Disable distance handling within the scope of disabled distance handling viewControllers classes. Within this scope, ‘enabled’ property is ignored. Class should be kind of UIViewController.
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIViewController)> * _Nonnull disabledDistanceHandlingClasses;
/// Enable distance handling within the scope of enabled distance handling viewControllers classes. Within this scope, ‘enabled’ property is ignored. Class should be kind of UIViewController. If same Class is added in disabledDistanceHandlingClasses list, then enabledDistanceHandlingClasses will be ignored.
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIViewController)> * _Nonnull enabledDistanceHandlingClasses;
/// Disable automatic toolbar creation within the scope of disabled toolbar viewControllers classes. Within this scope, ‘enableAutoToolbar’ property is ignored. Class should be kind of UIViewController.
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIViewController)> * _Nonnull disabledToolbarClasses;
/// Enable automatic toolbar creation within the scope of enabled toolbar viewControllers classes. Within this scope, ‘enableAutoToolbar’ property is ignored. Class should be kind of UIViewController. If same Class is added in disabledToolbarClasses list, then enabledToolbarClasses will be ignore.
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIViewController)> * _Nonnull enabledToolbarClasses;
/// Allowed subclasses of UIView to add all inner textField, this will allow to navigate between textField contains in different superview. Class should be kind of UIView.
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIView)> * _Nonnull toolbarPreviousNextAllowedClasses;
/// Disabled classes to ignore ‘shouldResignOnTouchOutside’ property, Class should be kind of UIViewController.
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIViewController)> * _Nonnull disabledTouchResignedClasses;
/// Enabled classes to forcefully enable ‘shouldResignOnTouchOutsite’ property. Class should be kind of UIViewController. If same Class is added in disabledTouchResignedClasses list, then enabledTouchResignedClasses will be ignored.
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIViewController)> * _Nonnull enabledTouchResignedClasses;
/// if shouldResignOnTouchOutside is enabled then you can customise the behaviour to not recognise gesture touches on some specific view subclasses. Class should be kind of UIView. Default is [UIControl, UINavigationBar]
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIView)> * _Nonnull touchResignedGestureIgnoreClasses;
/// Add/Remove customised Notification for third party customised TextField/TextView. Please be aware that the Notification object must be idential to UITextField/UITextView Notification objects and customised TextField/TextView support must be idential to UITextField/UITextView.
/// @param didBeginEditingNotificationName This should be identical to UITextViewTextDidBeginEditingNotification
/// @param didEndEditingNotificationName This should be identical to UITextViewTextDidEndEditingNotification
- (void)registerTextFieldViewClass:(SWIFT_METATYPE(UIView) _Nonnull)aClass didBeginEditingNotificationName:(NSString * _Nonnull)didBeginEditingNotificationName didEndEditingNotificationName:(NSString * _Nonnull)didEndEditingNotificationName;
- (void)unregisterTextFieldViewClass:(SWIFT_METATYPE(UIView) _Nonnull)aClass didBeginEditingNotificationName:(NSString * _Nonnull)didBeginEditingNotificationName didEndEditingNotificationName:(NSString * _Nonnull)didEndEditingNotificationName;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)reloadLayoutIfNeeded;
@end


@class UIGestureRecognizer;

SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface IQKeyboardManager (SWIFT_EXTENSION(NoorSDK)) <UIGestureRecognizerDelegate>
/// Note: returning YES is guaranteed to allow simultaneous recognition. returning NO is not guaranteed to prevent simultaneous recognition, as the other gesture’s delegate may return YES.
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
/// To not detect touch events in a subclass of UIControl, these may have added their own selector for specific work
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface IQKeyboardManager (SWIFT_EXTENSION(NoorSDK))
@property (nonatomic) BOOL enableDebugging;
/// @warning Use below methods to completely enable/disable notifications registered by library internally.
/// Please keep in mind that library is totally dependent on NSNotification of UITextField, UITextField, Keyboard etc.
/// If you do unregisterAllNotifications then library will not work at all. You should only use below methods if you want to completedly disable all library functions.
/// You should use below methods at your own risk.
- (void)registerAllNotifications;
- (void)unregisterAllNotifications;
@end


SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface IQKeyboardManager (SWIFT_EXTENSION(NoorSDK))
/// reloadInputViews to reload toolbar buttons enable/disable state on the fly Enhancement ID #434.
- (void)reloadInputViews;
@end


SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface IQKeyboardManager (SWIFT_EXTENSION(NoorSDK))
/// Returns YES if can navigate to previous responder textField/textView, otherwise NO.
@property (nonatomic, readonly) BOOL canGoPrevious;
/// Returns YES if can navigate to next responder textField/textView, otherwise NO.
@property (nonatomic, readonly) BOOL canGoNext;
/// Navigate to previous responder textField/textView.
- (BOOL)goPrevious;
/// Navigate to next responder textField/textView.
- (BOOL)goNext;
@end



SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface IQKeyboardManager (SWIFT_EXTENSION(NoorSDK))
/// moved distance to the top used to maintain distance between keyboard and textField. Most of the time this will be a positive value.
@property (nonatomic, readonly) CGFloat movedDistance;
/// Will be called then movedDistance will be changed
@property (nonatomic, copy) void (^ _Nullable movedDistanceChanged)(CGFloat);
@end


SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface IQKeyboardManager (SWIFT_EXTENSION(NoorSDK))
- (void)registerKeyboardSizeChangeWithIdentifier:(NSObject * _Nonnull)identifier sizeHandler:(void (^ _Nonnull)(CGSize))sizeHandler;
- (void)unregisterKeyboardSizeChangeWithIdentifier:(NSObject * _Nonnull)identifier;
/// Boolean to know if keyboard is showing.
@property (nonatomic, readonly) BOOL keyboardShowing;
/// To save keyboard rame.
@property (nonatomic, readonly) CGRect keyboardFrame;
@end

@protocol UITextViewDelegate;

/// Manages the return key to work like next/done in a view hierarchy.
SWIFT_CLASS("_TtC7NoorSDK26IQKeyboardReturnKeyHandler") SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface IQKeyboardReturnKeyHandler : NSObject
/// Delegate of textField/textView.
@property (nonatomic, weak) id <UITextFieldDelegate, UITextViewDelegate> _Nullable delegate;
/// Set the last textfield return key type. Default is UIReturnKeyDefault.
@property (nonatomic) UIReturnKeyType lastTextFieldReturnKeyType;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Add all the textFields available in UIViewController’s view.
- (nonnull instancetype)initWithController:(UIViewController * _Nonnull)controller OBJC_DESIGNATED_INITIALIZER;
/// Should pass UITextField/UITextView intance. Assign textFieldView delegate to self, change it’s returnKeyType.
/// @param view UITextField/UITextView object to register.
- (void)addTextFieldView:(UIView * _Nonnull)view;
/// Should pass UITextField/UITextView intance. Restore it’s textFieldView delegate and it’s returnKeyType.
/// @param view UITextField/UITextView object to unregister.
- (void)removeTextFieldView:(UIView * _Nonnull)view;
/// Add all the UITextField/UITextView responderView’s.
/// @param view UIView object to register all it’s responder subviews.
- (void)addResponderFromView:(UIView * _Nonnull)view;
/// Remove all the UITextField/UITextView responderView’s.
/// @param view UIView object to unregister all it’s responder subviews.
- (void)removeResponderFromView:(UIView * _Nonnull)view;
@end


SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface IQKeyboardReturnKeyHandler (SWIFT_EXTENSION(NoorSDK)) <UITextFieldDelegate>
- (BOOL)textFieldShouldBeginEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldEndEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField reason:(UITextFieldDidEndEditingReason)reason SWIFT_AVAILABILITY(ios,introduced=10.0);
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldClear:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
@end

@class UITextView;
@class NSURL;
@class NSTextAttachment;
@class UIMenuElement;
@class UIMenu;
@protocol UIEditMenuInteractionAnimating;

SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface IQKeyboardReturnKeyHandler (SWIFT_EXTENSION(NoorSDK)) <UITextViewDelegate>
- (BOOL)textViewShouldBeginEditing:(UITextView * _Nonnull)textView SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textViewShouldEndEditing:(UITextView * _Nonnull)textView SWIFT_WARN_UNUSED_RESULT;
- (void)textViewDidBeginEditing:(UITextView * _Nonnull)textView;
- (void)textViewDidEndEditing:(UITextView * _Nonnull)textView;
- (BOOL)textView:(UITextView * _Nonnull)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
- (void)textViewDidChange:(UITextView * _Nonnull)textView;
- (void)textViewDidChangeSelection:(UITextView * _Nonnull)textView;
- (BOOL)textView:(UITextView * _Nonnull)aTextView shouldInteractWithURL:(NSURL * _Nonnull)URL inRange:(NSRange)characterRange interaction:(UITextItemInteraction)interaction SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=10.0);
- (BOOL)textView:(UITextView * _Nonnull)aTextView shouldInteractWithTextAttachment:(NSTextAttachment * _Nonnull)textAttachment inRange:(NSRange)characterRange interaction:(UITextItemInteraction)interaction SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=10.0);
- (BOOL)textView:(UITextView * _Nonnull)aTextView shouldInteractWithURL:(NSURL * _Nonnull)URL inRange:(NSRange)characterRange SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,deprecated=10.0);
- (BOOL)textView:(UITextView * _Nonnull)aTextView shouldInteractWithTextAttachment:(NSTextAttachment * _Nonnull)textAttachment inRange:(NSRange)characterRange SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,deprecated=10.0);
- (UIMenu * _Nullable)textView:(UITextView * _Nonnull)aTextView editMenuForTextInRange:(NSRange)range suggestedActions:(NSArray<UIMenuElement *> * _Nonnull)suggestedActions SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=16.0);
- (void)textView:(UITextView * _Nonnull)aTextView willPresentEditMenuWithAnimator:(id <UIEditMenuInteractionAnimating> _Nonnull)animator SWIFT_AVAILABILITY(ios,introduced=16.0);
- (void)textView:(UITextView * _Nonnull)aTextView willDismissEditMenuWithAnimator:(id <UIEditMenuInteractionAnimating> _Nonnull)animator SWIFT_AVAILABILITY(ios,introduced=16.0);
@end

/// <code>IQPreviousNextDisplayModeDefault</code>
/// Show NextPrevious when there are more than 1 textField otherwise hide.
/// <code>IQPreviousNextDisplayModeAlwaysHide</code>
/// Do not show NextPrevious buttons in any case.
/// <code>IQPreviousNextDisplayModeAlwaysShow</code>
/// Always show nextPrevious buttons, if there are more than 1 textField then both buttons will be visible but will be shown as disabled.
typedef SWIFT_ENUM(NSInteger, IQPreviousNextDisplayMode, open) {
  IQPreviousNextDisplayModeDefault = 0,
  IQPreviousNextDisplayModeAlwaysHide = 1,
  IQPreviousNextDisplayModeAlwaysShow = 2,
};


SWIFT_CLASS("_TtC7NoorSDK18IQPreviousNextView") SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface IQPreviousNextView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSTextContainer;
@class NSAttributedString;

/// @abstract UITextView with placeholder support
SWIFT_CLASS("_TtC7NoorSDK10IQTextView") SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface IQTextView : UITextView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame textContainer:(NSTextContainer * _Nullable)textContainer OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
/// @abstract To set textView’s placeholder text color.
@property (nonatomic, strong) IBInspectable UIColor * _Nullable placeholderTextColor;
/// @abstract To set textView’s placeholder text. Default is nil.
@property (nonatomic, copy) IBInspectable NSString * _Nullable placeholder;
- (void)layoutSubviews;
@property (nonatomic, copy) NSString * _Null_unspecified text;
@property (nonatomic, strong) NSAttributedString * _Null_unspecified attributedText;
@property (nonatomic, strong) UIFont * _Nullable font;
@property (nonatomic) NSTextAlignment textAlignment;
@property (nonatomic, weak) id <UITextViewDelegate> _Nullable delegate;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end


SWIFT_CLASS("_TtC7NoorSDK20IQTitleBarButtonItem") SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface IQTitleBarButtonItem : IQBarButtonItem
@property (nonatomic, strong) UIFont * _Nullable titleFont;
@property (nonatomic, copy) NSString * _Nullable title;
/// titleColor to be used for displaying button text when displaying title (disabled state).
@property (nonatomic, strong) UIColor * _Nullable titleColor;
/// selectableTitleColor to be used for displaying button text when button is enabled.
@property (nonatomic, strong) UIColor * _Nullable selectableTitleColor;
/// Customized Invocation to be called on title button action. titleInvocation is internally created using setTitleTarget:action: method.
@property (nonatomic, strong) IQInvocation * _Nullable invocation;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithTitle:(NSString * _Nullable)title;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// @abstract   IQToolbar for IQKeyboardManager.
SWIFT_CLASS("_TtC7NoorSDK9IQToolbar") SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface IQToolbar : UIToolbar <UIInputViewAudioFeedback>
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, strong) IQBarButtonItem * _Nonnull previousBarButton;
@property (nonatomic, strong) IQBarButtonItem * _Nonnull nextBarButton;
@property (nonatomic, strong) IQTitleBarButtonItem * _Nonnull titleBarButton;
@property (nonatomic, strong) IQBarButtonItem * _Nonnull doneBarButton;
@property (nonatomic, strong) IQBarButtonItem * _Nonnull fixedSpaceBarButton;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
- (void)layoutSubviews;
@property (nonatomic, readonly) BOOL enableInputClicksWhenVisible;
@end


/// A view that adjusts it’s height based on keyboard hide and show notifications.
/// Pin it to the bottom of the screen using Auto Layout and then pin views that
/// should avoid the keyboard to the top of it. Supply an instance of this class
/// on <code>SwiftMessages.Config.keyboardTrackingView</code> or <code>SwiftMessagesSegue.keyboardTrackingView</code>
/// for automatic keyboard avoidance for the entire SwiftMessages view or view controller.
SWIFT_CLASS("_TtC7NoorSDK20KeyboardTrackingView")
@interface KeyboardTrackingView : UIView
/// The margin to maintain between the keyboard and the top of the view.
@property (nonatomic) IBInspectable CGFloat topMargin;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
@end


SWIFT_CLASS("_TtC7NoorSDK16LayoutConstraint")
@interface LayoutConstraint : NSLayoutConstraint
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface LayoutConstraint (SWIFT_EXTENSION(NoorSDK))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@class UIButton;

SWIFT_CLASS("_TtC7NoorSDK11MessageView")
@interface MessageView : BaseView
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
/// An optional title label.
@property (nonatomic, strong) IBOutlet UILabel * _Nullable titleLabel;
/// An optional body text label.
@property (nonatomic, strong) IBOutlet UILabel * _Nullable bodyLabel;
/// An optional icon image view.
@property (nonatomic, strong) IBOutlet UIImageView * _Nullable iconImageView;
/// An optional icon label (e.g. for emoji character, icon font, etc.).
@property (nonatomic, strong) IBOutlet UILabel * _Nullable iconLabel;
/// An optional button. This buttons’ <code>.TouchUpInside</code> event will automatically
/// invoke the optional <code>buttonTapHandler</code>, but its fine to add other target
/// action handlers can be added.
@property (nonatomic, strong) IBOutlet UIButton * _Nullable button;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end
















/// Activity indicator view with nice animations
SWIFT_CLASS("_TtC7NoorSDK23NVActivityIndicatorView")
@interface NVActivityIndicatorView : UIView
/// Color of activity indicator view.
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull color;
/// Padding of activity indicator view.
@property (nonatomic) IBInspectable CGFloat padding;
/// Returns an object initialized from data in a given unarchiver.
/// self, initialized using the data in decoder.
/// \param decoder an unarchiver object.
///
///
/// returns:
/// self, initialized using the data in decoder.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Returns the natural size for the receiving view, considering only properties of the view itself.
/// A size indicating the natural size for the receiving view based on its intrinsic properties.
///
/// returns:
/// A size indicating the natural size for the receiving view based on its intrinsic properties.
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@property (nonatomic) CGRect bounds;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class AVAsset;

SWIFT_CLASS("_TtC7NoorSDK19NoorAudioPlayerItem")
@interface NoorAudioPlayerItem : AVPlayerItem
- (nonnull instancetype)initWithAsset:(AVAsset * _Nonnull)asset automaticallyLoadedAssetKeys:(NSArray<NSString *> * _Nullable)automaticallyLoadedAssetKeys SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC7NoorSDK19NoorVideoPlayerItem")
@interface NoorVideoPlayerItem : AVPlayerItem
- (nonnull instancetype)initWithAsset:(AVAsset * _Nonnull)asset automaticallyLoadedAssetKeys:(NSArray<NSString *> * _Nullable)automaticallyLoadedAssetKeys SWIFT_UNAVAILABLE;
@end




SWIFT_CLASS("_TtC7NoorSDK16PhysicsAnimation")
@interface PhysicsAnimation : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)adjustMargins;
@end


SWIFT_CLASS("_TtC7NoorSDK20PickerViewController")
@interface PickerViewController : UIViewController
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)didReceiveMemoryWarning;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UICollectionViewLayout;

@interface PickerViewController (SWIFT_EXTENSION(NoorSDK)) <UICollectionViewDataSource, UICollectionViewDelegateFlowLayout>
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


IB_DESIGNABLE
SWIFT_CLASS("_TtC7NoorSDK18SteppedProgressBar")
@interface SteppedProgressBar : UIView
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull activeColor;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull inactiveColor;
@property (nonatomic, strong) IBInspectable UIColor * _Nonnull inactiveTextColor;
@property (nonatomic) IBInspectable CGFloat circleRadius;
@property (nonatomic) IBInspectable CGFloat titleOffset;
@property (nonatomic) IBInspectable CGFloat circleSpacing;
@property (nonatomic) IBInspectable CGFloat lineWidth;
@property (nonatomic) IBInspectable NSInteger currentTab;
@property (nonatomic) IBInspectable BOOL tintActiveImage;
@property (nonatomic) IBInspectable BOOL justCheckCompleted;
- (void)awakeFromNib;
- (void)drawRect:(CGRect)rect;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@class FloatingPanelSurfaceAppearanceShadow;

/// An object for customizing the appearance of a surface view
SWIFT_CLASS_NAMED("SurfaceAppearance")
@interface FloatingPanelSurfaceAppearance : NSObject
/// The background color of a surface view
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// The radius to use when drawing the top rounded corners.
/// <code>self.contentView</code> is masked with the top rounded corners automatically on iOS 11 and later.
/// On iOS 10, they are not automatically masked because of a UIVisualEffectView issue. See https://forums.developer.apple.com/thread/50854
@property (nonatomic) CGFloat cornerRadius;
/// Defines the curve used for rendering the rounded corners of the layer.
/// Defaults to <code>.circular</code>.
@property (nonatomic) CALayerCornerCurve _Nonnull cornerCurve SWIFT_AVAILABILITY(ios,introduced=13.0);
/// An array of shadows used to create drop shadows underneath a surface view.
@property (nonatomic, copy) NSArray<FloatingPanelSurfaceAppearanceShadow *> * _Nonnull shadows;
/// The border width of a surface view.
@property (nonatomic, strong) UIColor * _Nullable borderColor;
/// The border color of a surface view.
@property (nonatomic) CGFloat borderWidth;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// An object that represents information to render a shadow
SWIFT_CLASS_NAMED("Shadow")
@interface FloatingPanelSurfaceAppearanceShadow : NSObject
/// A Boolean indicating whether a shadow is displayed.
@property (nonatomic) BOOL hidden;
/// The color of a shadow.
@property (nonatomic, strong) UIColor * _Nonnull color;
/// The offset (in points) of a shadow.
@property (nonatomic) CGSize offset;
/// The opacity of a shadow.
@property (nonatomic) float opacity;
/// The blur radius (in points) used to render a shadow.
@property (nonatomic) CGFloat radius;
/// The inflated amount of a shadow prior to applying the blur.
@property (nonatomic) CGFloat spread;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A view that presents a surface interface in a panel.
SWIFT_CLASS_NAMED("SurfaceView")
@interface FloatingPanelSurfaceView : UIView
/// A <code>FloatingPanelGrabberView</code> object displayed at the top of the surface view.
/// To use a custom grabber, hide this and then add it to the surface view at appropriate point.
@property (nonatomic, readonly, strong) FloatingPanelGrabberView * _Nonnull grabberHandle;
/// Offset of the grabber handle from the interactive edge.
@property (nonatomic) CGFloat grabberHandlePadding;
/// The offset from the move edge to prevent the content scroll
@property (nonatomic) CGFloat grabberAreaOffset;
/// The grabber handle size
/// On left/right positioned panel the width dimension is used as the height of <code>grabberHandle</code>, and vice versa.
@property (nonatomic) CGSize grabberHandleSize;
/// The content view to be assigned a view of the content view controller of <code>FloatingPanelController</code>
@property (nonatomic, weak) UIView * _Nullable contentView;
/// The content insets specifying the insets around the content view.
@property (nonatomic) UIEdgeInsets contentPadding;
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// The appearance settings for a surface view.
@property (nonatomic, strong) FloatingPanelSurfaceAppearance * _Nonnull appearance;
/// The margins to use when laying out the container view wrapping content.
@property (nonatomic) UIEdgeInsets containerMargins;
/// The view that displays an actual surface shape.
/// It renders the background color, border line and top rounded corners,
/// specified by other properties. The reason why they’re not be applied to
/// a content view directly is because it avoids any side-effects to the
/// content view.
@property (nonatomic, readonly, strong) UIView * _Nonnull containerView;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL requiresConstraintBasedLayout;)
+ (BOOL)requiresConstraintBasedLayout SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)updateConstraints;
- (void)layoutSubviews;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end


/// <code>SwiftMessagesSegue</code> is a configurable subclass of <code>UIStoryboardSegue</code> that utilizes
/// SwiftMessages to present and dismiss modal view controllers. It performs these transitions by
/// becoming your view controller’s <code>transitioningDelegate</code> and calling SwiftMessage’s <code>show()</code>
/// and <code>hide()</code> under the hood.
/// To use <code>SwiftMessagesSegue</code> with Interface Builder, control-drag a segue, then select
/// “swift messages” from the Segue Type dialog. This configures a default transition. There are
/// two suggested ways to further configure the transition by setting options on <code>SwiftMessagesSegue</code>.
/// First, and recommended, you may subclass <code>SwiftMessagesSegue</code> and override <code>init(identifier:source:destination:)</code>.
/// Subclasses will automatically appear in the segue type dialog using an auto-generated name (for example, the
/// name for “VeryNiceSegue” would be “very nice”). Second, you may override <code>prepare(for:sender:)</code> in the
/// presenting view controller and downcast the segue to <code>SwiftMessagesSegue</code>.
/// <code>SwiftMessagesSegue</code> can be used without an associated storyboard or segue by doing the following in
/// the presenting view controller.
/// \code
/// let destinationVC = ... // make a reference to a destination view controller
/// let segue = SwiftMessagesSegue(identifier: nil, source: self, destination: destinationVC)
/// ... // do any configuration here
/// segue.perform()
///
/// \endcodeTo dismiss, call the UIKit API on the presenting view controller:
/// \code
/// dismiss(animated: true, completion: nil)
///
/// \endcodeIt is not necessary to retain <code>segue</code> because it retains itself until dismissal. However, you can
/// retain it if you plan to <code>perform()</code> more than once.
/// <h4>Present the controller on top of all controllers</h4>
/// If you don’t know the presenter or you don’t want to pass it as a source, like when you
/// have a completely separated message controller, you can pass a <code>WindowViewController</code>
/// as the <code>source</code> argument of the segue’s initializer.
/// By default, the window will be shown in the current window scene at <code>.normal</code> window level.
/// However, these parameters can be customized by initializing the view controller with a <code>SwiftMessages.Config</code> that has the <code>SwiftMessages.Config.presentationContext</code> set to either <code>.window</code> or <code>.windowScene</code>:
/// note:
/// Some additional details:
/// <ol>
///   <li>
///     Your view controller’s view will be embedded in a <code>SwiftMessages.BaseView</code> in order to
///     utilize some SwiftMessages features. This view can be accessed and configured via the
///     <code>SwiftMessagesSegue.messageView</code> property. For example, you may configure a default drop
///     shadow by calling <code>segue.messageView.configureDropShadow()</code>.
///   </li>
///   <li>
///     SwiftMessagesSegue provides static default view controller sizing based on device.
///     However, it is recommended that you specify sizing appropriate for your content using
///     one of the following methods.
///     <ol>
///       <li>
///         Define sufficient width and height constraints in your view controller.
///       </li>
///       <li>
///         Set <code>preferredContentSize</code> (a.k.a “Use Preferred Explicit Size” in Interface Builder’s
///         attribute inspector). Zeros are ignored, e.g. <code>CGSize(width: 0, height: 350)</code> only
///         affects the height.
///       </li>
///       <li>
///         Add explicit width and/or height constraints to <code>segue.messageView.backgroundView</code>.
///         Note that <code>Layout.topMessage</code> and <code>Layout.bottomMessage</code> are always full screen width.
///         For other layouts, the there is a maximum 500pt width on iPad (regular horizontal size class)
///         at 950 priority, which can be overridden by adding higher-priority constraints.
///       </li>
///     </ol>
///   </li>
/// </ol>
/// See the “View Controllers” selection in the Demo app for examples.
SWIFT_CLASS("_TtC7NoorSDK18SwiftMessagesSegue")
@interface SwiftMessagesSegue : UIStoryboardSegue
- (void)perform;
- (nonnull instancetype)initWithIdentifier:(NSString * _Nullable)identifier source:(UIViewController * _Nonnull)source destination:(UIViewController * _Nonnull)destination OBJC_DESIGNATED_INITIALIZER;
@end




@protocol UIViewControllerAnimatedTransitioning;

@interface SwiftMessagesSegue (SWIFT_EXTENSION(NoorSDK)) <UIViewControllerTransitioningDelegate>
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForPresentedController:(UIViewController * _Nonnull)presented presentingController:(UIViewController * _Nonnull)presenting sourceController:(UIViewController * _Nonnull)source SWIFT_WARN_UNUSED_RESULT;
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForDismissedController:(UIViewController * _Nonnull)dismissed SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_CLASS("_TtC7NoorSDK18TopBottomAnimation")
@interface TopBottomAnimation : NSObject
- (void)adjustMargins;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end








@interface UIButton (SWIFT_EXTENSION(NoorSDK))
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
@end


















SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface UIImage (SWIFT_EXTENSION(NoorSDK))
+ (UIImage * _Nullable)keyboardLeftImage SWIFT_WARN_UNUSED_RESULT;
+ (UIImage * _Nullable)keyboardRightImage SWIFT_WARN_UNUSED_RESULT;
+ (UIImage * _Nullable)keyboardUpImage SWIFT_WARN_UNUSED_RESULT;
+ (UIImage * _Nullable)keyboardDownImage SWIFT_WARN_UNUSED_RESULT;
+ (UIImage * _Nullable)keyboardPreviousImage SWIFT_WARN_UNUSED_RESULT;
+ (UIImage * _Nullable)keyboardNextImage SWIFT_WARN_UNUSED_RESULT;
@end












SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface UIScrollView (SWIFT_EXTENSION(NoorSDK))
/// If YES, then scrollview will ignore scrolling (simply not scroll it) for adjusting textfield position. Default is NO.
@property (nonatomic) BOOL shouldIgnoreScrollingAdjustment;
/// If YES, then scrollview will ignore content inset adjustment (simply not updating it) when keyboard is shown. Default is NO.
@property (nonatomic) BOOL shouldIgnoreContentInsetAdjustment;
/// To set customized distance from keyboard for textField/textView. Can’t be less than zero
@property (nonatomic) BOOL shouldRestoreScrollViewContentOffset;
@end























SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface UIView (SWIFT_EXTENSION(NoorSDK))
/// To set customized distance from keyboard for textField/textView. Can’t be less than zero
@property (nonatomic) CGFloat keyboardDistanceFromTextField;
/// If shouldIgnoreSwitchingByNextPrevious is true then library will ignore this textField/textView while moving to other textField/textView using keyboard toolbar next previous buttons. Default is false
@property (nonatomic) BOOL ignoreSwitchingByNextPrevious;
/// Override Enable/disable managing distance between keyboard and textField behaviour for this particular textField.
@property (nonatomic) enum IQEnableMode enableMode;
/// Override resigns Keyboard on touching outside of UITextField/View behaviour for this particular textField.
@property (nonatomic) enum IQEnableMode shouldResignOnTouchOutsideMode;
@end


SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface UIView (SWIFT_EXTENSION(NoorSDK))
/// Returns the UIViewController object that manages the receiver.
- (UIViewController * _Nullable)viewContainingController SWIFT_WARN_UNUSED_RESULT;
/// Returns the topMost UIViewController object in hierarchy.
- (UIViewController * _Nullable)topMostController SWIFT_WARN_UNUSED_RESULT;
/// Returns the UIViewController object that is actually the parent of this object. Most of the time it’s the viewController object which actually contains it, but result may be different if it’s viewController is added as childViewController of another viewController.
- (UIViewController * _Nullable)parentContainerViewController SWIFT_WARN_UNUSED_RESULT;
/// Returns the superView of provided class type.
/// @param classType class type of the object which is to be search in above hierarchy and return
/// @param belowView view object in upper hierarchy where method should stop searching and return nil
- (UIView * _Nullable)superviewOfClassType:(SWIFT_METATYPE(UIView) _Nonnull)classType belowView:(UIView * _Nullable)belowView SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface UIView (SWIFT_EXTENSION(NoorSDK))
/// IQToolbar references for better customization control.
@property (nonatomic, readonly, strong) IQToolbar * _Nonnull keyboardToolbar;
/// If <code>shouldHideToolbarPlaceholder</code> is YES, then title will not be added to the toolbar. Default to NO.
@property (nonatomic) BOOL shouldHideToolbarPlaceholder;
/// <code>toolbarPlaceholder</code> to override default <code>placeholder</code> text when drawing text on toolbar.
@property (nonatomic, copy) NSString * _Nullable toolbarPlaceholder;
/// <code>drawingToolbarPlaceholder</code> will be actual text used to draw on toolbar. This would either <code>placeholder</code> or <code>toolbarPlaceholder</code>.
@property (nonatomic, readonly, copy) NSString * _Nullable drawingToolbarPlaceholder;
- (void)addKeyboardToolbarWithTargetWithTarget:(id _Nullable)target titleText:(NSString * _Nullable)titleText rightBarButtonConfiguration:(IQBarButtonItemConfiguration * _Nullable)rightBarButtonConfiguration previousBarButtonConfiguration:(IQBarButtonItemConfiguration * _Nullable)previousBarButtonConfiguration nextBarButtonConfiguration:(IQBarButtonItemConfiguration * _Nullable)nextBarButtonConfiguration;
- (void)addDoneOnKeyboardWithTarget:(id _Nullable)target action:(SEL _Nonnull)action shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)addDoneOnKeyboardWithTarget:(id _Nullable)target action:(SEL _Nonnull)action titleText:(NSString * _Nullable)titleText;
- (void)addRightButtonOnKeyboardWithImage:(UIImage * _Nonnull)image target:(id _Nullable)target action:(SEL _Nonnull)action shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)addRightButtonOnKeyboardWithImage:(UIImage * _Nonnull)image target:(id _Nullable)target action:(SEL _Nonnull)action titleText:(NSString * _Nullable)titleText;
- (void)addRightButtonOnKeyboardWithText:(NSString * _Nonnull)text target:(id _Nullable)target action:(SEL _Nonnull)action shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)addRightButtonOnKeyboardWithText:(NSString * _Nonnull)text target:(id _Nullable)target action:(SEL _Nonnull)action titleText:(NSString * _Nullable)titleText;
- (void)addCancelDoneOnKeyboardWithTarget:(id _Nullable)target cancelAction:(SEL _Nonnull)cancelAction doneAction:(SEL _Nonnull)doneAction shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)addRightLeftOnKeyboardWithTarget:(id _Nullable)target leftButtonTitle:(NSString * _Nonnull)leftButtonTitle rightButtonTitle:(NSString * _Nonnull)rightButtonTitle leftButtonAction:(SEL _Nonnull)leftButtonAction rightButtonAction:(SEL _Nonnull)rightButtonAction shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)addRightLeftOnKeyboardWithTarget:(id _Nullable)target leftButtonImage:(UIImage * _Nonnull)leftButtonImage rightButtonImage:(UIImage * _Nonnull)rightButtonImage leftButtonAction:(SEL _Nonnull)leftButtonAction rightButtonAction:(SEL _Nonnull)rightButtonAction shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)addCancelDoneOnKeyboardWithTarget:(id _Nullable)target cancelAction:(SEL _Nonnull)cancelAction doneAction:(SEL _Nonnull)doneAction titleText:(NSString * _Nullable)titleText;
- (void)addRightLeftOnKeyboardWithTarget:(id _Nullable)target leftButtonTitle:(NSString * _Nonnull)leftButtonTitle rightButtonTitle:(NSString * _Nonnull)rightButtonTitle leftButtonAction:(SEL _Nonnull)leftButtonAction rightButtonAction:(SEL _Nonnull)rightButtonAction titleText:(NSString * _Nullable)titleText;
- (void)addRightLeftOnKeyboardWithTarget:(id _Nullable)target leftButtonImage:(UIImage * _Nonnull)leftButtonImage rightButtonImage:(UIImage * _Nonnull)rightButtonImage leftButtonAction:(SEL _Nonnull)leftButtonAction rightButtonAction:(SEL _Nonnull)rightButtonAction titleText:(NSString * _Nullable)titleText;
- (void)addPreviousNextDoneOnKeyboardWithTarget:(id _Nullable)target previousAction:(SEL _Nonnull)previousAction nextAction:(SEL _Nonnull)nextAction doneAction:(SEL _Nonnull)doneAction shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)addPreviousNextRightOnKeyboardWithTarget:(id _Nullable)target rightButtonImage:(UIImage * _Nonnull)rightButtonImage previousAction:(SEL _Nonnull)previousAction nextAction:(SEL _Nonnull)nextAction rightButtonAction:(SEL _Nonnull)rightButtonAction shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)addPreviousNextRightOnKeyboardWithTarget:(id _Nullable)target rightButtonTitle:(NSString * _Nonnull)rightButtonTitle previousAction:(SEL _Nonnull)previousAction nextAction:(SEL _Nonnull)nextAction rightButtonAction:(SEL _Nonnull)rightButtonAction shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)addPreviousNextDoneOnKeyboardWithTarget:(id _Nullable)target previousAction:(SEL _Nonnull)previousAction nextAction:(SEL _Nonnull)nextAction doneAction:(SEL _Nonnull)doneAction titleText:(NSString * _Nullable)titleText;
- (void)addPreviousNextRightOnKeyboardWithTarget:(id _Nullable)target rightButtonImage:(UIImage * _Nonnull)rightButtonImage previousAction:(SEL _Nonnull)previousAction nextAction:(SEL _Nonnull)nextAction rightButtonAction:(SEL _Nonnull)rightButtonAction titleText:(NSString * _Nullable)titleText;
- (void)addPreviousNextRightOnKeyboardWithTarget:(id _Nullable)target rightButtonTitle:(NSString * _Nonnull)rightButtonTitle previousAction:(SEL _Nonnull)previousAction nextAction:(SEL _Nonnull)nextAction rightButtonAction:(SEL _Nonnull)rightButtonAction titleText:(NSString * _Nullable)titleText;
@end




@interface UIViewController (SWIFT_EXTENSION(NoorSDK))
- (void)fp_original_dismissWithAnimated:(BOOL)flag completion:(void (^ _Nullable)(void))completion;
- (void)fp_dismissWithAnimated:(BOOL)flag completion:(void (^ _Nullable)(void))completion;
@end



SWIFT_AVAILABILITY(ios_app_extension,unavailable)
@interface UIViewController (SWIFT_EXTENSION(NoorSDK))
/// This method is provided to override by viewController’s if the library lifts a viewController which you doesn’t want to lift . This may happen if you have implemented side menu feature in your app and the library try to lift the side menu controller. Overriding this method in side menu class to return correct controller should fix the problem.
- (UIViewController * _Nullable)parentIQContainerViewController SWIFT_WARN_UNUSED_RESULT;
/// To set customized distance from keyboard for textField/textView. Can’t be less than zero
/// @deprecated    Due to change in core-logic of handling distance between textField and keyboard distance, this layout contraint tweak is no longer needed and things will just work out of the box regardless of constraint pinned with safeArea/layoutGuide/superview
@property (nonatomic, strong) IBOutlet NSLayoutConstraint * _Nullable IQLayoutGuideConstraint SWIFT_DEPRECATED_MSG("Due to change in core-logic of handling distance between textField and keyboard distance, this layout contraint tweak is no longer needed and things will just work out of the box regardless of constraint pinned with safeArea/layoutGuide/superview.");
@end







SWIFT_CLASS("_TtC7NoorSDK8VGPlayer")
@interface VGPlayer : NSObject
- (nonnull instancetype)init;
@end


@interface VGPlayer (SWIFT_EXTENSION(NoorSDK))
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end





SWIFT_CLASS("_TtC7NoorSDK26VGPlayerCacheConfiguration")
@interface VGPlayerCacheConfiguration : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7NoorSDK20VGPlayerCacheManager")
@interface VGPlayerCacheManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7NoorSDK18VGPlayerCacheMedia")
@interface VGPlayerCacheMedia : NSObject <NSCoding>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7NoorSDK31VGPlayerCacheMediaConfiguration")
@interface VGPlayerCacheMediaConfiguration : NSObject <NSCoding, NSCopying>
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder;
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC7NoorSDK24VGPlayerCacheMediaWorker")
@interface VGPlayerCacheMediaWorker : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7NoorSDK20VGPlayerCacheSession")
@interface VGPlayerCacheSession : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7NoorSDK28VGPlayerDownloadActionWorker")
@interface VGPlayerDownloadActionWorker : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class NSURLSession;
@class NSURLSessionDataTask;
@class NSURLResponse;
@class NSData;
@class NSURLSessionTask;

SWIFT_CLASS("_TtC7NoorSDK33VGPlayerDownloadURLSessionManager")
@interface VGPlayerDownloadURLSessionManager : NSObject <NSURLSessionDataDelegate>
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didReceiveResponse:(NSURLResponse * _Nonnull)response completionHandler:(void (^ _Nonnull)(NSURLSessionResponseDisposition))completionHandler;
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didReceiveData:(NSData * _Nonnull)data;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didCompleteWithError:(NSError * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7NoorSDK18VGPlayerDownloader")
@interface VGPlayerDownloader : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC7NoorSDK24VGPlayerLoadingIndicator")
@interface VGPlayerLoadingIndicator : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end


SWIFT_CLASS("_TtC7NoorSDK22VGPlayerResourceLoader")
@interface VGPlayerResourceLoader : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC7NoorSDK29VGPlayerResourceLoaderManager")
@interface VGPlayerResourceLoaderManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class AVAssetResourceLoader;
@class AVAssetResourceLoadingRequest;

@interface VGPlayerResourceLoaderManager (SWIFT_EXTENSION(NoorSDK)) <AVAssetResourceLoaderDelegate>
- (BOOL)resourceLoader:(AVAssetResourceLoader * _Nonnull)resourceLoader shouldWaitForLoadingOfRequestedResource:(AVAssetResourceLoadingRequest * _Nonnull)loadingRequest SWIFT_WARN_UNUSED_RESULT;
- (void)resourceLoader:(AVAssetResourceLoader * _Nonnull)resourceLoader didCancelLoadingRequest:(AVAssetResourceLoadingRequest * _Nonnull)loadingRequest;
@end


SWIFT_CLASS("_TtC7NoorSDK30VGPlayerResourceLoadingRequest")
@interface VGPlayerResourceLoadingRequest : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC7NoorSDK14VGPlayerSlider")
@interface VGPlayerSlider : UISlider
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (CGRect)thumbRectForBounds:(CGRect)bounds trackRect:(CGRect)rect value:(float)value SWIFT_WARN_UNUSED_RESULT;
- (CGRect)trackRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC7NoorSDK12VGPlayerView")
@interface VGPlayerView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end



@interface VGPlayerView (SWIFT_EXTENSION(NoorSDK)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
@end





@interface VGPlayerView (SWIFT_EXTENSION(NoorSDK))
/// Single Tap Event
/// \param gesture Single Tap Gesture
///
- (void)onSingleTapGesture:(UITapGestureRecognizer * _Nonnull)gesture;
/// Double Tap Event
/// \param gesture Double Tap Gesture
///
- (void)onDoubleTapGesture:(UITapGestureRecognizer * _Nonnull)gesture;
/// Pan Event
/// \param gesture Pan Gesture
///
- (void)onPanGesture:(UIPanGestureRecognizer * _Nonnull)gesture;
@end


SWIFT_CLASS("_TtC7NoorSDK20WindowViewController")
@interface WindowViewController : UIViewController
@property (nonatomic, readonly) BOOL shouldAutorotate;
- (nonnull instancetype)init;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@class WKWebView;
@class WKNavigationAction;

/// Embed and control YouTube videos
SWIFT_CLASS("_TtC7NoorSDK17YouTubePlayerView")
@interface YouTubePlayerView : UIView <WKNavigationDelegate>
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))decisionHandler;
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
